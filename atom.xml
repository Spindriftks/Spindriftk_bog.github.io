<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>它夏了夏天</title>
  
  <subtitle>生命中有一种遇见，就让它美如行云流水，然后一生去回味。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tokyle.com/"/>
  <updated>2019-08-02T02:30:13.153Z</updated>
  <id>http://tokyle.com/</id>
  
  <author>
    <name>Kyle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]Git Cheat Sheet中文版</title>
    <link href="http://tokyle.com/2019/08/01/%E8%BD%AC-Git-Cheat-Sheet%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://tokyle.com/2019/08/01/转-Git-Cheat-Sheet中文版/</id>
    <published>2019-08-02T02:27:11.000Z</published>
    <updated>2019-08-02T02:30:13.153Z</updated>
    
    <content type="html"><![CDATA[<p>Git Cheat Sheet 中文版</p><a id="more"></a><p>转自互联网,感谢原作者：</p><blockquote><p><a href="https://github.com/flyhigher139/Git-Cheat-Sheet" target="_blank" rel="noopener">Git Cheat Sheet 中文版</a></p></blockquote><p>=====================</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><a href="#配置">配置</a></li><li><a href="#配置文件">配置文件</a></li><li><a href="#创建">创建</a></li><li><a href="#本地修改">本地修改</a></li><li><a href="#搜索">搜索</a></li><li><a href="#提交历史">提交历史</a></li><li><a href="#分支与标签">分支与标签</a></li><li><a href="#更新与发布">更新与发布</a></li><li><a href="#合并与重置">合并与重置</a></li><li><a href="#撤销">撤销</a></li><li><a href="#git-flow">Git Flow</a></li></ul><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h5 id="列出当前配置："><a href="#列出当前配置：" class="headerlink" title="列出当前配置："></a>列出当前配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure><h5 id="列出repository配置："><a href="#列出repository配置：" class="headerlink" title="列出repository配置："></a>列出repository配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --local --list</span><br></pre></td></tr></table></figure><h5 id="列出全局配置："><a href="#列出全局配置：" class="headerlink" title="列出全局配置："></a>列出全局配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --list</span><br></pre></td></tr></table></figure><h5 id="列出系统配置："><a href="#列出系统配置：" class="headerlink" title="列出系统配置："></a>列出系统配置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --system --list</span><br></pre></td></tr></table></figure><h5 id="设置用户名："><a href="#设置用户名：" class="headerlink" title="设置用户名："></a>设置用户名：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name “[firstname lastname]”</span><br></pre></td></tr></table></figure><h5 id="设置用户邮箱："><a href="#设置用户邮箱：" class="headerlink" title="设置用户邮箱："></a>设置用户邮箱：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email “[valid-email]”</span><br></pre></td></tr></table></figure><h5 id="设置git命令输出为彩色："><a href="#设置git命令输出为彩色：" class="headerlink" title="设置git命令输出为彩色："></a>设置git命令输出为彩色：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure><h5 id="设置git使用的文本编辑器设："><a href="#设置git使用的文本编辑器设：" class="headerlink" title="设置git使用的文本编辑器设："></a>设置git使用的文本编辑器设：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor vi</span><br></pre></td></tr></table></figure><hr><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h5 id="Repository配置对应的配置文件路径-–local-："><a href="#Repository配置对应的配置文件路径-–local-：" class="headerlink" title="Repository配置对应的配置文件路径[–local]："></a>Repository配置对应的配置文件路径[–local]：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;repo&gt;/.git/config</span><br></pre></td></tr></table></figure><h5 id="用户全局配置对应的配置文件路径-–global-："><a href="#用户全局配置对应的配置文件路径-–global-：" class="headerlink" title="用户全局配置对应的配置文件路径[–global]："></a>用户全局配置对应的配置文件路径[–global]：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.gitconfig</span><br></pre></td></tr></table></figure><h5 id="系统配置对应的配置文件路径-–local-："><a href="#系统配置对应的配置文件路径-–local-：" class="headerlink" title="系统配置对应的配置文件路径[–local]："></a>系统配置对应的配置文件路径[–local]：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/gitconfig</span><br></pre></td></tr></table></figure><hr><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h5 id="复制一个已创建的仓库"><a href="#复制一个已创建的仓库" class="headerlink" title="复制一个已创建的仓库:"></a>复制一个已创建的仓库:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 SSH</span></span><br><span class="line">$ git <span class="built_in">clone</span> ssh://user@domain.com/repo.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过 HTTP</span></span><br><span class="line">$ git <span class="built_in">clone</span> http://domain.com/user/repo.git</span><br></pre></td></tr></table></figure><h5 id="创建一个新的本地仓库"><a href="#创建一个新的本地仓库" class="headerlink" title="创建一个新的本地仓库:"></a>创建一个新的本地仓库:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><hr><h3 id="本地修改"><a href="#本地修改" class="headerlink" title="本地修改"></a>本地修改</h3><h5 id="显示工作路径下已修改的文件："><a href="#显示工作路径下已修改的文件：" class="headerlink" title="显示工作路径下已修改的文件："></a>显示工作路径下已修改的文件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h5 id="显示与上次提交版本文件的不同："><a href="#显示与上次提交版本文件的不同：" class="headerlink" title="显示与上次提交版本文件的不同："></a>显示与上次提交版本文件的不同：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h5 id="把当前所有修改添加到下次提交中："><a href="#把当前所有修改添加到下次提交中：" class="headerlink" title="把当前所有修改添加到下次提交中："></a>把当前所有修改添加到下次提交中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><h5 id="把对某个文件的修改添加到下次提交中："><a href="#把对某个文件的修改添加到下次提交中：" class="headerlink" title="把对某个文件的修改添加到下次提交中："></a>把对某个文件的修改添加到下次提交中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -p &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="提交本地的所有修改："><a href="#提交本地的所有修改：" class="headerlink" title="提交本地的所有修改："></a>提交本地的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure><h5 id="提交之前已标记的变化："><a href="#提交之前已标记的变化：" class="headerlink" title="提交之前已标记的变化："></a>提交之前已标记的变化：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit</span><br></pre></td></tr></table></figure><h5 id="附加消息提交："><a href="#附加消息提交：" class="headerlink" title="附加消息提交："></a>附加消息提交：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &apos;message here&apos;</span><br></pre></td></tr></table></figure><h5 id="提交，并将提交时间设置为之前的某个日期"><a href="#提交，并将提交时间设置为之前的某个日期" class="headerlink" title="提交，并将提交时间设置为之前的某个日期:"></a>提交，并将提交时间设置为之前的某个日期:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --date=&quot;`date --date=&apos;n day ago&apos;`&quot; -am &quot;Commit Message&quot;</span><br></pre></td></tr></table></figure><h5 id="修改上次提交"><a href="#修改上次提交" class="headerlink" title="修改上次提交"></a>修改上次提交</h5><p><em><sub>请勿修改已发布的提交记录!</sub></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure></p><h5 id="修改上次提交的committer-date："><a href="#修改上次提交的committer-date：" class="headerlink" title="修改上次提交的committer date："></a>修改上次提交的committer date：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIT_COMMITTER_DATE=&quot;date&quot; git commit --amend</span><br></pre></td></tr></table></figure><h5 id="修改上次提交的author-date："><a href="#修改上次提交的author-date：" class="headerlink" title="修改上次提交的author date："></a>修改上次提交的author date：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --date=&quot;date&quot;</span><br></pre></td></tr></table></figure><h5 id="把当前分支中未提交的修改移动到其他分支："><a href="#把当前分支中未提交的修改移动到其他分支：" class="headerlink" title="把当前分支中未提交的修改移动到其他分支："></a>把当前分支中未提交的修改移动到其他分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout branch2</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h5 id="将-stashed-changes-应用到当前分支："><a href="#将-stashed-changes-应用到当前分支：" class="headerlink" title="将 stashed changes 应用到当前分支："></a>将 stashed changes 应用到当前分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure><h5 id="删除最新一次的-stashed-changes："><a href="#删除最新一次的-stashed-changes：" class="headerlink" title="删除最新一次的 stashed changes："></a>删除最新一次的 stashed changes：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure><hr><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><h5 id="从当前目录的所有文件中查找文本内容："><a href="#从当前目录的所有文件中查找文本内容：" class="headerlink" title="从当前目录的所有文件中查找文本内容："></a>从当前目录的所有文件中查找文本内容：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git grep &quot;Hello&quot;</span><br></pre></td></tr></table></figure><h5 id="在某一版本中搜索文本："><a href="#在某一版本中搜索文本：" class="headerlink" title="在某一版本中搜索文本："></a>在某一版本中搜索文本：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git grep &quot;Hello&quot; v2.5</span><br></pre></td></tr></table></figure><hr><h3 id="提交历史"><a href="#提交历史" class="headerlink" title="提交历史"></a>提交历史</h3><h5 id="从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）："><a href="#从最新提交开始，显示所有的提交记录（显示hash，-作者信息，提交的标题和时间）：" class="headerlink" title="从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）："></a>从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><h5 id="显示所有提交（仅显示提交的hash和message）："><a href="#显示所有提交（仅显示提交的hash和message）：" class="headerlink" title="显示所有提交（仅显示提交的hash和message）："></a>显示所有提交（仅显示提交的hash和message）：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline</span><br></pre></td></tr></table></figure><h5 id="显示某个用户的所有提交："><a href="#显示某个用户的所有提交：" class="headerlink" title="显示某个用户的所有提交："></a>显示某个用户的所有提交：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --author=&quot;username&quot;</span><br></pre></td></tr></table></figure><h5 id="显示某个文件的所有修改："><a href="#显示某个文件的所有修改：" class="headerlink" title="显示某个文件的所有修改："></a>显示某个文件的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log -p &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="仅显示远端分支与远端分支提交记录的差集："><a href="#仅显示远端分支与远端分支提交记录的差集：" class="headerlink" title="仅显示远端分支与远端分支提交记录的差集："></a>仅显示远端<remote master>分支与远端<origin master>分支提交记录的差集：</origin></remote></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --oneline &lt;origin/master&gt;..&lt;remote/master&gt; --left-right</span><br></pre></td></tr></table></figure><h5 id="谁，在什么时间，修改了文件的什么内容："><a href="#谁，在什么时间，修改了文件的什么内容：" class="headerlink" title="谁，在什么时间，修改了文件的什么内容："></a>谁，在什么时间，修改了文件的什么内容：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git blame &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="显示reflog："><a href="#显示reflog：" class="headerlink" title="显示reflog："></a>显示reflog：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog show</span><br></pre></td></tr></table></figure><h5 id="删除reflog："><a href="#删除reflog：" class="headerlink" title="删除reflog："></a>删除reflog：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog delete</span><br></pre></td></tr></table></figure><hr><h3 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h3><h5 id="列出所有的分支："><a href="#列出所有的分支：" class="headerlink" title="列出所有的分支："></a>列出所有的分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h5 id="列出所有的远端分支："><a href="#列出所有的远端分支：" class="headerlink" title="列出所有的远端分支："></a>列出所有的远端分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><h5 id="切换分支："><a href="#切换分支：" class="headerlink" title="切换分支："></a>切换分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="创建并切换到新分支"><a href="#创建并切换到新分支" class="headerlink" title="创建并切换到新分支:"></a>创建并切换到新分支:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="基于当前分支创建新分支："><a href="#基于当前分支创建新分支：" class="headerlink" title="基于当前分支创建新分支："></a>基于当前分支创建新分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure><h5 id="基于远程分支创建新的可追溯的分支："><a href="#基于远程分支创建新的可追溯的分支：" class="headerlink" title="基于远程分支创建新的可追溯的分支："></a>基于远程分支创建新的可追溯的分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt;</span><br></pre></td></tr></table></figure><h5 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支:"></a>删除本地分支:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="强制删除一个本地分支："><a href="#强制删除一个本地分支：" class="headerlink" title="强制删除一个本地分支："></a>强制删除一个本地分支：<br></h5><p><em><sub>将会丢失未合并的修改！</sub></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="给当前版本打标签："><a href="#给当前版本打标签：" class="headerlink" title="给当前版本打标签："></a>给当前版本打标签：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h5 id="给当前版本打标签并附加消息："><a href="#给当前版本打标签并附加消息：" class="headerlink" title="给当前版本打标签并附加消息："></a>给当前版本打标签并附加消息：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="更新与发布"><a href="#更新与发布" class="headerlink" title="更新与发布"></a>更新与发布</h3><h5 id="列出当前配置的远程端："><a href="#列出当前配置的远程端：" class="headerlink" title="列出当前配置的远程端："></a>列出当前配置的远程端：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h5 id="显示远程端的信息："><a href="#显示远程端的信息：" class="headerlink" title="显示远程端的信息："></a>显示远程端的信息：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure><h5 id="添加新的远程端："><a href="#添加新的远程端：" class="headerlink" title="添加新的远程端："></a>添加新的远程端：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h5 id="下载远程端版本，但不合并到HEAD中："><a href="#下载远程端版本，但不合并到HEAD中：" class="headerlink" title="下载远程端版本，但不合并到HEAD中："></a>下载远程端版本，但不合并到HEAD中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure><h5 id="下载远程端版本，并自动与HEAD版本合并："><a href="#下载远程端版本，并自动与HEAD版本合并：" class="headerlink" title="下载远程端版本，并自动与HEAD版本合并："></a>下载远程端版本，并自动与HEAD版本合并：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote pull &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h5 id="将远程端版本合并到本地版本中："><a href="#将远程端版本合并到本地版本中：" class="headerlink" title="将远程端版本合并到本地版本中："></a>将远程端版本合并到本地版本中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><h5 id="以rebase方式将远端分支与本地合并："><a href="#以rebase方式将远端分支与本地合并：" class="headerlink" title="以rebase方式将远端分支与本地合并："></a>以rebase方式将远端分支与本地合并：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="将本地版本发布到远程端："><a href="#将本地版本发布到远程端：" class="headerlink" title="将本地版本发布到远程端："></a>将本地版本发布到远程端：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push remote &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="删除远程端分支："><a href="#删除远程端分支：" class="headerlink" title="删除远程端分支："></a>删除远程端分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0)</span><br><span class="line">or</span><br><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0)</span><br></pre></td></tr></table></figure><h5 id="发布标签"><a href="#发布标签" class="headerlink" title="发布标签:"></a>发布标签:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --tags</span><br></pre></td></tr></table></figure><hr><h3 id="合并与重置-Rebase"><a href="#合并与重置-Rebase" class="headerlink" title="合并与重置(Rebase)"></a>合并与重置(Rebase)</h3><h5 id="将分支合并到当前HEAD中："><a href="#将分支合并到当前HEAD中：" class="headerlink" title="将分支合并到当前HEAD中："></a>将分支合并到当前HEAD中：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h5 id="将当前HEAD版本重置到分支中"><a href="#将当前HEAD版本重置到分支中" class="headerlink" title="将当前HEAD版本重置到分支中:"></a>将当前HEAD版本重置到分支中:</h5><p><em><sub>请勿重置已发布的提交!</sub></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure></p><h5 id="退出重置"><a href="#退出重置" class="headerlink" title="退出重置:"></a>退出重置:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --abort</span><br></pre></td></tr></table></figure><h5 id="解决冲突后继续重置："><a href="#解决冲突后继续重置：" class="headerlink" title="解决冲突后继续重置："></a>解决冲突后继续重置：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure><h5 id="使用配置好的merge-tool-解决冲突："><a href="#使用配置好的merge-tool-解决冲突：" class="headerlink" title="使用配置好的merge tool 解决冲突："></a>使用配置好的merge tool 解决冲突：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git mergetool</span><br></pre></td></tr></table></figure><h5 id="在编辑器中手动解决冲突后，标记文件为已解决冲突："><a href="#在编辑器中手动解决冲突后，标记文件为已解决冲突：" class="headerlink" title="在编辑器中手动解决冲突后，标记文件为已解决冲突："></a>在编辑器中手动解决冲突后，标记文件为<code>已解决冲突</code>：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure><h5 id="合并提交："><a href="#合并提交：" class="headerlink" title="合并提交："></a>合并提交：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i &lt;commit-just-before-first&gt;</span><br></pre></td></tr></table></figure><p>把上面的内容替换为下面的内容：</p><p>原内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line">pick &lt;commit_id2&gt;</span><br><span class="line">pick &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure></p><p>替换为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick &lt;commit_id&gt;</span><br><span class="line">squash &lt;commit_id2&gt;</span><br><span class="line">squash &lt;commit_id3&gt;</span><br></pre></td></tr></table></figure></p><hr><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><h5 id="放弃工作目录下的所有修改："><a href="#放弃工作目录下的所有修改：" class="headerlink" title="放弃工作目录下的所有修改："></a>放弃工作目录下的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD</span><br></pre></td></tr></table></figure><h5 id="移除缓存区的所有文件（i-e-撤销上次git-add）"><a href="#移除缓存区的所有文件（i-e-撤销上次git-add）" class="headerlink" title="移除缓存区的所有文件（i.e. 撤销上次git add）:"></a>移除缓存区的所有文件（i.e. 撤销上次<code>git add</code>）:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD</span><br></pre></td></tr></table></figure><h5 id="放弃某个文件的所有本地修改："><a href="#放弃某个文件的所有本地修改：" class="headerlink" title="放弃某个文件的所有本地修改："></a>放弃某个文件的所有本地修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h5 id="重置一个提交（通过创建一个截然不同的新提交）"><a href="#重置一个提交（通过创建一个截然不同的新提交）" class="headerlink" title="重置一个提交（通过创建一个截然不同的新提交）"></a>重置一个提交（通过创建一个截然不同的新提交）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："><a href="#将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：" class="headerlink" title="将HEAD重置到指定的版本，并抛弃该版本之后的所有修改："></a>将HEAD重置到指定的版本，并抛弃该版本之后的所有修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="用远端分支强制覆盖本地分支："><a href="#用远端分支强制覆盖本地分支：" class="headerlink" title="用远端分支强制覆盖本地分支："></a>用远端分支强制覆盖本地分支：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;remote/branch&gt; e.g., upstream/master, origin/my-feature</span><br></pre></td></tr></table></figure><h5 id="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："><a href="#将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改："></a>将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："><a href="#将HEAD重置到上一次提交的版本，并保留未提交的本地修改：" class="headerlink" title="将HEAD重置到上一次提交的版本，并保留未提交的本地修改："></a>将HEAD重置到上一次提交的版本，并保留未提交的本地修改：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --keep &lt;commit&gt;</span><br></pre></td></tr></table></figure><h5 id="删除添加-gitignore文件前错误提交的文件："><a href="#删除添加-gitignore文件前错误提交的文件：" class="headerlink" title="删除添加.gitignore文件前错误提交的文件："></a>删除添加<code>.gitignore</code>文件前错误提交的文件：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm -r --cached .</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;remove xyz file&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git-Flow"></a>Git-Flow</h2><h3 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h3><ul><li><a href="#安装">安装</a></li><li><a href="#开始">开始</a></li><li><a href="#特性">特性</a></li><li><a href="#做一个release版本">做一个release版本</a></li><li><a href="#紧急修复">紧急修复</a></li><li><a href="#commands">Commands</a></li></ul><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>你需要有一个可以工作的 git 作为前提。</li><li>Git flow 可以工作在 OSX, Linux 和 Windows之下</li></ul><h5 id="OSX-Homebrew"><a href="#OSX-Homebrew" class="headerlink" title="OSX Homebrew:"></a>OSX Homebrew:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install git-flow</span><br></pre></td></tr></table></figure><h5 id="OSX-Macports"><a href="#OSX-Macports" class="headerlink" title="OSX Macports:"></a>OSX Macports:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ port install git-flow</span><br></pre></td></tr></table></figure><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux:"></a>Linux:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install git-flow</span><br></pre></td></tr></table></figure><h5 id="Windows-Cygwin"><a href="#Windows-Cygwin" class="headerlink" title="Windows (Cygwin):"></a>Windows (Cygwin):</h5><p>安装 git-flow, 你需要 wget 和 util-linux。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -q -O - --no-check-certificate https://github.com/nvie/gitflow/raw/develop/contrib/gitflow-installer.sh | bash</span><br></pre></td></tr></table></figure><hr><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ul><li>为了自定义你的项目，Git flow 需要初始化过程。</li><li>使用 git-flow，从初始化一个现有的 git 库内开始。</li><li>初始化，你必须回答几个关于分支的命名约定的问题。建议使用默认值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow init</span><br></pre></td></tr></table></figure><hr><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>为即将发布的版本开发新功能特性。</li><li>这通常只存在开发者的库中。</li></ul><h5 id="创建一个新特性"><a href="#创建一个新特性" class="headerlink" title="创建一个新特性:"></a>创建一个新特性:</h5><p>下面操作创建了一个新的feature分支，并切换到该分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature start MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="完成新特性的开发"><a href="#完成新特性的开发" class="headerlink" title="完成新特性的开发:"></a>完成新特性的开发:</h5><p>完成开发新特性。这个动作执行下面的操作：</p><ol><li>合并 MYFEATURE 分支到 ‘develop’</li><li>删除这个新特性分支</li><li>切换回 ‘develop’ 分支</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature finish MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="发布新特性"><a href="#发布新特性" class="headerlink" title="发布新特性:"></a>发布新特性:</h5><p>你是否合作开发一项新特性？<br>发布新特性分支到远程服务器，所以，其它用户也可以使用这分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature publish MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="取得一个发布的新特性分支"><a href="#取得一个发布的新特性分支" class="headerlink" title="取得一个发布的新特性分支:"></a>取得一个发布的新特性分支:</h5><p>取得其它用户发布的新特性分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature pull origin MYFEATURE</span><br></pre></td></tr></table></figure><h5 id="追溯远端上的特性"><a href="#追溯远端上的特性" class="headerlink" title="追溯远端上的特性:"></a>追溯远端上的特性:</h5><p>通过下面命令追溯远端上的特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature track MYFEATURE</span><br></pre></td></tr></table></figure><hr><h3 id="做一个release版本"><a href="#做一个release版本" class="headerlink" title="做一个release版本"></a>做一个release版本</h3><ul><li>支持一个新的用于生产环境的发布版本。</li><li>允许修正小问题，并为发布版本准备元数据。</li></ul><h5 id="开始创建release版本"><a href="#开始创建release版本" class="headerlink" title="开始创建release版本:"></a>开始创建release版本:</h5><ul><li>开始创建release版本，使用 git flow release 命令。 </li><li>‘release’ 分支的创建基于 ‘develop’ 分支。 </li><li>你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支。</li><li>这个提交记录的 sha-1 hash 值必须是’develop’ 分支下的。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release start RELEASE [BASE]</span><br></pre></td></tr></table></figure><p>创建 release 分支之后立即发布允许其它用户向这个 release 分支提交内容是个明智的做法。命令十分类似发布新特性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release publish RELEASE</span><br></pre></td></tr></table></figure><p>(你可以通过<br><code>git flow release track RELEASE</code> 命令追溯远端的 release 版本)</p><h5 id="完成-release-版本"><a href="#完成-release-版本" class="headerlink" title="完成 release 版本:"></a>完成 release 版本:</h5><p>完成 release 版本是一个大 git 分支操作。它执行下面几个动作：</p><ol><li>归并 release 分支到 ‘master’ 分支。</li><li>用 release 分支名打 Tag</li><li>归并 release 分支到 ‘develop’</li><li>移除 release 分支。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow release finish RELEASE</span><br></pre></td></tr></table></figure><p>不要忘记使用<code>git push --tags</code>将tags推送到远端</p><hr><h3 id="紧急修复"><a href="#紧急修复" class="headerlink" title="紧急修复"></a>紧急修复</h3><p>紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p><h5 id="开始-git-flow-紧急修复"><a href="#开始-git-flow-紧急修复" class="headerlink" title="开始 git flow 紧急修复:"></a>开始 git flow 紧急修复:</h5><p>像其它 git flow 命令一样, 紧急修复分支开始自：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git flow hotfix start VERSION [BASENAME]</span><br></pre></td></tr></table></figure><p>VERSION 参数标记着修正版本。你可以从 <code>[BASENAME]开始，</code>[BASENAME]`为finish release时填写的版本号</p><h5 id="完成紧急修复"><a href="#完成紧急修复" class="headerlink" title="完成紧急修复:"></a>完成紧急修复:</h5><p>当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow hotfix finish VERSION</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git Cheat Sheet 中文版&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="git" scheme="http://tokyle.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式入门</title>
    <link href="http://tokyle.com/2019/07/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://tokyle.com/2019/07/30/正则表达式入门/</id>
    <published>2019-07-30T08:39:20.000Z</published>
    <updated>2019-07-30T08:41:11.186Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式入门</p><p>一个个的捡起因为懒放一边的</p><a id="more"></a><h3 id="几个元字符（metecharacter）"><a href="#几个元字符（metecharacter）" class="headerlink" title="几个元字符（metecharacter）"></a>几个元字符（metecharacter）</h3><table><thead><tr><th>语法</th><th>说明</th><th>示例</th><th>示例解释</th></tr></thead><tbody><tr><td>\b</td><td>单词的开头或结尾</td><td>\breg\b</td><td>精确查找reg这个单词</td></tr><tr><td>.</td><td>匹配除换行符以外任意字符</td><td></td><td></td></tr><tr><td>*</td><td>前面内容可以连续重复使用任意次</td><td>.*</td><td>任意数量的不包含换行的字符</td></tr><tr><td>\d</td><td>匹配一位数字（0或1或2…）</td><td>0\d{2}</td><td>0开头，连续重复匹配两次数字，如010</td></tr><tr><td>\s</td><td>匹配任意空白符，包括空格，tab，换行等</td><td></td><td></td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字等</td><td>\ba\w{6}\b</td><td>匹配以a开头的7个字符的单词</td></tr><tr><td>^</td><td>匹配字符串开头</td><td></td><td></td></tr><tr><td>$</td><td>匹配字符串结尾</td><td>^\b{5,12}$</td><td>匹配5到12位数字（QQ号）</td></tr></tbody></table><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>要匹配<code>.</code>，<code>\</code>，<code>*</code>这样本身，需要加转义<code>\</code><br>例如：<code>C:\\Windows</code>匹配<code>C:\Windows</code></p><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>？</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>想要匹配没有预定义元字符的字符集，只需要在方括号中列出即可，例如</p><ul><li>匹配任何一个英文元音字母： <code>[aeiou]</code></li><li>匹配标点符号： <code>[.?!]</code>（匹配.或?或！）</li><li>匹配一位数字：<code>[0-9]</code>(与<code>\d</code>含义一致)</li><li>匹配字母或数字：<code>[a-z0-9A-Z]</code>(英文下等同于<code>\w</code>)</li></ul><p>示例：<code>\(0\d{2}\)\s\d{4}\s\d{4}|\(0\d{2,3}\)\s\d{7,8}</code><br>匹配结果：</p><table><thead><tr><th>结果</th></tr></thead><tbody><tr><td>(010) 6554 6016</td></tr><tr><td>(010) 6825451</td></tr><tr><td>(0511) 87283179</td></tr><tr><td>(0512) 7708732</td></tr></tbody></table><p>然后对应IP地址的匹配，这个用正则怎么有点长啊。。。可能是我太菜了。。：<br>原来以为IP格式是：<code>1~255.0~255.0~255.0~255</code>，所以写成了这样<br><code>(\b[1-9]\d{0,1}\b|\b1\d{2}\b|\b2[0-4]\d\b|\b25[0-5]\b)(\.(\b[1-9]?\d\b|\b1\d{2}\b|\b2[0-4]\d\b|\b25[0-5]\b)){3}</code></p><p>然后翻了下格式，有<code>0.0.0.0</code>这个IP（本身）,所以改成了<br><code>((\b[1-9]?\d\b|\b1\d{2}\b|\b2[0-4]\d\b|\b25[0-5]\b)\.){3}(\b[1-9]?\d\b|\b1\d{2}\b|\b2[0-4]\d\b|\b25[0-5]\b)</code></p><p>然后又看到IP中可以有<code>01.02.03.04</code>这样的存在，前导0的意思（leading zeroes），又改成了这样：<br><code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)</code> (参考自教程)</p><h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><p>匹配不属于某个字符类的字符，例如匹配非数字字符</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou以外的任意字符</td></tr></tbody></table><h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><p>贪婪匹配：匹配尽可能多的字符<br>懒惰匹配：匹配尽可能少的字符</p><p>例如有个字符串：<code>aabbabaaab</code><br>贪婪匹配：<code>a.*b</code>，匹配结果为：<code>aabbabaaab</code><br>懒惰匹配：<code>a.*?b</code>，匹配结果为：<code>aab</code>、<code>ab</code>、<code>aaab</code></p><p>懒惰限定符：</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，单尽可能少重复</td></tr><tr><td>+?</td><td>重复一次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><h3 id="一些其他语法"><a href="#一些其他语法" class="headerlink" title="一些其他语法"></a>一些其他语法</h3><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>\a</td><td>报警字符（打印它的效果是电脑嘀的一声）</td></tr><tr><td>\b</td><td>通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td>\t</td><td>制表符，Tab</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\v</td><td>竖向制表符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\e</td><td>Escape</td></tr><tr><td>\0nn</td><td>ASCII码中八进制代码为00的字符</td></tr><tr><td>\xnn</td><td>ASCII码中十六进制代码为nn的字符</td></tr><tr><td>\unnnn</td><td>Unicode码中十六进制代码为nnnn的字符</td></tr><tr><td>\A</td><td>字符类开头（类似^，但不受处理多行选项的影响）</td></tr><tr><td>\z</td><td>字符类结尾（类似$，但不受处理多行选项的影响）</td></tr><tr><td>\Z</td><td>字符串结尾或行尾，不受处理多行选项的影响</td></tr><tr><td>\G</td><td>当前搜索的开头</td></tr></tbody></table><p>以上只能说是记录的正则的一部分，教程说是30分钟，看了我三个小时都不止。。</p><blockquote><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">完整教程地址</a></p></blockquote><p>再次感谢deerchao的正则教程！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式入门&lt;/p&gt;
&lt;p&gt;一个个的捡起因为懒放一边的&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="regex" scheme="http://tokyle.com/tags/regex/"/>
    
  </entry>
  
  <entry>
    <title>Macaca试用</title>
    <link href="http://tokyle.com/2019/07/25/Macaca%E8%AF%95%E7%94%A8/"/>
    <id>http://tokyle.com/2019/07/25/Macaca试用/</id>
    <published>2019-07-25T07:39:12.000Z</published>
    <updated>2019-07-25T07:40:24.397Z</updated>
    
    <content type="html"><![CDATA[<p>Macaca试用</p><p>app inspector及UI Recorder<br><a id="more"></a></p><h3 id="Macaca-App-Inspector"><a href="#Macaca-App-Inspector" class="headerlink" title="Macaca App Inspector"></a>Macaca App Inspector</h3><p>首先是元素定位工具，类似<code>uiautomatorviewer.bat</code></p><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i app-inspector -g</span><br></pre></td></tr></table></figure></p><p>备注：<br>起Macaca server：<code>macaca server -p 3456 --verbose</code>（指定端口，打印详细日志）</p><p>使用：<br>首先获取设备id:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">DVD5T18622001756        device</span><br></pre></td></tr></table></figure></p><p>然后起:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">F:\downloads\chrome\移动devops &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; app-inspector -u DVD5T18622001756</span><br><span class="line">&gt;&gt; UIAutomatorWD http server ready</span><br><span class="line">&gt;&gt; Android device started: DVD5T18622001756</span><br><span class="line">&gt;&gt; inspector start at: http://192.168.78.1:5678</span><br><span class="line">  &lt;-- GET /</span><br></pre></td></tr></table></figure></p><p>然后浏览器就打开个页面，是手机当前界面，开始玩吧。。</p><h3 id="Macaca-UIRecorder"><a href="#Macaca-UIRecorder" class="headerlink" title="Macaca UIRecorder"></a>Macaca UIRecorder</h3><p>录制工具</p><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install uirecorder -g</span><br></pre></td></tr></table></figure></p><p>1.创建新目录并进入，初始化UIRecorder工程目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">E:\Macaca_workstation\uisample &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; uirecorder init</span><br><span class="line">    __  ______   ____                           __</span><br><span class="line">   / / / /  _/  / __ \___  _________  _________/ /__  _____</span><br><span class="line">  / / / // /   / /_/ / _ \/ ___/ __ \/ ___/ __  / _ \/ ___/</span><br><span class="line"> / /_/ // /   / _, _/  __/ /__/ /_/ / /  / /_/ /  __/ /</span><br><span class="line"> \____/___/  /_/ |_|\___/\___/\____/_/   \__,_/\___/_/    v3.1.0</span><br><span class="line">Official Site: http://uirecorder.com</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">? Path扩展属性配置,除id,name,class之外 data-id,data-name,type,data-type,role,data-role,data-value</span><br><span class="line">? 属性值黑名单正则</span><br><span class="line">? class值黑名单正则</span><br><span class="line">? 断言前隐藏</span><br><span class="line">? WebDriver域名或IP 127.0.0.1</span><br><span class="line">? WebDriver端口号 4444</span><br><span class="line">? 需要同时测试的浏览器列表 chrome, ie 11</span><br><span class="line"></span><br><span class="line">config.json 文件保存成功</span><br><span class="line">package.json 文件创建成功</span><br><span class="line">README.md 文件创建成功</span><br><span class="line">screenshots 文件夹创建成功</span><br><span class="line">commons 文件夹创建成功</span><br><span class="line">uploadfiles 文件夹创建成功</span><br><span class="line">.editorconfig 文件创建成功</span><br><span class="line">.gitignore 文件创建成功</span><br><span class="line">install.sh 文件创建成功</span><br><span class="line">run.bat 文件创建成功</span><br><span class="line">run.sh 文件创建成功</span><br><span class="line">hosts 文件创建成功</span><br><span class="line">.vscode/launch.json 文件创建成功</span><br><span class="line"></span><br><span class="line">Start install project dependencies...</span><br></pre></td></tr></table></figure></p><p>各字段解释，copy自官方教程</p><blockquote><p><a href="https://github.com/alibaba/uirecorder/blob/master/doc/zh-cn/pc-standard.md" target="_blank" rel="noopener">官方教程</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">创建新目录并进入，然后初始化UIRecorder工程目录：uirecorder init， 根据具体情况输入相关的参数，几个回车后，我们的准备工作就结束了，这里详细介绍下几个参数分别是什么作用</span><br><span class="line"></span><br><span class="line">Path扩展属性配置,除id,name,class之外: 此参数，用来定义网页DOM中哪些属性可以用来定位我们的控件，默认值已经包括了主流的属性，一般情况下不需要修改</span><br><span class="line"></span><br><span class="line">属性值黑名单正则：网页中当某些属性值是随机或者不稳定的时候，我们可以通过这个配置来忽略那些属性值，从而保证我们的自动化脚本稳定性，例如我们可以这样配置：/attr_name_\d+/，如果需要配置多个属性，可以这么写：/attr1_\d+|attr2_\d+|/，详细更多的正则教程请自行搜索</span><br><span class="line"></span><br><span class="line">class值黑名单正则：某些场景下，class属性的值会干扰自动化录制，比如当鼠标移到某个控件上时会动态的添加一个class样式名称，就可能会被录制到PATH中，从而导致自动化无法稳定重放。此时就可以将那个class名称加到黑名单中，例如:/class_name/，详细值的配置请参考属性值黑名单</span><br><span class="line"></span><br><span class="line">断言前隐藏：某些业务场景下，会在最上层显示一层透明的div，用来实现一些高级的富应用需求，会导致无法直接断言透明div下方的控件。此种场景下，可以将透明div的PATH配置在此属性中，即可实现在断言时自动移除透明的div，断言后再自动恢复</span><br><span class="line"></span><br><span class="line">WebDriver域名或IP：WebDriver执行机的IP地址，默认是指向本地，如果有部署grid执行机集群，可以指向对应的执行机集群IP</span><br><span class="line"></span><br><span class="line">WebDriver端口号：WebDriver端口号，一般情况下是4444端口号，不需要修改</span><br><span class="line"></span><br><span class="line">需要同时测试的浏览器列表： 需要同时测试的浏览器列表，例如：chrome, firefox, ie 11，可以根据本地或远程执行机集群所支持的浏览器类型自行输入</span><br></pre></td></tr></table></figure><h4 id="Start-install-project-dependencies"><a href="#Start-install-project-dependencies" class="headerlink" title="Start install project dependencies"></a>Start install project dependencies</h4><p>然后就看到卡在这边不动了。。。上github翻半天找到了原因，当前环境装的node版本过高，uirecorder使用的node版本是<code>7.10.0</code>，解决办法就是装个<code>nvm</code>，切node版本</p><blockquote><p><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm下载</a></p></blockquote><p>安装之前，卸载原来的node<br>安装完成，验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">E:\ &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; NVM</span><br><span class="line"></span><br><span class="line">Running version 1.1.7.</span><br></pre></td></tr></table></figure></p><p>然后使用nvm来安装node<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 7.10.0</span><br></pre></td></tr></table></figure></p><p>多版本控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm install 4.4.0</span><br><span class="line"></span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line">nvm use 7.10.0</span><br></pre></td></tr></table></figure></p><p>当然，因为卸载了原来装的node，所以这么干的话，要重新配置node环境变量，N多东西要重弄，垃圾，反正我不用录制功能，不折腾了！<br>（直接只装7.10.0的话，用macaca doctor会提示版本低，坑真多）</p><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Macaca试用&lt;/p&gt;
&lt;p&gt;app inspector及UI Recorder&lt;br&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Macaca" scheme="http://tokyle.com/tags/Macaca/"/>
    
  </entry>
  
  <entry>
    <title>win10搭建Macaca环境及简单试用</title>
    <link href="http://tokyle.com/2019/07/25/win10%E6%90%AD%E5%BB%BAMacaca%E7%8E%AF%E5%A2%83%E5%8F%8A%E7%AE%80%E5%8D%95%E8%AF%95%E7%94%A8/"/>
    <id>http://tokyle.com/2019/07/25/win10搭建Macaca环境及简单试用/</id>
    <published>2019-07-25T04:06:17.000Z</published>
    <updated>2019-07-25T07:30:29.893Z</updated>
    
    <content type="html"><![CDATA[<p>win10搭建Macaca环境及简单试用</p><a id="more"></a><p>各组件版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OS: win 10</span><br><span class="line">java: 1.8.0_91</span><br><span class="line">node：10.16.0</span><br><span class="line">npm：6.9.0</span><br><span class="line">Gradle：5.5.1</span><br><span class="line">SDK Tools：25.2.5</span><br><span class="line">SDK Platform-tools：29.0.1</span><br><span class="line">SDK Build-tools：25.0.2</span><br></pre></td></tr></table></figure></p><p>jdk和android环境配置就不说了，jdk用1.8的<br>android： </p><blockquote><p><a href="http://tools.android-studio.org/index.php/sdk" target="_blank" rel="noopener">下载地址</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_HOME: D:\Android\android-sdk-windows</span><br><span class="line">Path: ;%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\build-tools;</span><br></pre></td></tr></table></figure><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>安装稳定版</p><blockquote><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载地址</a></p></blockquote><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; node -v</span><br><span class="line">v10.16.0</span><br><span class="line"></span><br><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; npm -v</span><br><span class="line">6.9.0</span><br></pre></td></tr></table></figure></p><p>设置cache路径，node安装路径下，新建<code>node-global</code>和<code>node-cache</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; npm config set prefix &quot;D:\dev\js\node-global&quot;</span><br><span class="line"></span><br><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; npm config set cache &quot;D:\dev\js\node-cache&quot;</span><br></pre></td></tr></table></figure></p><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; npm config get prefix</span><br><span class="line">D:\dev\js\node-global</span><br><span class="line"></span><br><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; npm config get cache</span><br><span class="line">D:\dev\js\node-cache</span><br></pre></td></tr></table></figure></p><p>虽然安装时候设置了node环境变量，还是建议将<code>D:\dev\js\node-global</code>配置到path里面，防止后面用<code>cnpm</code>时候报错</p><p>设置淘宝源：<code>npm config set registry http://registry.npm.taobao.org</code></p><p>升级npm：<code>npm install npm@latest -g</code>（可指定具体版本号）</p><h3 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h3><blockquote><p><a href="https://gradle.org/releases/" target="_blank" rel="noopener">下载地址</a></p></blockquote><p>配置环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRADLE_HOME: D:\QA\gradle-5.5.1</span><br><span class="line">CLASSPATH: %GRADLE_HOME%\lib</span><br><span class="line">Path: %GRADLE_HOME%\bin;</span><br></pre></td></tr></table></figure></p><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; gradle -v</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 5.5.1</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Build time:   2019-07-10 20:38:12 UTC</span><br><span class="line">Revision:     3245f748c7061472da4dc184991919810f7935a5</span><br><span class="line"></span><br><span class="line">Kotlin:       1.3.31</span><br><span class="line">Groovy:       2.5.4</span><br><span class="line">Ant:          Apache Ant(TM) version 1.9.14 compiled on March 12 2019</span><br><span class="line">JVM:          1.8.0_91 (Oracle Corporation 25.91-b14)</span><br><span class="line">OS:           Windows 10 10.0 amd64</span><br></pre></td></tr></table></figure></p><h3 id="安装Macaca"><a href="#安装Macaca" class="headerlink" title="安装Macaca"></a>安装Macaca</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g macaca-cli</span><br></pre></td></tr></table></figure><p>检查：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; macaca doctor</span><br><span class="line"></span><br><span class="line">  macaca-doctor version: 2.0.18</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Node.js checklist:</span><br><span class="line"></span><br><span class="line">  node env: D:\dev\js\node.exe</span><br><span class="line">  node version: v10.16.0</span><br><span class="line"></span><br><span class="line">  Android checklist:</span><br><span class="line"></span><br><span class="line">  JAVA version is `1.8`</span><br><span class="line">  JAVA_HOME is set to `D:\dev\java\jdk1.8.0_91`</span><br><span class="line">  ANDROID_HOME is set to `D:\dev\android\android-sdk-windows`</span><br><span class="line">  Platforms is set to `D:\dev\android\android-sdk-windows\platforms\android-28`</span><br><span class="line">  ADB tool is set to `D:\dev\android\android-sdk-windows\platform-tools\adb.exe`</span><br><span class="line">  GRADLE_HOME is set to `D:\QA\gradle-5.5.1`</span><br><span class="line"></span><br><span class="line">  Installed driver list:</span><br></pre></td></tr></table></figure></p><p>环境配置完成。。。</p><h4 id="Not-accepted-Android-SDK-license-agreements"><a href="#Not-accepted-Android-SDK-license-agreements" class="headerlink" title="Not accepted Android SDK license agreements"></a>Not accepted Android SDK license agreements</h4><p>macaca doctor出现  “Not accepted Android SDK license agreements”（win 10）</p><p>terminal进入SDK/tools/bin目录（我的路径：D:\dev\android\android-sdk-windows\tools\bin），有个<code>sdkmanager.bat</code>,执行<code>sdkmanager.bat --update</code>，系统会让你确认，按<code>y</code>就行，然后在<code>D:\dev\android\android-sdk-windows\licenses</code>下就会生成licenses，继续执行<code>macaca doctor</code>就不会出现那个红字</p><h4 id="安装驱动："><a href="#安装驱动：" class="headerlink" title="安装驱动："></a>安装驱动：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i macaca-android -g</span><br></pre></td></tr></table></figure><p>嗯，报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; version: 2.33</span><br><span class="line">&gt;&gt; chromedriver cdn url: https://chromedriver.storage.googleapis.com/2.33/chromedriver_win32.zip</span><br><span class="line">internal/streams/legacy.js:57</span><br><span class="line">      throw er; // Unhandled stream error in pipe.</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line">Error: read ECONNRESET</span><br><span class="line">    at TLSWrap.onStreamRead (internal/stream_base_commons.js:111:27)</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! macaca-chromedriver@1.0.45 install: `node ./bin/macaca-chromedriver install`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the macaca-chromedriver@1.0.45 install script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     D:\dev\js\node-cache\_logs\2019-07-25T00_47_29_733Z-debug.log</span><br></pre></td></tr></table></figure></p><p>网上找了方法，换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i macaca-android -g</span><br></pre></td></tr></table></figure></p><p>然后，<strong>‘cnpm’ 不是内部或外部命令，也不是可运行的程序</strong>。。。再装cnpm：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>装完验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">E:\Macaca_workstation\run1 &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; cnpm -v</span><br><span class="line">cnpm@6.1.0 (D:\dev\js\node-global\node_modules\cnpm\lib\parse_argv.js)</span><br><span class="line">npm@6.10.2 (D:\dev\js\node-global\node_modules\cnpm\node_modules\npm\lib\npm.js)</span><br><span class="line">node@10.16.0 (D:\dev\js\node.exe)</span><br><span class="line">npminstall@3.22.1 (D:\dev\js\node-global\node_modules\cnpm\node_modules\npminstall\lib\index.js)</span><br><span class="line">prefix=D:\dev\js\node-global</span><br><span class="line">win32 x64 10.0.17134</span><br><span class="line">registry=https://r.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>可以顺便macaca都这么装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm i -g macaca-cli</span><br></pre></td></tr></table></figure><p>再装驱动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm i macaca-android -g</span><br><span class="line"></span><br><span class="line">cnpm i macaca-electron -g</span><br><span class="line"></span><br><span class="line">cnpm i app-inspector -g</span><br></pre></td></tr></table></figure></p><h3 id="Macaca-sample-python"><a href="#Macaca-sample-python" class="headerlink" title="Macaca sample-python"></a>Macaca sample-python</h3><p>由于只认识python，老老实实的试python的sample吧，先去官方示例库下例子：</p><blockquote><p><a href="https://github.com/macaca-sample" target="_blank" rel="noopener">macaca-sample</a></p></blockquote><p>下载下来之后，windows terminal进到目录里面，pip安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 路径</span><br><span class="line">E:\Macaca_workstation\sample-python &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; pwd</span><br><span class="line">E:\Macaca_workstation\sample-python</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">E:\Macaca_workstation\sample-python &#123;git&#125;</span><br><span class="line">&#123;lamb&#125; pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p><p>测试脚本稍微改了下，基本还是示例脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/7/25 11:13</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">#coding:utf-8</span><br><span class="line"></span><br><span class="line">import unittest</span><br><span class="line">import time</span><br><span class="line">from macaca import WebDriver</span><br><span class="line">from retrying import retry</span><br><span class="line"></span><br><span class="line">desired_caps = &#123;</span><br><span class="line">    &apos;platformName&apos;: &apos;android&apos;,</span><br><span class="line">    &apos;app&apos;: &apos;F:/downloads/chrome/Macaca/android_app_bootstrap-debug.apk&apos;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server_url = &#123;</span><br><span class="line">    &apos;hostname&apos;: &apos;localhost&apos;,</span><br><span class="line">    &apos;port&apos;: 3456</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def switch_to_webview(driver):</span><br><span class="line">    contexts = driver.contexts</span><br><span class="line">    driver.context = contexts[-1]</span><br><span class="line">    return driver</span><br><span class="line"></span><br><span class="line">def switch_to_native(driver):</span><br><span class="line">    contexts = driver.contexts</span><br><span class="line">    driver.context = contexts[0]</span><br><span class="line">    return driver</span><br><span class="line"></span><br><span class="line">class MacacaTest(unittest.TestCase):</span><br><span class="line">    @classmethod</span><br><span class="line">    def setUpClass(cls):</span><br><span class="line">        cls.driver = WebDriver(desired_caps, server_url)</span><br><span class="line">        cls.initDriver()</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def tearDownClass(cls):</span><br><span class="line">        cls.driver.quit()</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    @retry</span><br><span class="line">    def initDriver(cls):</span><br><span class="line">        print(&quot;Retry connecting server...&quot;)</span><br><span class="line">        cls.driver.init()</span><br><span class="line"></span><br><span class="line">    def test_01_login(self):</span><br><span class="line">        el = self.driver \</span><br><span class="line">            .elements_by_class_name(&apos;android.widget.EditText&apos;)[0] \</span><br><span class="line">            .send_keys(&apos;中文+Test+12345678&apos;)   \</span><br><span class="line"></span><br><span class="line">        el = self.driver \</span><br><span class="line">            .elements_by_class_name(&apos;android.widget.EditText&apos;)[1] \</span><br><span class="line">            .send_keys(&apos;111111&apos;)</span><br><span class="line"></span><br><span class="line">        time.sleep(1)</span><br><span class="line">        # self.driver.keys(Keys.ENTER.value + Keys.ESCAPE.value)</span><br><span class="line"></span><br><span class="line">        self.driver \</span><br><span class="line">            .element_by_name(&apos;Login&apos;) \</span><br><span class="line">            .click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure></p><p>顺便为了省事，直接把示例app先下载下来了：</p><blockquote><p><a href="https://npmcdn.com/android-app-bootstrap@latest/android_app_bootstrap/build/outputs/apk/android_app_bootstrap-debug.apk" target="_blank" rel="noopener">android_app_bootstrap-debug.apk</a></p></blockquote><ol><li>启server：<code>macaca server -p 3456 --verbose</code>  （指定端口，打印详细日志）</li><li>执行测试脚本</li></ol><p>查看结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Testing started at 11:20 ...</span><br><span class="line">D:\dev\python\python.exe &quot;D:\dev\pycharm\PyCharm Community Edition 2018.3.4\helpers\pycharm\_jb_pytest_runner.py&quot; --path E:/Macaca_workstation/sample-python/test_run1.py</span><br><span class="line">Launching pytest with arguments E:/Macaca_workstation/sample-python/test_run1.py in E:\Macaca_workstation\sample-python</span><br><span class="line"></span><br><span class="line">============================= test session starts =============================</span><br><span class="line">platform win32 -- Python 3.6.6, pytest-4.6.3, py-1.8.0, pluggy-0.12.0</span><br><span class="line">rootdir: E:\Macaca_workstation\sample-python</span><br><span class="line">plugins: allure-pytest-2.6.5, forked-1.0.2, html-1.21.0, metadata-1.8.0, rerunfailures-7.0, xdist-1.29.0collected 1 item</span><br><span class="line"></span><br><span class="line">test_run1.py                                                            [100%]</span><br><span class="line"></span><br><span class="line">========================== 1 passed in 24.38 seconds ==========================Retry connecting server...</span><br><span class="line">.</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>试验结束。实话实说，国内的开源生态是真的一言难尽。。。这个环境加跑通结果，折腾了大半天，太多坑了，官方的教程真的无力吐槽。记录下搭建过程，有兴趣试这个的，少踩点坑。。。</p><p>浏览器也试了下，最简版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/7/25 10:42</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">from macaca import WebDriver,WebElement</span><br><span class="line"></span><br><span class="line"># 因为挂着梯子，顺便设置个代理</span><br><span class="line">os.environ[&apos;https_proxy&apos;] = &apos;https://127.0.0.1:1080&apos;</span><br><span class="line">os.environ[&apos;http_proxy&apos;] = &apos;http://127.0.0.1:1080&apos;</span><br><span class="line">desired_caps = &#123;</span><br><span class="line">    &apos;autoAcceptAlerts&apos; : True,</span><br><span class="line">    &apos;browserName&apos; : &apos;electron&apos;,</span><br><span class="line">    &apos;platformName&apos; : &apos;desktop&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">driver = WebDriver(desired_caps)</span><br><span class="line"></span><br><span class="line">driver.init()</span><br><span class="line">driver.set_window_size(1280, 800)</span><br><span class="line">driver.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">driver.element_by_id(&quot;kw&quot;).send_keys(&apos;macaca&apos;)</span><br><span class="line">driver.element_by_id(&quot;su&quot;).click()</span><br><span class="line">time.sleep(5)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;win10搭建Macaca环境及简单试用&lt;/p&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Macaca" scheme="http://tokyle.com/tags/Macaca/"/>
    
  </entry>
  
  <entry>
    <title>python操作excel一些实现</title>
    <link href="http://tokyle.com/2019/07/18/python%E6%93%8D%E4%BD%9Cexcel%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://tokyle.com/2019/07/18/python操作excel一些实现/</id>
    <published>2019-07-18T08:13:40.000Z</published>
    <updated>2019-07-23T06:54:08.662Z</updated>
    
    <content type="html"><![CDATA[<p>python操作excel一些实现</p><a id="more"></a><p>抽了点时间，把python使用openpyxl操作excel的一些实现封装了下，后面有需求直接用吧</p><p><strong>numpytest.openexcel.py</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/7/18 13:17</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import openpyxl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def load_excel(filename):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    加载excel</span><br><span class="line">    :param filename:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 加载execl文件</span><br><span class="line">    wb = openpyxl.load_workbook(filename)</span><br><span class="line">    return wb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_excel(filename, sheetname):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取excel行、列数</span><br><span class="line">    :param filename: 待读取文件名</span><br><span class="line">    :param sheetname: 列名</span><br><span class="line">    :return: 行、列数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    wb = load_excel(filename)</span><br><span class="line">    # 指定读取sheet页</span><br><span class="line">    sheet = wb[sheetname]</span><br><span class="line">    # 获取最大行数</span><br><span class="line">    nrows = sheet.max_row</span><br><span class="line">    ncols = sheet.max_column</span><br><span class="line">    return nrows, ncols</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_excels(filename, sheetname):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    读取excel所有数据</span><br><span class="line">    :param filename: 待读取文件</span><br><span class="line">    :param sheetname: 带读取sheet页</span><br><span class="line">    :return: 数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 获取指定sheet页</span><br><span class="line">    wb = load_excel(filename)</span><br><span class="line">    sheet = wb[sheetname]</span><br><span class="line">    # 获取最大行、列数</span><br><span class="line">    nrow = get_excel(filename, sheetname)[0]</span><br><span class="line">    ncol = get_excel(filename, sheetname)[1]</span><br><span class="line">    # 读取数据</span><br><span class="line">    testdata = []</span><br><span class="line">    for i in list(range(1, nrow+1)):</span><br><span class="line">        tmplist = []</span><br><span class="line">        for j in list(range(1, ncol+1)):</span><br><span class="line">            tmplist.append(sheet.cell(row=i, column=j).value)</span><br><span class="line">        testdata.append(tmplist)</span><br><span class="line">    return testdata</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def read_excel(filename, sheetname, col):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    读取excel指定列，返回数据列表</span><br><span class="line">    :param filename: 带读取excel文件</span><br><span class="line">    :return: 列数据</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 获取指定sheet页</span><br><span class="line">    wb = load_excel(filename)</span><br><span class="line">    sheet = wb[sheetname]</span><br><span class="line">    # 获取最大行数</span><br><span class="line">    nrows = get_excel(filename, sheetname)[0]</span><br><span class="line">    # 获取数据</span><br><span class="line">    testdata = []</span><br><span class="line">    for i in list(range(2, nrows+1)):</span><br><span class="line">        testdata.append(sheet.cell(row=i, column=col).value)</span><br><span class="line">    return testdata</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_excel(filename, sheetname, colname, col, testdata):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    已知数据集，写数据到指定列</span><br><span class="line">    :param filename: 待写数据文件</span><br><span class="line">    :param sheetname: 待写数据页签</span><br><span class="line">    :param colname: 待写数据列名</span><br><span class="line">    :param col: 待写数据列</span><br><span class="line">    :param testdata: 待写数据集（列表格式）</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 激活写页签</span><br><span class="line">    wb = load_excel(filename)</span><br><span class="line">    sheet = wb[sheetname]</span><br><span class="line"></span><br><span class="line">    # 写入列标题</span><br><span class="line">    sheet.cell(row=1, column=col, value=str(colname))</span><br><span class="line">    # 写入数据</span><br><span class="line">    # 写数据</span><br><span class="line">    for i in range(2, len(testdata) + 1):</span><br><span class="line">        sheet.cell(row=i, column=col, value=str(testdata[i-2]))</span><br><span class="line">    # 写入缺失的最后一行数据</span><br><span class="line">    max_row = len(testdata) + 1</span><br><span class="line">    sheet.cell(row=max_row, column=col, value=str(testdata[-1]))</span><br><span class="line">    # 保存文件</span><br><span class="line">    wb.save(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_col(filename, wfilename, sheetname, wsheetname, colname, col, colnumber):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    先读取，再写数据到指定列</span><br><span class="line">    :param filename: 数据读取文件</span><br><span class="line">    :param wfilename: 待写数据文件</span><br><span class="line">    :param sheetname:  读取数据页签</span><br><span class="line">    :param wsheetname:  待写数据页签</span><br><span class="line">    :param colname: 写数据列名</span><br><span class="line">    :param col: 读数据列序号</span><br><span class="line">    :param colnumber:  写数据列序号</span><br><span class="line">    :return: None</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 激活写页签</span><br><span class="line">    wb = load_excel(wfilename)</span><br><span class="line">    sheet = wb[wsheetname]</span><br><span class="line"></span><br><span class="line">    # 写入列标题</span><br><span class="line">    sheet.cell(row=1, column=colnumber, value=str(colname))</span><br><span class="line">    # 写入数据</span><br><span class="line">    # 读取待写数据</span><br><span class="line">    testdata = read_excel(filename, sheetname, col)</span><br><span class="line">    # 写数据</span><br><span class="line">    for i in range(2, len(testdata)+1):</span><br><span class="line">        sheet.cell(row=i, column=colnumber, value=str(testdata[i-2]))</span><br><span class="line">    # 写入缺失的最后一行数据</span><br><span class="line">    max_row = len(testdata) + 1</span><br><span class="line">    sheet.cell(row=max_row, column=colnumber, value=str(testdata[-1]))</span><br><span class="line">    # 保存文件</span><br><span class="line">    wb.save(filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def write_data(filename, wfilename, sheetname, wsheetname, nrow, ncol):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    写所有数据</span><br><span class="line">    :param filename: 读取文件</span><br><span class="line">    :param wfilename: 待写入文件</span><br><span class="line">    :param sheetname: 读数据页签</span><br><span class="line">    :param wsheetname: 待写数据页签</span><br><span class="line">    :param nrow: 写数据行数</span><br><span class="line">    :param ncol: 写数据列数</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 激活写页签</span><br><span class="line">    wb = load_excel(wfilename)</span><br><span class="line">    sheet = wb[wsheetname]</span><br><span class="line"></span><br><span class="line">    # 待写数据</span><br><span class="line">    testdata = read_excels(filename, sheetname)</span><br><span class="line"></span><br><span class="line">    # 写数据</span><br><span class="line">    for i in range(0, nrow):</span><br><span class="line">        for j in range(0, ncol):</span><br><span class="line">            sheet.cell(row=i+1, column=j+1, value=str(testdata[i][j]))</span><br><span class="line">    wb.save(filename)</span><br></pre></td></tr></table></figure><p>然后写了个DES加密的client，以后加密直接从excel一列读数据，再写到下一列即可：<br><strong>desclient</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/7/18 15:22</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import binascii</span><br><span class="line">from numpytest import openexcel</span><br><span class="line">from pyDes import des, ECB, PAD_PKCS5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 获取待加密数据列</span><br><span class="line">filename = &apos;E:/DESFile/loginname.xlsx&apos;</span><br><span class="line">sheet = &apos;Sheet1&apos;</span><br><span class="line">colnumber = 1</span><br><span class="line">loginname = openexcel.read_excel(filename, sheet, colnumber)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># DES加密方法</span><br><span class="line">def des_en(msg):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    DES 加密，分组方式 ECB，填充方式 PAD_PKCS5</span><br><span class="line">    :param msg: msg待加密字符串</span><br><span class="line">    :return: 返回加密后字符串,16进制，utf-8格式化，输出结果去除b和\n</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    secret_key = &apos;SKUHWKLL&apos;</span><br><span class="line">    iv =secret_key</span><br><span class="line">    key = des(secret_key, ECB, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    entrymsg = key.encrypt(msg, padmode=PAD_PKCS5)</span><br><span class="line">    desstr = binascii.b2a_base64(entrymsg)</span><br><span class="line">    # return str(desstr, &apos;utf8&apos;)</span><br><span class="line">    # 去除写入excel可能出现的空行</span><br><span class="line">    desmsg = str(desstr, &apos;utf8&apos;)</span><br><span class="line">    return desmsg.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加密处理</span><br><span class="line">username = []</span><br><span class="line">for i in loginname:</span><br><span class="line">    username.append(des_en(i))</span><br><span class="line"></span><br><span class="line"># 写入excel指定列</span><br><span class="line">filename = &apos;E:/DESFile/loginname.xlsx&apos;</span><br><span class="line">sheet = &apos;Sheet1&apos;</span><br><span class="line">col = 2</span><br><span class="line">colname = &apos;Username&apos;</span><br><span class="line">openexcel.write_excel(filename, sheet, colname, col, username)</span><br></pre></td></tr></table></figure><p>完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python操作excel一些实现&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="DES" scheme="http://tokyle.com/tags/DES/"/>
    
      <category term="openpyxl" scheme="http://tokyle.com/tags/openpyxl/"/>
    
  </entry>
  
  <entry>
    <title>Grafana集成进自己web项目</title>
    <link href="http://tokyle.com/2019/07/16/Grafana%E9%9B%86%E6%88%90%E8%BF%9B%E8%87%AA%E5%B7%B1web%E9%A1%B9%E7%9B%AE/"/>
    <id>http://tokyle.com/2019/07/16/Grafana集成进自己web项目/</id>
    <published>2019-07-16T06:28:28.000Z</published>
    <updated>2019-07-16T06:30:15.946Z</updated>
    
    <content type="html"><![CDATA[<p>Grafana集成进自己的监控项目</p><a id="more"></a><p>可能有需求是将grafana的dashboard集成到自己的监控系统里面，这样就避免了进grafana再查看</p><p>方案有是有，可能有点不安全，建议实在要这么干的话：</p><ol><li><p>尽量是公司内部玩，也就是纯内网操作；</p></li><li><p>找IT设置网络访问权限，只有公司IP可以访问监控系统和grafana的域名/IP；</p></li></ol><p>以下是方法：<br>嵌grafana监控dashboard，只需要在web监控iframe中嵌进去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;http://192.168.0.1:3000/d/oidoT24Wk/apache-jmeter?refresh=5s&amp;orgId=1&quot; width=&quot;450&quot; height=&quot;200&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>src后面放dashboard的页面即可</p><p>但是这样有个问题，直接打开，会跳转到登录页面，也就是想这么做的话，需要开启<code>匿名登录</code></p><p>修改grafana配置文件: <code>vim /etc/grafana/grafana.ini</code><br>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[auth.anonymous]</span><br><span class="line"># enable anonymous access</span><br><span class="line"># 去掉注释，改为true，允许匿名访问</span><br><span class="line">enabled = true</span><br><span class="line"></span><br><span class="line"># specify organization name that should be used for unauthenticated users</span><br><span class="line"># 匿名用户属于的组织</span><br><span class="line">org_name = Main Org.</span><br><span class="line"></span><br><span class="line"># specify role for unauthenticated users</span><br><span class="line"># 匿名用户的角色/权限</span><br><span class="line">org_role = Viewer</span><br></pre></td></tr></table></figure></p><p>修改完之后，重启grafana即可:<code>systemctl restart grafana-server</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Grafana集成进自己的监控项目&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="grafana" scheme="http://tokyle.com/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>DES加解密（python3实现）</title>
    <link href="http://tokyle.com/2019/07/11/DES%E5%8A%A0%E8%A7%A3%E5%AF%86%EF%BC%88python3%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://tokyle.com/2019/07/11/DES加解密（python3实现）/</id>
    <published>2019-07-11T08:57:43.000Z</published>
    <updated>2019-07-11T08:59:20.227Z</updated>
    
    <content type="html"><![CDATA[<p>DES加解密（python3实现）</p><a id="more"></a><p>安装工具包：<code>pip install pyDes</code></p><p>加解密实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/7/9 17:15</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import binascii</span><br><span class="line">from pyDes import des, PAD_PKCS5, ECB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_en(msg):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    DES 加密，分组方式 ECB，填充方式 PAD_PKCS5</span><br><span class="line">    :param msg: msg待加密字符串</span><br><span class="line">    :return: 返回加密后字符串,16进制</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    secret_key = &apos;IuFWKUut&apos;</span><br><span class="line">    iv =secret_key</span><br><span class="line">    key = des(secret_key, ECB, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    entrymsg = key.encrypt(msg, padmode=PAD_PKCS5)</span><br><span class="line">    return binascii.b2a_hex(entrymsg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def des_des(msg):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    DES 解密，分组方式 ECB，填充方式 PAD_PKCS5</span><br><span class="line">    :param msg: 16进制加密码</span><br><span class="line">    :return: 解密字符串</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    secret_key = &apos;IuFWKUut&apos;</span><br><span class="line">    iv = secret_key</span><br><span class="line">    key = des(secret_key, ECB, iv, pad=None, padmode=PAD_PKCS5)</span><br><span class="line">    desmsg = key.decrypt(binascii.a2b_hex(msg), padmode=PAD_PKCS5)</span><br><span class="line">    return desmsg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">str_en = des_en(&apos;DESTest&apos;)</span><br><span class="line">print(&quot;DES加密DESTest结果为： &quot; + str(str_en))</span><br><span class="line"></span><br><span class="line">str_des = des_des(str_en)</span><br><span class="line">print(&quot;DES解密结果为： &quot; + str(str_des))</span><br></pre></td></tr></table></figure><p>结果输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DES加密DESTest结果为： b&apos;9811175955dda6f9&apos;</span><br><span class="line">DES解密结果为： b&apos;DESTest&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DES加解密（python3实现）&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="DES" scheme="http://tokyle.com/tags/DES/"/>
    
  </entry>
  
  <entry>
    <title>Python-Requests练习（一）</title>
    <link href="http://tokyle.com/2019/07/09/Python-Requests%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://tokyle.com/2019/07/09/Python-Requests练习（一）/</id>
    <published>2019-07-09T09:26:38.000Z</published>
    <updated>2019-07-09T09:28:03.074Z</updated>
    
    <content type="html"><![CDATA[<p>Python-Requests练习（一）</p><a id="more"></a><p>python requests包(接口自动化)</p><p>想看看requests包的东西，主要是为了接口自动化</p><p>安装不谈，直接<code>pip install requests</code></p><h3 id="应用安装"><a href="#应用安装" class="headerlink" title="应用安装"></a>应用安装</h3><p>有个<code>httpbin</code>网站可以用来练习requests的请求：</p><blockquote><p><a href="http://httpbin.org/" target="_blank" rel="noopener">官网</a></p></blockquote><p>不过为了防止IP因为过多请求被封，还是本地搭建一个吧</p><p>这边使用docker安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装：</span><br><span class="line">docker pull kennethreitz/httpbin</span><br><span class="line"></span><br><span class="line">运行：</span><br><span class="line">docker run --name httpbin -d -p 8088:80 kennethreitz/httpbin</span><br></pre></td></tr></table></figure></p><p>成功之后，浏览器就可以访问：<code>http://192.168.0.126:8088/</code></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>最简单的用法：</p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">r = requests.get(&quot;http://192.168.0.126:8088/get&quot;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;, </span><br><span class="line">  &quot;data&quot;: &quot;&quot;, </span><br><span class="line">  &quot;files&quot;: &#123;&#125;, </span><br><span class="line">  &quot;form&quot;: &#123;&#125;, </span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, </span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;, </span><br><span class="line">    &quot;Content-Length&quot;: &quot;0&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;192.168.0.126:8088&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.21.0&quot;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;json&quot;: null, </span><br><span class="line">  &quot;origin&quot;: &quot;192.168.11.144&quot;, </span><br><span class="line">  &quot;url&quot;: &quot;http://192.168.0.126:8088/put&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(&quot;http://192.168.0.126:8088/post&quot;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.put(&quot;http://192.168.0.126:8088/put&quot;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.delete(&quot;http://192.168.0.126:8088/delete&quot;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h4 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r = requests.patch(&quot;http://192.168.0.126:8088/patch&quot;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python-Requests练习（一）&lt;/p&gt;
    
    </summary>
    
      <category term="自动化测试" scheme="http://tokyle.com/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Requests" scheme="http://tokyle.com/tags/Requests/"/>
    
  </entry>
  
  <entry>
    <title>NumPy中的轴-维度-秩</title>
    <link href="http://tokyle.com/2019/07/09/NumPy%E4%B8%AD%E7%9A%84%E8%BD%B4-%E7%BB%B4%E5%BA%A6-%E7%A7%A9/"/>
    <id>http://tokyle.com/2019/07/09/NumPy中的轴-维度-秩/</id>
    <published>2019-07-09T07:47:29.000Z</published>
    <updated>2019-07-09T07:48:18.858Z</updated>
    
    <content type="html"><![CDATA[<p>NumPy中的轴-维度-秩</p><a id="more"></a><p>看了某个要求，需要numpy和pandas，先看了numpy，才看到NumPy数组，就已经懵了，NumPy的维度（dimension）、轴（axis）和秩（rank）这几个概念有点绕。</p><p>关于维度：In NumPy dimension are called axes。意思是维度称为轴，和学生时代学习的对比，一维不谈，二维空间（x轴和y轴），只需要对应的x和y坐标，就能在二维空间中确定一个点；三维空间（x轴、y轴和z轴），只需要x坐标，y坐标和z坐标，就能在三维空间确定一个固定的点。类比到NumPy中，一维数组，轴的个数就为一；二维数组，轴的个数就为二。</p><p>而秩（rank）就是轴的数量，一维数组，秩是1，二维数组，秩是2这样。</p><p>NumPy可以用<code>ndim</code>和<code>shape</code>来获取秩和维度<br>源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ndim = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default</span><br><span class="line">    &quot;&quot;&quot;Number of array dimensions.</span><br><span class="line"></span><br><span class="line">    Examples</span><br><span class="line">    --------</span><br><span class="line">    &gt;&gt;&gt; x = np.array([1, 2, 3])</span><br><span class="line">    &gt;&gt;&gt; x.ndim</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; y = np.zeros((2, 3, 4))</span><br><span class="line">    &gt;&gt;&gt; y.ndim</span><br><span class="line">    3&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>秩是维度的数量（轴的数量）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">shape = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default</span><br><span class="line">    &quot;&quot;&quot;Tuple of array dimensions.</span><br><span class="line"></span><br><span class="line">    The shape property is usually used to get the current shape of an array,</span><br><span class="line">    but may also be used to reshape the array in-place by assigning a tuple of</span><br><span class="line">    array dimensions to it.  As with `numpy.reshape`, one of the new shape</span><br><span class="line">    dimensions can be -1, in which case its value is inferred from the size of</span><br><span class="line">    the array and the remaining dimensions. Reshaping an array in-place will</span><br><span class="line">    fail if a copy is required.</span><br><span class="line"></span><br><span class="line">    Examples</span><br><span class="line">    --------</span><br><span class="line">    &gt;&gt;&gt; x = np.array([1, 2, 3, 4])</span><br><span class="line">    &gt;&gt;&gt; x.shape</span><br><span class="line">    (4,)</span><br></pre></td></tr></table></figure></p><p>直接用例子来辅助理解：</p><p>首先记住：<strong>NumPy对于轴的编号由外向内，从行到列。</strong></p><p>一维数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import  numpy as np</span><br><span class="line"></span><br><span class="line"># 一维数组</span><br><span class="line">a = np.array([1, 2, 3])</span><br><span class="line">print(a.ndim)</span><br><span class="line">print(a.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">1</span><br><span class="line">(3,)</span><br></pre></td></tr></table></figure></p><p>示例的一维数组，秩为1，维度返回值(3,)，表示该数组在一维空间，有三个数据</p><p>二维数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 二维数组</span><br><span class="line">a = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">print(a.ndim)</span><br><span class="line">print(a.shape)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">2</span><br><span class="line">(2, 3)</span><br></pre></td></tr></table></figure></p><p>示例二维数据，秩为2，维度返回值(2, 3)，表示该二维数组有两行三列(0轴长度为2,1轴长度为3)<br>示意图：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4tkmha3rrj20c504b0sk.jpg" alt></p><p>二维数组中，轴0表示数组的行，轴1表示数组的列</p><p>二维数组，可以看做是在0轴方向叠加一维数组，相应的，数组求和，0轴方向结果应该为：[5, 7, 9]，1轴方向结果应该为[6, 15]<br>验证一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(a.sum(axis=0))</span><br><span class="line">print(a.sum(axis=1))</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">[5 7 9]</span><br><span class="line">[ 6 15]</span><br></pre></td></tr></table></figure></p><p>三维数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 三维数组</span><br><span class="line">a = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]], [[13, 14, 15], [16, 17, 18]]])</span><br><span class="line">b = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])</span><br><span class="line">c = np.array([[[1, 2, 3]]])</span><br><span class="line"># print(a)</span><br><span class="line">print(a.ndim)</span><br><span class="line">print(a.shape)</span><br><span class="line"></span><br><span class="line">print(b.ndim)</span><br><span class="line">print(b.shape)</span><br><span class="line"></span><br><span class="line">print(c.ndim)</span><br><span class="line">print(c.shape)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line">3</span><br><span class="line">(3, 2, 3)</span><br><span class="line">3</span><br><span class="line">(2, 2, 3)</span><br><span class="line">3</span><br><span class="line">(1, 1, 3)</span><br></pre></td></tr></table></figure></p><p>以a为例，秩为3，数组维度返回（3, 2, 3），表示0轴长度为3,1轴长度为2,2轴长度为3,<br>示意图：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4tlnnatiyj20ni0d2q3a.jpg" alt></p><p>从示意图可以看出，三维数组可以理解为二维数组在0轴方向的叠加；<br>0轴方向求和，结果应该是个二维数组：[[21, 24, 27], [30, 33, 36]]<br>1轴方向求和，结果应该是二维数组：[[5, 7, 9], [17, 19, 21], [29, 31, 33]]<br>2轴方向求和，结果应该是二维数组：[[6, 15], [24, 33], [42, 51]]<br>验证求和计算：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">print(a.sum(axis=0))</span><br><span class="line">print(a.sum(axis=1))</span><br><span class="line">print(a.sum(axis=2))</span><br><span class="line"></span><br><span class="line"># 结果输出</span><br><span class="line">[[21 24 27]</span><br><span class="line"> [30 33 36]]</span><br><span class="line">=====================</span><br><span class="line">[[ 5  7  9]</span><br><span class="line"> [17 19 21]</span><br><span class="line"> [29 31 33]]</span><br><span class="line">*********************</span><br><span class="line">[[ 6 15]</span><br><span class="line"> [24 33]</span><br><span class="line"> [42 51]]</span><br></pre></td></tr></table></figure></p><p>对于更高维度的数组，其实可以采用“降维”的方式进行处理，例如四维数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]])</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">[[[ 1  2  3  4]</span><br><span class="line">  [ 5  6  7  8]]</span><br><span class="line"></span><br><span class="line"> [[ 9 10 11 12]</span><br><span class="line">  [13 14 15 16]]]</span><br></pre></td></tr></table></figure></p><p>可以这么看：<br>A=[1, 2, 3, 4]<br>B=[5, 6, 7, 8]<br>C=[9, 10, 11, 12]<br>D=[13, 14, 15, 16]</p><p>原数组就可以重新表示成：[[A, B], [C, D]]，一个二维数组<br>示意图：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4tmcoq5brj20ak05xmx0.jpg" alt></p><p>此时进行数组求和，是按照向量进行加减法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 三维数组</span><br><span class="line"># a = np.array([[A, B], [C, D]])</span><br><span class="line"># A=[1, 2, 3, 4]</span><br><span class="line"># B=[5, 6, 7, 8]</span><br><span class="line"># C=[9, 10, 11, 12]</span><br><span class="line"># D=[13, 14, 15, 16]</span><br><span class="line"># 二维数组，1轴方向</span><br><span class="line"># A+B=[1+5, 2+6, 3+7, 4+8]=[6, 8, 10, 12]</span><br><span class="line"># C+D=[9+13, 10+14, 11+15, 12+16]=[22, 24, 26, 28]</span><br><span class="line"># 原数组1轴方向求和结果：[[6, 8, 10, 12], [22, 24, 26, 28]]</span><br><span class="line"># 二维数组，0方向</span><br><span class="line"># A+C=[1+9, 2+10, 3+11, 4+12]=[10, 12, 14, 16]</span><br><span class="line"># B+D=[5+13, 6+14, 7+15, 8+16]=[18, 20, 22, 24]</span><br><span class="line"># 原数组0轴方向求和结果：[[10, 12, 14, 16], [18, 20, 22, 24]]</span><br><span class="line"># 原数组2轴方向求和结果即为每个一维数组内元素之和:A=10,B=26,C=42,D=58  --&gt; [[10, 26], [42, 58]]</span><br><span class="line">a = np.array([[[1, 2, 3, 4], [5, 6, 7, 8]], [[9, 10, 11, 12], [13, 14, 15, 16]]])</span><br><span class="line"></span><br><span class="line"># print(a)</span><br><span class="line">print(a.sum(axis=0))</span><br><span class="line">print(&quot;====================&quot;)</span><br><span class="line">print(a.sum(axis=1))</span><br><span class="line">print(&quot;....................&quot;)</span><br><span class="line">print(a.sum(axis=2))</span><br></pre></td></tr></table></figure></p><p>结果验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[[10 12 14 16]</span><br><span class="line"> [18 20 22 24]]</span><br><span class="line">====================</span><br><span class="line">[[ 6  8 10 12]</span><br><span class="line"> [22 24 26 28]]</span><br><span class="line">....................</span><br><span class="line">[[10 26]</span><br><span class="line"> [42 58]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NumPy中的轴-维度-秩&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="NumPy" scheme="http://tokyle.com/tags/NumPy/"/>
    
  </entry>
  
  <entry>
    <title>python3 MD5加密</title>
    <link href="http://tokyle.com/2019/07/05/python3-MD5%E5%8A%A0%E5%AF%86/"/>
    <id>http://tokyle.com/2019/07/05/python3-MD5加密/</id>
    <published>2019-07-05T06:11:31.000Z</published>
    <updated>2019-07-05T08:25:37.714Z</updated>
    
    <content type="html"><![CDATA[<p>python3 MD5加密</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/7/5 13:09</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import time</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"># ZHTTest_f9768ce9e3acd3a743724c8128692d5d_1561529340474_&#123;&quot;searchText&quot;:&quot;吴凯&quot;&#125;</span><br><span class="line"># cd63c0e512a99aeabc73d1e6b9f26cbe</span><br><span class="line"></span><br><span class="line"># m = hashlib.md5(&apos;ZHTTest_f9768ce9e3acd3a743724c8128692d5d_1561529340474_&#123;&quot;searchText&quot;:&quot;吴凯&quot;&#125;&apos;.</span><br><span class="line">#                 encode(encoding=&apos;utf-8&apos;)).hexdigest()</span><br><span class="line"></span><br><span class="line"># 生成13位时间戳</span><br><span class="line">timestamp = int(time.time()*1000)</span><br><span class="line">strs= &apos;ZHTTest_f9768ce9e3acd3a743724c8128692d5d_&apos;</span><br><span class="line"></span><br><span class="line">md5str = strs + str(timestamp) + &apos;_&#123;&quot;searchText&quot;:&quot;吴凯&quot;&#125;&apos;</span><br><span class="line"># print(md5str)</span><br><span class="line"></span><br><span class="line"># 加密</span><br><span class="line">m = hashlib.md5(md5str.encode(encoding=&apos;utf-8&apos;)).hexdigest()</span><br><span class="line"></span><br><span class="line">print(&quot;md5sss:&quot; + m +&quot;&lt;&gt;&quot;)</span><br></pre></td></tr></table></figure><p>在windows下放在英文文件路径下，再创建一个.bat脚本：<code>python xxx.python</code><br>配合Jmeter的<code>OS Process Sampler</code>完成jmeter调用python实现MD5加密，之前写过HmacSHA256加密的</p><blockquote><p><a href="https://tokyle.com/2019/04/23/Jmeter%E8%B0%83%E7%94%A8python%E5%AE%8C%E6%88%90HmacSHA256%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86/">Jmeter调用python完成HmacSHA256加密处理</a></p></blockquote><p>附上loadrunner MD5实现（C语言真一窍不通）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Action()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">char* va1;</span><br><span class="line">char* va2;</span><br><span class="line">char* va3;</span><br><span class="line">char sign[500];</span><br><span class="line"></span><br><span class="line">web_save_timestamp_param(&quot;tStamp&quot;, LAST);</span><br><span class="line"></span><br><span class="line">va1=&quot;ZHTTest_f9768ce9e3acd3a743724c8128692d5d_&quot;;</span><br><span class="line">va2=&quot;&#123;tStamp&#125;&quot;;</span><br><span class="line">//va2=&quot;1561529340474&quot;;</span><br><span class="line">va3=&quot;_&#123;\&quot;searchText\&quot;:\&quot;鍚村嚡\&quot;&#125;&quot;;</span><br><span class="line"> </span><br><span class="line">strcat(sign,va1);</span><br><span class="line">strcat(sign,va2);</span><br><span class="line">strcat(sign,va3);</span><br><span class="line"></span><br><span class="line">lr_output_message(&quot;%s&quot;,CMd5(sign));</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python3 MD5加密&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="MD5" scheme="http://tokyle.com/tags/MD5/"/>
    
  </entry>
  
  <entry>
    <title>一些测试杂说</title>
    <link href="http://tokyle.com/2019/07/04/%E4%B8%80%E4%BA%9B%E6%B5%8B%E8%AF%95%E6%9D%82%E8%AF%B4/"/>
    <id>http://tokyle.com/2019/07/04/一些测试杂说/</id>
    <published>2019-07-04T07:00:09.000Z</published>
    <updated>2019-07-04T07:01:00.237Z</updated>
    
    <content type="html"><![CDATA[<p>一些测试杂说</p><a id="more"></a><h3 id="序-软件质量模型"><a href="#序-软件质量模型" class="headerlink" title="序.软件质量模型"></a>序.软件质量模型</h3><p>这段时间越来越不安定，越来越不理解自己当前的工作到底是为了什么，测试人员的产出只是作为一个参考，完全不是准出条件之一，越来越乱和浮躁的环境，充斥着无奈。</p><p>不谈现在的环境，想想测试本身，看看外面的测试现状。</p><p>首先，插个或许觉得不相关的：<code>软件产品质量模型</code>：</p><p>软件产品质量模型六大属性：</p><table><thead><tr><th>Item</th><th>子属性</th></tr></thead><tbody><tr><td>功能性</td><td>适合性、准确性、安全性、功能性的顺从性等</td></tr><tr><td>可靠性</td><td>成熟性、容错性、可恢复性、可靠性的顺从性等</td></tr><tr><td>易用性</td><td>易理解性、易学性、易操作性、易用性的依从性等</td></tr><tr><td>效率</td><td>时间特性、资源利用率、效率的依从性</td></tr><tr><td>可维护性</td><td>可分析性、可修改性、稳定性、可测试性、可维护性的依从性</td></tr><tr><td>可移植性</td><td>适应性、可安装性、共存性、易替换性、可移植性的依从性</td></tr></tbody></table><p>功能性的顺从性（Functionality Compliance）：软件产品符合和该功能相关的标准、规范、规则或特定的能力（如对于一款计算器，计算规则要和数学中相关规则保持一致）</p><p>可靠性的顺从性（Reliability Compliance）：软件产品遵循与可靠性相关的标准、约定或规定的能力（如对于通信类产品，系统的故障率不能高干多少、故障恢复时间不能长于多少等）</p><p>易用性的依从性(Usability Compliance)：软件产品遵循与易用性相关的标准、约定、风格指南（style guide）或法规的能力（如对Windows的计算器来说，在界面设计上模仿实体计算器是易用性依从性的一个体现）</p><p>效率依从性（Efficiency Compliance）： 软件产品遵循与效率相关的标准或约定的能力（如对系统资源的占有率又不能高于多少）</p><p>可维护性的依从性(Maintainability Compliance)：软件产品遵循与维护相关的标准或约定的能力（如软件出现故障时会弹出“XXX遇到问题要关闭”之类的提示）</p><p>可移植性的依从性（Portability Compliance）： 软件产品遵循与可移植性相关的标准或约定的能力（如产品不是针对某款特定的操作系统开发的，需要支持Windows所有操作系统）</p><h3 id="软件测试初衷"><a href="#软件测试初衷" class="headerlink" title="软件测试初衷"></a>软件测试初衷</h3><p>回想软件测试这个活动存在的理由和意义是什么。最简单粗暴的，测试是为了发现bug，人都有思维定式，自己写的逻辑，自己去发现问题，不是很容易，同时，人精力也有限，让开发人员既负责产品研发，又负责质量控制，不是很切实际，因此，测试人员的最重要使命就是把关，产品质量关，确保最终交付给客户的是相对满意的产品（关于质量，不是单纯的靠测试人员就可以保证的，理性的应该知道，产品质量是需要整个团队，整个软件生命周期共同设计，保证）</p><p>关于bug，很明显，bug不是测试人员造成的，很多开发不知道怎么的，就觉得，bug是测试人员造成的，怕不是失了智，这样的开发，建议转行，遇到这样开发的测试，建议深呼吸，抑制住锤人的冲动。bug可能是程序员写出来的，不符合需求的实现。也可能是产品经理错误的想法或者错误概念造成和客户期望不符的需求。当然，是人就都可能犯错误，测试需要关注的，是怎么预防错误的发生，针对需求开始就可能出现的质量问题，最简单的，现在已经盛行的，测试左移，全流程测试，从需求层面就开始介入测试，这也是测试的最佳实践之一，很不幸，国内当前，至少在苏州的大多数，很难。</p><p>同样的，就按我现在所在公司来说，听到的很多抱怨都是测不下去，原因是需求变来变去，产品无法准确把握和设计需求，造成开发过程甚至已经提测之后，进行不停的“需求变更”，美其名曰敏捷开发提倡拥抱变化，变更是正常的，实际上变化的自始至终都不是客户的需求，而是产品经理自己的需求，这可能是产品经理自身能力不够，也可能是没有对需求本身进行质量控制，大家都知道的，变更越往后，成本越高，作为质量控制人员，要防止最终的不可控，我们更应该从需求就开始接入，控制质量，控制成本。</p><h3 id="当前测试现状"><a href="#当前测试现状" class="headerlink" title="当前测试现状"></a>当前测试现状</h3><p>只从“术”的角度看当前软件测试技术发展<br>当前测试大环境下：</p><ul><li>大量公司关注自动化，提倡自动化实施</li><li>大力开展CI/CD、Devops</li><li>多数公司都建立有自己的测试平台</li><li>关注APM，链路监控</li><li>使用大量开源工具辅助测试</li><li>… …</li></ul><p>同时，可能存在的问题：</p><ul><li>公司并没有质量文化，没有关注质量的基因</li><li>公司没有自己的质量标准，也没有缺陷预防</li><li>过于追求“术”，对于测试行为本身的思考几乎没有</li><li>面对新的软件开发模式，敏捷、微服务、Service Mesh、Serverless手足无措</li><li>热衷于招聘测试开发和所谓资深测试，重复造轮子，和市场脱节（苏州oracle的部分资深）</li><li>… …<br>（提个搞笑的，招了一堆资深人员，做手工测试）</li></ul><h3 id="可能的未来"><a href="#可能的未来" class="headerlink" title="可能的未来"></a>可能的未来</h3><p>对于现状，说说可能的未来，首先，当前市场上，去翻的看看，招聘的职位，基本都是“测试开发”，说实话，很多时候，花大代价招进来的测试开发，做的是不是就是维护已有自动化框架的事情，或者是一些小的团队，招测试开发是为了开展自动化，我还是那句话，是不是有考虑好真的需要开展自动化了。自动化做到什么程序是自己满意的。单纯的开发自动化框架，不接触业务的测试开发，最终的产出真的是可以解决当前问题的。其实，是可以先冷静的想想的。毕竟，自动化，说到底，也是在已知测试结果的情况下进行的自动验证，现实中很多情况，是自动化做不到的，在没有能力做到自动生成测试用例，自动生成测试数据情况下，还是不用过于追求它。当然，当前已经有AI在测试上的实施，AI可以帮助我们自动生成测试用例、测试数据，模拟用户操作，帮助我们提高测试效率和测试覆盖率，但是AI基础是大数据，这边的数据，还是需要人工进行探索式测试得到。未来可能会出现这样的场景，首先人工进行业务分析，需求评审，功能拆分，探索式测试，产出数据供AI进行模型训练，然后AI会帮助进行以前的自动化部分，甚至是自动化没有涉及到的，AI会自动帮你扩充，自动化没有覆盖的，AI会帮助覆盖。</p><p>看过一个关于测试的公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试 = 检测 + 试验</span><br><span class="line"></span><br><span class="line">测试 = 已知的检测 + 未知的试验</span><br><span class="line"></span><br><span class="line">测试 = 基于确定性模型/明确的预言（test oracle）的自动化测试 + 基于AI搜索/基于工具随机/模糊模型/人工的探索式测试</span><br></pre></td></tr></table></figure></p><p>理想情况下，人工负责分析，建模性工作，其他交给AI和自动化进行机械重复性劳动</p><p>以上基本都是关于测试“术”的未来，关于测试“道”，说到底，其实自始至终都是一样的，软件测试人员，存在的原因是保障产品质量，最终提交客户的是客户满意的产品，你所要负责的，是产品的质量保障，不是测试代码，不是测试工具，不是你的领导布置的任务你有了框架产出，所有的一切“旁门”的努力，根本原因是为了保障质量，提高效率的保障质量。</p><p>最后，希望自己能在技术挣扎中，不忘了，自己做测试的原因。</p><p>通篇胡言乱语，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些测试杂说&lt;/p&gt;
    
    </summary>
    
      <category term="测试之道" scheme="http://tokyle.com/categories/%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>Centos7搭建wordpress博客</title>
    <link href="http://tokyle.com/2019/07/03/Centos7%E6%90%AD%E5%BB%BAwordpress%E5%8D%9A%E5%AE%A2/"/>
    <id>http://tokyle.com/2019/07/03/Centos7搭建wordpress博客/</id>
    <published>2019-07-03T07:35:50.000Z</published>
    <updated>2019-07-03T07:37:14.598Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7搭建wordpress博客</p><a id="more"></a><p>其实，也不是想换成wordpress，就是想看看搭起来怎么样</p><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>当前最新版本是5.2.2，但是没有汉化包，折腾半天，英语还是看的费劲，当然，全英文无压力可以用和这个，看了下汉化进度，简体中文0%，繁体中文100%，所以不介意的话，可以用台湾同胞制作的繁体中文汉化包：</p><blockquote><p><a href="https://wordpress.org/download/" target="_blank" rel="noopener">官网5.22下载</a><br><a href="https://make.wordpress.org/polyglots/teams/?locale=zh_TW" target="_blank" rel="noopener">繁体中文汉化包</a></p></blockquote><p>汉化包下载完了之后，先进入wordpress的<code>wp-content</code>文件夹，创建一个<code>languages</code>文件夹，然后将汉化包解压到这个文件夹，然后浏览器刷新页面即可</p><p>当前简体中文版汉化的最高版本是<strong>5.0.4</strong>，下载地址：</p><blockquote><p><a href="https://cn.wordpress.org/download/releases/" target="_blank" rel="noopener">简体中文汉化版</a></p></blockquote><h3 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h3><p>安装httpd很简单<code>yum install httpd</code>，启动：<code>systemctl start httpd</code></p><p>将上一步下载好的安装包，解压到httpd目录下：<code>/var/www/html</code>，重命名文件夹，更改属主和属组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf wordpress-5.2.2.tar.gz -C /var/www/html</span><br><span class="line"></span><br><span class="line">mv wordpress blog</span><br><span class="line"></span><br><span class="line">chown -R root:root blog</span><br></pre></td></tr></table></figure></p><p>并且，由于多加了一层<code>blog</code>，需要更改httpd的配置文件，修改路径：<br><code>vim /etc/httpd/conf/httpd.conf</code><br>将<code>DocumentRoot</code>和<code>Directory</code>改为<code>/var/www/html/blog</code></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>安装MySQL就不说了，装好之后，进控制台，建库和用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create database wordpress character set utf8;</span><br><span class="line">create user wordpress@&apos;%&apos; identified by &apos;test@1234&apos;;</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;wordpress&apos;@&apos;%&apos; IDENTIFIED BY &apos;test@1234&apos; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure></p><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p>使用<code>yum install php</code>安装的php版本是5.6有点低，wordpress5.2.2不支持，最好是安装<strong>PHP7</strong><br>卸载原来版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove php*</span><br></pre></td></tr></table></figure></p><p>更改RPM源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpm</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure></p><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-fpm php71w-gd php71w-mbstring php71w-mysqlnd php71w-opcache php71w-pdo php71w-xml php71w-ldap php71w-mcrypt</span><br></pre></td></tr></table></figure></p><p>验证：<code>php -v</code></p><h3 id="配置wordpress"><a href="#配置wordpress" class="headerlink" title="配置wordpress"></a>配置wordpress</h3><p>修改数据库配置：</p><p>进入blog文件夹（之前重命名的），重命名wp-config-sample.php为wp-config.php，添加数据库信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv wp-config-sample.php wp-config.php</span><br><span class="line">vim wp-config.php</span><br></pre></td></tr></table></figure></p><p>修改对应数据库信息，并且访问<code>https://api.wordpress.org/secret-key/1.1/salt/</code>获取Authentication Unique Keys，并且粘贴进来。</p><p>编辑完成之后，重启httpd:<code>systemctl restart httpd</code><br>浏览器输入IP，开始使用wordpress</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos7搭建wordpress博客&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="wordpress" scheme="http://tokyle.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter生成Report Dashboard</title>
    <link href="http://tokyle.com/2019/07/02/Jmeter%E7%94%9F%E6%88%90Report-Dashboard/"/>
    <id>http://tokyle.com/2019/07/02/Jmeter生成Report-Dashboard/</id>
    <published>2019-07-03T01:51:12.000Z</published>
    <updated>2019-07-03T02:02:28.280Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter生成Report Dashboard</p><a id="more"></a><h3 id="Report-Dashboard"><a href="#Report-Dashboard" class="headerlink" title="Report Dashboard"></a>Report Dashboard</h3><p>Jmeter最后生成的测试结果报告一直是被吐槽的，今天翻官方教程时候，发现，人家报告根本就很好看啊，自己不会用。。</p><blockquote><p><a href="https://jmeter.apache.org/usermanual/generating-dashboard.html#top" target="_blank" rel="noopener">Generating Report Dashboard</a></p></blockquote><p>生成方法很简单，命令行运行jmeter脚本即可，格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t &lt;test JMX file&gt; -l &lt;test log file&gt; -e -o &lt;Path to output folder&gt;</span><br></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t 111.jmx -l report\01-result.csv -e -o report\01-Dashboard</span><br></pre></td></tr></table></figure></p><p>运行完成之后，会在report文件夹下，生成一个<code>01-Dashboard</code>文件夹，浏览器打开<code>index.html</code>就是一个很完整的<strong>Report Dashboard</strong></p><p>效果图：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4mecnxu8xj21h30phmyo.jpg" alt="dashboard"></p><p>响应时间图<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4medfxay2j21gz0q60uk.jpg" alt></p><p>另一种生成dashboard的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generation from an existing sample CSV log file（从结果csv文件产生）</span><br><span class="line">jmeter -g &lt;log file&gt; -o &lt;Path to output folder&gt;</span><br></pre></td></tr></table></figure></p><p>这是在已经执行完测试，生成了csv的测试结果</p><h3 id="Jmeter几条常用命令"><a href="#Jmeter几条常用命令" class="headerlink" title="Jmeter几条常用命令"></a>Jmeter几条常用命令</h3><p>算是自己平时可能用的比较多的：</p><h4 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h4><p>jmeter命令行模式（脚本和jmeter.bat在一个目录）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmeter -n -t test1.jmx  -r -l report\01-result.csv -j report\01-log.log（分布式）</span><br><span class="line"></span><br><span class="line">jmeter -n -t APP.jmx   -l report\01-result.csv -j report\01-log.log（单台）</span><br></pre></td></tr></table></figure></p><p>顺便记点不相关的：<br>iostat安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y sysstat</span><br></pre></td></tr></table></figure></p><p>htop安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line">yum install htop</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter生成Report Dashboard&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter使用Grafana展示</title>
    <link href="http://tokyle.com/2019/06/27/Jmeter%E4%BD%BF%E7%94%A8Grafana%E5%B1%95%E7%A4%BA/"/>
    <id>http://tokyle.com/2019/06/27/Jmeter使用Grafana展示/</id>
    <published>2019-06-27T06:31:09.000Z</published>
    <updated>2019-06-27T06:44:36.149Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter使用Grafana展示</p><a id="more"></a><p>之前写过一个Jmeter + Influxdb + Grafana实时展示测试结果：</p><blockquote><p><a href="https://tokyle.com/2018/09/27/%E4%BD%BF%E7%94%A8Grafana%E5%B1%95%E7%A4%BAJmeter%E6%95%B0%E6%8D%AE/">使用Grafana展示Jmeter数据</a></p></blockquote><p>之前使用的<code>Backend Listener</code>选择的是<code>org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</code></p><p>现在直接使用<code>org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</code>更简单一点</p><h3 id="安装influxdb"><a href="#安装influxdb" class="headerlink" title="安装influxdb"></a>安装influxdb</h3><ul><li>安装：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.influxdata.com/influxdb/releases/influxdb-1.7.6.x86_64.rpm</span><br><span class="line">sudo yum localinstall influxdb-1.7.6.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>启动：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加自启动：</span><br><span class="line">systemctl enable influxdb</span><br><span class="line"></span><br><span class="line">启服务：</span><br><span class="line">systemctl start influxdb</span><br></pre></td></tr></table></figure><ul><li>建库：</li></ul><p>进控制台：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@tokyle influxdb]# influx</span><br><span class="line">Connected to http://localhost:8086 version 1.6.1</span><br><span class="line">InfluxDB shell version: 1.6.1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>建库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 建库</span><br><span class="line">create database jmeterdb;</span><br><span class="line"> </span><br><span class="line"># 建存储策略</span><br><span class="line">CREATE RETENTION POLICY &quot;jmeter_7d&quot; ON &quot;jmeterdb&quot; DURATION 7d REPLICATION 1 DEFAULT;</span><br><span class="line"></span><br><span class="line"># 查看存储策略</span><br><span class="line">show retention policies on jmeterdb;</span><br><span class="line"></span><br><span class="line">name      duration shardGroupDuration replicaN default</span><br><span class="line">----      -------- ------------------ -------- -------</span><br><span class="line">autogen   0s       168h0m0s           1        false</span><br><span class="line">jmeter_7d 168h0m0s 24h0m0s            1        true</span><br></pre></td></tr></table></figure></p><h3 id="安装grafana"><a href="#安装grafana" class="headerlink" title="安装grafana"></a>安装grafana</h3><ul><li>安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.grafana.com/oss/release/grafana-6.2.5-1.x86_64.rpm </span><br><span class="line">sudo yum localinstall grafana-6.2.5-1.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl start grafana-server</span><br><span class="line"></span><br><span class="line">systemctl status grafana-server</span><br></pre></td></tr></table></figure><p>进官网，下载Jmter标准模板。。。</p><blockquote><p><a href="https://grafana.com/dashboards/5496" target="_blank" rel="noopener">Grafana-Jmeter模板</a></p></blockquote><p>可以直接下载Json，然后进grafana web页面，导入dashboard即可</p><h3 id="Jmeter配置"><a href="#Jmeter配置" class="headerlink" title="Jmeter配置"></a>Jmeter配置</h3><p>主要就是配置一个<code>Backend Listener</code></p><p><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4fodelbddj213f094tbg.jpg" alt="Jmeter配置"></p><p>需要修改部分：</p><ol><li><p>influxdbUrl: IP改为自己influxdb的IP</p></li><li><p>application：自定义一个应用名称，后面grafana要用到</p></li><li><p>summaryOnly：false</p></li></ol><p>然后就可以直接运行jmeter跑结果了，在grafana中可以直观的呈现：</p><p><img src="http://ww1.sinaimg.cn/large/a025e134gy1g4fpmqipiwj20dw074gmr.jpg" alt></p><h3 id="Jmeter-Metrics"><a href="#Jmeter-Metrics" class="headerlink" title="Jmeter Metrics"></a>Jmeter Metrics</h3><p>Jmter对接influxdb之后，可以在表里找到很多的字段，翻jmeter官网，看看各个metric的含义</p><blockquote><p><a href="http://jmeter.apache.org/usermanual/realtime-results.html" target="_blank" rel="noopener">Jmeter官网Metrics教程</a></p></blockquote><h4 id="线程-虚拟用户"><a href="#线程-虚拟用户" class="headerlink" title="线程/虚拟用户"></a>线程/虚拟用户</h4><table><thead><tr><th>Item</th><th>含义</th></tr></thead><tbody><tr><td>minAT</td><td>最小活跃线程（虚拟用户）</td></tr><tr><td>maxAT</td><td>最大活跃线程（虚拟用户）</td></tr><tr><td>meanAT</td><td>平均活跃线程（虚拟用户）</td></tr><tr><td>startedT</td><td>started threads运行中的线程？</td></tr><tr><td>endedT</td><td>Finished thread停止的线程</td></tr></tbody></table><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><table><thead><tr><th>Item</th><th>含义</th></tr></thead><tbody><tr><td>.ok.count</td><td>成功的请求数</td></tr><tr><td>.h.count/hit</td><td>QPS</td></tr><tr><td>.ok.min</td><td>最小成功请求响应时间</td></tr><tr><td>.ok.max</td><td>最大成功请求响应时间</td></tr><tr><td>.ok.avg</td><td>成功请求平均响应时间</td></tr><tr><td>.ok.pct</td><td>请求成功率</td></tr><tr><td>.a.count</td><td>总请求数（成功+失败）</td></tr><tr><td>.sb.bytes</td><td>发送数据量（Bytes）</td></tr><tr><td>.rb.bytes</td><td>接收数据量（Bytes）</td></tr><tr><td>countError</td><td>错误数</td></tr><tr><td>pct90.0</td><td>90%响应时间</td></tr><tr><td>pct95.0</td><td>95%响应时间</td></tr><tr><td>pct99.0</td><td>99%响应时间</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter使用Grafana展示&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="grafana" scheme="http://tokyle.com/tags/grafana/"/>
    
      <category term="Influxdb" scheme="http://tokyle.com/tags/Influxdb/"/>
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>Influxdb启动失败日志定位</title>
    <link href="http://tokyle.com/2019/06/26/Influxdb%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E6%97%A5%E5%BF%97%E5%AE%9A%E4%BD%8D/"/>
    <id>http://tokyle.com/2019/06/26/Influxdb启动失败日志定位/</id>
    <published>2019-06-27T03:15:54.000Z</published>
    <updated>2019-06-27T03:17:47.756Z</updated>
    
    <content type="html"><![CDATA[<p>Influxdb启动失败日志定位</p><a id="more"></a><p>之前做过Jmeter使用influxdb和grafana展示测试数据，当时使用了graphite，现在看到Jmeter好像可以直接存在influxdb中，就想尝试下，就找了台机器搭建influxdb，然后悲剧了，起不来。</p><p>其实问题很简单，基本不是端口占用就是文件夹权限问，主要是找不到日志。。</p><p>下面是完整的经过<br>搭建完influxdb，并且<code>systemctl start influxdb</code>之后，想连进去看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@tokyle bin]# influx</span><br><span class="line">Failed to connect to http://localhost:8086: Get http://localhost:8086/ping: dial tcp [::1]:8086: connect: connection refused</span><br><span class="line">Please check your connection settings and ensure &apos;influxd&apos; is running.</span><br></pre></td></tr></table></figure></p><p>进不去。。检查状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@tokyle bin]# systemctl  status  influxdb</span><br><span class="line">● influxdb.service - InfluxDB is an open-source, distributed, time series database</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/influxdb.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: start-limit) since 四 2019-06-27 11:00:45 CST; 2min 0s ago</span><br><span class="line">     Docs: https://docs.influxdata.com/influxdb/</span><br><span class="line">  Process: 3587 ExecStart=/usr/bin/influxd -config /etc/influxdb/influxdb.conf $INFLUXD_OPTS (code=exited, status=1/FAILURE)</span><br><span class="line"> Main PID: 3587 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">6月 27 11:00:44 tokyle.com systemd[1]: Unit influxdb.service entered failed state.</span><br><span class="line">6月 27 11:00:44 tokyle.com systemd[1]: influxdb.service failed.</span><br><span class="line">6月 27 11:00:45 tokyle.com systemd[1]: influxdb.service holdoff time over, scheduling restart.</span><br><span class="line">6月 27 11:00:45 tokyle.com systemd[1]: Stopped InfluxDB is an open-source, distributed, time series database.</span><br><span class="line">6月 27 11:00:45 tokyle.com systemd[1]: start request repeated too quickly for influxdb.service</span><br><span class="line">6月 27 11:00:45 tokyle.com systemd[1]: Failed to start InfluxDB is an open-source, distributed, time series database.</span><br><span class="line">6月 27 11:00:45 tokyle.com systemd[1]: Unit influxdb.service entered failed state.</span><br><span class="line">6月 27 11:00:45 tokyle.com systemd[1]: influxdb.service failed.</span><br></pre></td></tr></table></figure></p><p>压根没起来</p><p>找日志，先到<code>/var/lib/influxdb</code>下，没知道，<code>/var/log/</code>没找到</p><p>找<strong>系统日志</strong><br><code>journalctl -u influxdb</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">journalctl -u influxdb</span><br><span class="line"></span><br><span class="line">6月 27 10:46:02 tokyle.com systemd[1]: influxdb.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">6月 27 10:46:02 tokyle.com systemd[1]: Unit influxdb.service entered failed state.</span><br><span class="line">6月 27 10:46:02 tokyle.com systemd[1]: influxdb.service failed.</span><br><span class="line">6月 27 10:46:03 tokyle.com systemd[1]: influxdb.service holdoff time over, scheduling restart.</span><br><span class="line">6月 27 10:46:03 tokyle.com systemd[1]: Stopped InfluxDB is an open-source, distributed, time series database.</span><br><span class="line">6月 27 10:46:03 tokyle.com systemd[1]: start request repeated too quickly for influxdb.service</span><br><span class="line">6月 27 10:46:03 tokyle.com systemd[1]: Failed to start InfluxDB is an open-source, distributed, time series database.</span><br></pre></td></tr></table></figure></p><p>还是看不出什么问题</p><p>最后，不使用systemctl直接手工启动influxdb：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop influxdb</span><br><span class="line"></span><br><span class="line">cd /usr/bin</span><br><span class="line"></span><br><span class="line">[root@tokyle bin]# influxd -config /etc/influxdb/influxdb.conf </span><br><span class="line"></span><br><span class="line"> 8888888           .d888 888                   8888888b.  888888b.</span><br><span class="line">   888            d88P&quot;  888                   888  &quot;Y88b 888  &quot;88b</span><br><span class="line">   888            888    888                   888    888 888  .88P</span><br><span class="line">   888   88888b.  888888 888 888  888 888  888 888    888 8888888K.</span><br><span class="line">   888   888 &quot;88b 888    888 888  888  Y8bd8P&apos; 888    888 888  &quot;Y88b</span><br><span class="line">   888   888  888 888    888 888  888   X88K   888    888 888    888</span><br><span class="line">   888   888  888 888    888 Y88b 888 .d8&quot;&quot;8b. 888  .d88P 888   d88P</span><br><span class="line"> 8888888 888  888 888    888  &quot;Y88888 888  888 8888888P&quot;  8888888P&quot;</span><br><span class="line"></span><br><span class="line">2019-06-27T03:04:08.786635ZinfoInfluxDB starting&#123;&quot;log_id&quot;: &quot;0GHj5JKW000&quot;, &quot;version&quot;: &quot;1.6.1&quot;, &quot;branch&quot;: &quot;1.6&quot;, &quot;commit&quot;: &quot;5766854b95ae86cccf6cc8ffe4c5bb9eacc994b8&quot;&#125;</span><br><span class="line">2019-06-27T03:04:08.786678ZinfoGo runtime&#123;&quot;log_id&quot;: &quot;0GHj5JKW000&quot;, &quot;version&quot;: &quot;go1.10.3&quot;, &quot;maxprocs&quot;: 4&#125;</span><br><span class="line">run: open server: listen: listen tcp 127.0.0.1:8088: bind: address already in use</span><br></pre></td></tr></table></figure></p><p>终于看见了，端口被占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@tokyle bin]# netstat -anp | grep 8088</span><br><span class="line">tcp6       0      0 :::8088                 :::*                    LISTEN      22329/docker-proxy</span><br></pre></td></tr></table></figure><p>docker占了8088,问题解决</p><p>以上经过，记住，influxdb找不到日志：</p><ol><li>journalctl -u influxdb</li><li>/usr/bin/influxd -config /etc/influxdb/influxdb.conf</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Influxdb启动失败日志定位&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Influxdb" scheme="http://tokyle.com/tags/Influxdb/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter ForEach控制器使用</title>
    <link href="http://tokyle.com/2019/06/26/Jmeter-ForEach%E6%8E%A7%E5%88%B6%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://tokyle.com/2019/06/26/Jmeter-ForEach控制器使用/</id>
    <published>2019-06-27T01:56:28.000Z</published>
    <updated>2019-06-27T02:01:11.690Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter ForEach控制器使用</p><a id="more"></a><p>昨天遇到的问题，有个接口需要循环删除多个taskid（前一个接口获得），找了网上资料，最后成功实现</p><h3 id="ForEach控制器"><a href="#ForEach控制器" class="headerlink" title="ForEach控制器"></a>ForEach控制器</h3><p>ForEach控制器一般和用户自定义变量一起使用，其在用户自定义变量中读取一系列相关的变量。该控制器下的采样器或控制器都会被执行一次或多次，每次读取不同的变量值</p><p>字段解释：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Input Variable Prefix</td><td>输入变量前缀</td></tr><tr><td>Output variable name</td><td>输出变量名称</td></tr><tr><td>Start index for loop(exclusive)</td><td>循环开始的索引（这里如果不填写，默认从1开始，如果没有1开始的变量，执行时会报错）</td></tr><tr><td>End index for loop(inclusive)</td><td>循环结束的索引</td></tr><tr><td>Add”_”before number</td><td>输入变量名称中是否使用“_”进行间隔</td></tr></tbody></table><h3 id="一般用法"><a href="#一般用法" class="headerlink" title="一般用法"></a>一般用法</h3><p>ForEach控制器一般喝<code>用户定义的变量</code>一起使用<br>结构类似这样：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ffkn6taqj20wp089t9m.jpg" alt="ForEach示例"></p><p>在<code>用户定义的变量</code>插件中定义了四个name，在后续http请求，需要每个都传进去执行一次，也就是整个线程组执行是一次，其中http请求会执行四次，并且每次使用不通的name</p><p>ForEach控制器配置：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ffnhsjnlj20a906owf2.jpg" alt="ForEach控制器配置"></p><p>传入name，输出testname，在后续http请求中，name替换成<code>${testname}</code>即可<br>看看效果：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ffrpyrraj20ld08oq4t.jpg" alt="执行效果"></p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>回到之前那个删除taskid的问题，可以采用同样的方式，只要保证，传给ForEach控制器的是key:value形式，并且是同一个key，不同的value</p><p><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ffwmsfu7j20ju081wg0.jpg" alt="11"></p><p>其中search接口返回数据大概是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;taskId&quot;:&quot;5d12ddc64d44wserwreeaa4cb56&quot;,</span><br><span class="line">        &quot;input&quot;:Object&#123;...&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;taskId&quot;:&quot;5d12ddc64ereea017eaa4cb56&quot;,</span><br><span class="line">        &quot;input&quot;:Object&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>可以看到返回值中有多个taskId，这些taskId是需要全部传给后续delete接口删除的<br>可以用JSON提取出所有的taskID，再传给ForEach控制器，输出一个新的变量taskidItem，将该taskidItem传给delete接口，达到有多少taskId，delete接口就取不同的taskId循环多少次，最终全部删除的效果</p><p><code>JSON Extractor</code>配置：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4fg1x4m2wj20wn07jq4x.jpg" alt="JSON Extractor"></p><p>以上就是本次实现，ForEach控制器，总的来说，适用于有多个value值返回，并且这些value值都需要进行后续操作的场景</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter ForEach控制器使用&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Jmeter" scheme="http://tokyle.com/tags/Jmeter/"/>
    
  </entry>
  
  <entry>
    <title>性能监控简单小结</title>
    <link href="http://tokyle.com/2019/06/26/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E7%AE%80%E5%8D%95%E5%B0%8F%E7%BB%93/"/>
    <id>http://tokyle.com/2019/06/26/性能监控简单小结/</id>
    <published>2019-06-26T07:39:34.000Z</published>
    <updated>2019-06-26T07:41:01.031Z</updated>
    
    <content type="html"><![CDATA[<p>性能监控简单小结</p><p>涉及MySQL和JVM<br><a id="more"></a></p><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>首先是MySQL的常用监控项</p><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><ul><li><p>缓存概览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;%Query_cache%%&quot;;</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| Variable_name                | Value    |</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| have_query_cache             | YES      |</span><br><span class="line">| query_cache_limit            | 16777216 |</span><br><span class="line">| query_cache_min_res_unit     | 4096     |</span><br><span class="line">| query_cache_size             | 16777216 |</span><br><span class="line">| query_cache_type             | OFF      |</span><br><span class="line">| query_cache_wlock_invalidate | OFF      |</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">6 rows in set (0.24 sec)</span><br></pre></td></tr></table></figure></li><li><p>缓存碎片率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status  like &quot;%Qcache%&quot;;</span><br><span class="line">+-------------------------+----------+</span><br><span class="line">| Variable_name           | Value    |</span><br><span class="line">+-------------------------+----------+</span><br><span class="line">| Qcache_free_blocks      | 1        |</span><br><span class="line">| Qcache_free_memory      | 16760152 |</span><br><span class="line">| Qcache_hits             | 0        |</span><br><span class="line">| Qcache_inserts          | 0        |</span><br><span class="line">| Qcache_lowmem_prunes    | 0        |</span><br><span class="line">| Qcache_not_cached       | 19860231 |</span><br><span class="line">| Qcache_queries_in_cache | 0        |</span><br><span class="line">| Qcache_total_blocks     | 1        |</span><br><span class="line">+-------------------------+----------+</span><br><span class="line">8 rows in set (0.21 sec)</span><br></pre></td></tr></table></figure></li></ul><p>其中，如果Qcache_free_blocks大致等于Qcache_total_blocks/2，说明碎片非常严重<br>如果Qcache_lowmem_prunes的值正在增加，并且有大量的自由块，表示碎片导致查询正在被从缓存中永久删除</p><p><strong>缓存碎片率 = Qcache_free_block/Qcache_total_blocks *100%</strong>如果查询缓存碎片率都超过20%，可以使用<code>FLUSH QUERY CACHE</code>整理缓存碎片</p><p><strong>缓存利用率 = （query_cache_size - Qcache_free_memory）/ query_cache_size *100% </strong><br>查询缓存利用率低于25%，表明query_cache_size值设置过大，可以适当减小；<br>查询利用率在80%以上，并且Qcache_lowmem_prunes &gt;50，表明query_cache_size值太小或者碎片太多</p><ul><li>thread_cache_size<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;thread%&quot;;</span><br><span class="line">+-------------------+---------------------------+</span><br><span class="line">| Variable_name     | Value                     |</span><br><span class="line">+-------------------+---------------------------+</span><br><span class="line">| thread_cache_size | 32                        |</span><br><span class="line">| thread_handling   | one-thread-per-connection |</span><br><span class="line">| thread_stack      | 262144                    |</span><br><span class="line">+-------------------+---------------------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p>缓存在Cache中的线程数量</p><h4 id="连接数"><a href="#连接数" class="headerlink" title="连接数"></a>连接数</h4><ul><li><p>DB已连接线程数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &apos;Connections&apos;;</span><br><span class="line">+---------------+--------+</span><br><span class="line">| Variable_name | Value  |</span><br><span class="line">+---------------+--------+</span><br><span class="line">| Connections   | 245884 |</span><br><span class="line">+---------------+--------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>当前连接线程状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &apos;%thread%&apos;;</span><br><span class="line">+------------------------------------------+-------+</span><br><span class="line">| Variable_name                            | Value |</span><br><span class="line">+------------------------------------------+-------+</span><br><span class="line">| Delayed_insert_threads                   | 0     |</span><br><span class="line">| Performance_schema_thread_classes_lost   | 0     |</span><br><span class="line">| Performance_schema_thread_instances_lost | 0     |</span><br><span class="line">| Slow_launch_threads                      | 0     |</span><br><span class="line">| Threads_cached                           | 18    |</span><br><span class="line">| Threads_connected                        | 9     |</span><br><span class="line">| Threads_created                          | 27    |</span><br><span class="line">| Threads_running                          | 1     |</span><br><span class="line">+------------------------------------------+-------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>服务器允许最大连接数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;max_connections&apos;;</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| max_connections | 151   |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p>一般500 ~ 800比较合适</p><ul><li>服务器响应的最大连接数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;Max_used_connections&apos;;</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Variable_name        | Value |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">| Max_used_connections | 27    |</span><br><span class="line">+----------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>Max_used_connections/max_connections &lt;= 85%</strong>比较理想</p><ul><li>连接队列长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;back_log&apos;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| back_log      | 80    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p>类似于线程队列，当无法响应请求时，就让线程排队；值越小越好。</p><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul><li>索引缓存大小<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;key_buffer_size&apos;;</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| Variable_name   | Value    |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">| key_buffer_size | 33554432 |</span><br><span class="line">+-----------------+----------+</span><br><span class="line">1 row in set (0.00 sec</span><br></pre></td></tr></table></figure></li></ul><p><strong>连接缓存命中率Threads_Cache_Hit = (Connections - Threads_created)/Connections*100%</strong>建议90%左右甚至更高</p><ul><li>索引缓存未命中率<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;key_read%&apos;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Key_read_requests | 28    |</span><br><span class="line">| Key_reads         | 10    |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">2 rows in set (0.10 sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>索引缓存未命中率key_cache_miss_rate = Key_reads/Key_read_requests *100%</strong><br>1%即100个索引中有一个在缓存中找不到，要直接从硬盘读取;建议<code>小于0.1%</code></p><ul><li>索引缓存命中率<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;key_%&apos;;</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| Key_blocks_not_flushed | 0     |</span><br><span class="line">| Key_blocks_unused      | 26785 |</span><br><span class="line">| Key_blocks_used        | 7     |</span><br><span class="line">| Key_read_requests      | 28    |</span><br><span class="line">| Key_reads              | 10    |</span><br><span class="line">| Key_write_requests     | 2     |</span><br><span class="line">| Key_writes             | 2     |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p><strong>key_buffer_read_hits = (1-Key_reads/Key_read_requests) *100%</strong><br><strong>key_buffer_write_hits = (1-Key_writes/Key_write_requests)*100%</strong><br>越大越好</p><ul><li>索引读取统计<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;key_blocks_u%&apos;;</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Variable_name     | Value |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">| Key_blocks_unused | 26785 |</span><br><span class="line">| Key_blocks_used   | 7     |</span><br><span class="line">+-------------------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p>Key_blocks_unused表示未使用的缓存簇（blocks）数，Key_blocks_used表示曾经用到的最大的blocks数，如果缓存都用到了，那么要么增加key_buffer_size，要么就是过度索引把缓存占满了。<br>比较理想的情况：<br><strong>Key_blocks_used/(Key_blocks_unused + Key_blocks_used) *100% ≈ 80%</strong></p><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><ul><li>临时表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;created_tmp%&apos;;</span><br><span class="line">+-------------------------+--------+</span><br><span class="line">| Variable_name           | Value  |</span><br><span class="line">+-------------------------+--------+</span><br><span class="line">| Created_tmp_disk_tables | 3054   |</span><br><span class="line">| Created_tmp_files       | 7      |</span><br><span class="line">| Created_tmp_tables      | 624084 |</span><br><span class="line">+-------------------------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><p>临时表比较大无法在内存中完成时就不得不使用磁盘文件。如果Created_tmp_tables非常大，则可能是系统中排序操作过多，或者表连接方式不是很优化。如果Created_tmp_disk_tables和Created_tmp_tables的比率过高，如超过10%，则需要考虑tmp_table_size这个系统参数的值是都设置的足够大。<br>参考值： <strong>Created_tmp_disk_tables/Created_tmp_tables &lt; 5%</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables where Variable_name in (&apos;tmp_table_size&apos;, &apos;max_heap_table_size&apos;);</span><br><span class="line">+---------------------+----------+</span><br><span class="line">| Variable_name       | Value    |</span><br><span class="line">+---------------------+----------+</span><br><span class="line">| max_heap_table_size | 33554432 |</span><br><span class="line">| tmp_table_size      | 33554432 |</span><br><span class="line">+---------------------+----------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>MySQL规定的内部内存临时表的最大值，每个线程都要分配。（实际起限制作用的是tmp_table_size和max_heap_table_size的最小值。）如果内存临时表超出了限制，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &quot;tmpdir&quot;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| tmpdir        | /tmp  |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><ul><li>表扫描情况<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;handler_read%&apos;;</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| Variable_name         | Value    |</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">| Handler_read_first    | 9357279  |</span><br><span class="line">| Handler_read_key      | 77387871 |</span><br><span class="line">| Handler_read_last     | 121      |</span><br><span class="line">| Handler_read_next     | 69589828 |</span><br><span class="line">| Handler_read_prev     | 104      |</span><br><span class="line">| Handler_read_rnd      | 531042   |</span><br><span class="line">| Handler_read_rnd_next | 45348670 |</span><br><span class="line">+-----------------------+----------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;com_select&apos;;</span><br><span class="line">+---------------+----------+</span><br><span class="line">| Variable_name | Value    |</span><br><span class="line">+---------------+----------+</span><br><span class="line">| Com_select    | 19894899 |</span><br><span class="line">+---------------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>表扫描率 = Handler_read_rnd_next /Com_select</strong><br>如果表扫描率超过4000，说明进行了太多表扫描，可能是索引没有建好；</p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h4><p>直接运行命令，返回java进程号，参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-l： 返回java进程全路径 </span><br><span class="line">-q： 仅显示进程号</span><br><span class="line">-v： 返回JVM参数，可以查看堆大小</span><br></pre></td></tr></table></figure></p><h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><p>用的最多</p><ul><li>查看运行情况<br>首先通过<code>jps</code>获取进程号，再使用<code>jstat</code>获取JVM中加载的累的数据和size<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# jps</span><br><span class="line">15649 Gtest.0-y-1.1.5.jar</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# jstat -class -h5  15649 1000</span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time   </span><br><span class="line"> 11654 21472.7        0     0.0       4.21</span><br><span class="line"> 11654 21472.7        0     0.0       4.21</span><br><span class="line"> 11654 21472.7        0     0.0       4.21</span><br><span class="line"> 11654 21472.7        0     0.0       4.21</span><br><span class="line"> 11654 21472.7        0     0.0       4.21</span><br></pre></td></tr></table></figure><p>每1秒统计一次，每统计5次显示一次表头</p><p>字段含义：</p><table><thead><tr><th>Item</th><th>含义</th></tr></thead><tbody><tr><td>Loaded</td><td>加载类的数目</td></tr><tr><td>Bytes</td><td>加载类的Size，单位Bytes</td></tr><tr><td>Unloaded</td><td>卸载类的数量</td></tr><tr><td>Bytes</td><td>卸载类的Size，单位Bytes</td></tr><tr><td>Time</td><td>加载和卸载类花费的时间</td></tr></tbody></table><ul><li>jstat 所有选项说明<br>更详细可以<code>man jstat</code>查看，所有选项及对应的参数说明</li></ul><table><thead><tr><th>Item</th><th>含义</th></tr></thead><tbody><tr><td>class</td><td>查看类加载情况的统计</td></tr><tr><td>compiler</td><td>查看HotSpot中即使编译器编译情况的统计</td></tr><tr><td>gc</td><td>用于查看JVM中堆的垃圾回收情况统计</td></tr><tr><td>gccapacity</td><td>查看新生代、老年代及元空间情况</td></tr><tr><td>gccause</td><td>最后一次及当前正在垃圾回收的原因</td></tr><tr><td>gcnew</td><td>查看新生代垃圾回收情况</td></tr><tr><td>gcnewcapacity</td><td>查看新生代存储容量情况</td></tr><tr><td>gcold</td><td>查看老年代及持久代发生GC的情况</td></tr><tr><td>gcoldcapacity</td><td>查看老年代容量</td></tr><tr><td>gcmetacapacity</td><td>元空间容量</td></tr><tr><td>gcutil</td><td>GC统计</td></tr></tbody></table><ul><li>jstat gccapacity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# jstat -gccapacity 15649</span><br><span class="line"> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC </span><br><span class="line"> 84992.0 1355776.0 688640.0 8192.0 20992.0 640512.0   171008.0  2711552.0   201728.0   201728.0      0.0 1105920.0  65280.0      0.0 1048576.0   8192.0     14     3</span><br></pre></td></tr></table></figure><p>字段说明：</p><table><thead><tr><th>Item</th><th>说明</th></tr></thead><tbody><tr><td>NGCMN</td><td>新生代最小容量（KB）</td></tr><tr><td>NGCMX</td><td>新生代最大容量(KB)</td></tr><tr><td>NGC</td><td>新生代当前容量(KB)</td></tr><tr><td>S0C</td><td>当前幸存者一区（survivor）容量(KB)</td></tr><tr><td>S1C</td><td>当前幸存者二区（survivor）容量(KB)</td></tr><tr><td>EC</td><td>当前伊甸园（eden）容量(KB)</td></tr><tr><td>OGCMN</td><td>老年代初始化大小(KB)</td></tr><tr><td>OGCMX</td><td>老年代最大容量(KB)</td></tr><tr><td>OGC</td><td>老年代当前容量(KB) Current old generation capacity (kB)</td></tr><tr><td>OC</td><td>old区当前容量（KB） Current old space capacity (kB)</td></tr><tr><td>MCMN</td><td>最小元空间容量（kB）</td></tr><tr><td>MCMX</td><td>最大元空间容量（kB）</td></tr><tr><td>MC</td><td>元空间容量（kB）</td></tr><tr><td>CCSMN</td><td>压缩类空间最小容量（kB）</td></tr><tr><td>CCSMX</td><td>压缩类空间最大容量（kB）</td></tr><tr><td>CCSC</td><td>压缩类空间容量（kB）</td></tr><tr><td>YGC</td><td>young GC次数</td></tr><tr><td>FGC</td><td>Full GC次数</td></tr></tbody></table><ul><li>jstat gcutil</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# jstat -gcutil 15649</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line"> 99.22   0.00  81.74  21.00  95.96  93.63     14    0.161     3    0.186    0.347</span><br></pre></td></tr></table></figure><p>字段说明：</p><table><thead><tr><th>Item</th><th>含义</th></tr></thead><tbody><tr><td>S0</td><td>幸存者一区已使用的容量百分比</td></tr><tr><td>S1</td><td>幸存者二区已使用的容量百分比</td></tr><tr><td>E</td><td>伊甸园已使用的容量百分比</td></tr><tr><td>O</td><td>老年代已使用的容量百分比</td></tr><tr><td>M</td><td>元空间已使用的容量百分比</td></tr><tr><td>CCS</td><td>压缩类空间利用率百分比</td></tr><tr><td>YGC</td><td>Young GC次数</td></tr><tr><td>YGCT</td><td>JVM启动到采样时，Young GC用时（s）</td></tr><tr><td>FGC</td><td>Full GC次数</td></tr><tr><td>FGCT</td><td>JVM启动到采样时，Full GC用时（s）</td></tr><tr><td>GCT</td><td>GC总时间</td></tr></tbody></table><h4 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h4><p>jmap我知道的作用，就是dump下堆快照，再用工具分析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:live,format=b,file=dump.hprof PID</span><br></pre></td></tr></table></figure></p><p>其他用法：</p><ul><li><p>jmap分析jvm内存<br><code>jmap -heap pidOP</code></p></li><li><p>打印当前java堆活跃的各个对象的数量、大小<br><code>jmap -histo:live 16102 | head -10</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[C is a char[]</span><br><span class="line">[S is a short[]</span><br><span class="line">[I is a int[]</span><br><span class="line">[B is a byte[]</span><br><span class="line">[[I is a int[][]</span><br></pre></td></tr></table></figure><ul><li>打印等待回收的对象信息<br><code>jmap -finalizerinfo  pid</code></li></ul><p>dump快照打印下来之后，传到本地，可以使用Jsisualvm或者<code>MemoryAnalyze</code>（mat）打开</p><blockquote><p><a href="https://pan.baidu.com/s/159QUTj5OKKi7jvtPIlSIvA" target="_blank" rel="noopener">MemoryAnalyze</a></p></blockquote><p>提取码：t4yy</p><h4 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h4><p>步骤：</p><ol><li><p>top -c   P（找最耗CPU进程拿pid）    4209</p></li><li><p>top -Hp 4209    P (找最耗CPU线程，拿pid)     9890</p></li><li><p>printf “%x” 9890    （转换为16进制）</p></li><li><p>jstack 4209 | grep 26a2 -C5 –color</p></li></ol><p>以上，就是整理的一点监控相关，配合以下几篇，性能测试的性能问题定位，差不多入门：</p><blockquote><p><a href="https://tokyle.com/2018/05/16/%E3%80%90%E8%BD%AC%E3%80%91windows%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/#">windows性能监控指标</a><br><a href="https://tokyle.com/2018/08/29/%E3%80%90%E8%BD%AC%E3%80%91Linux%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/">Linux性能监控与分析</a><br><a href="https://tokyle.com/2018/10/17/Linux%E5%AE%9A%E4%BD%8D%E6%9C%80%E8%80%97CPU%E7%9A%84%E7%BA%BF%E7%A8%8B/#">Linux定位最耗CPU的线程</a><br><a href="https://tokyle.com/2018/11/02/JVM%E5%86%85%E5%AD%98%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D/">JVM内存性能问题定位</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;性能监控简单小结&lt;/p&gt;
&lt;p&gt;涉及MySQL和JVM&lt;br&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="mysql" scheme="http://tokyle.com/tags/mysql/"/>
    
      <category term="JVM" scheme="http://tokyle.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>性能测试工具nGrinder试用</title>
    <link href="http://tokyle.com/2019/06/25/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7nGrinder%E8%AF%95%E7%94%A8/"/>
    <id>http://tokyle.com/2019/06/25/性能测试工具nGrinder试用/</id>
    <published>2019-06-26T01:57:41.000Z</published>
    <updated>2019-06-26T02:11:23.583Z</updated>
    
    <content type="html"><![CDATA[<p>性能测试工具nGrinder试用</p><a id="more"></a><p>之前就有听过这工具，但本着工具在精不在多原则，一直没用过，最近看市场上，苏州有家公司把这个列进了要求，就试用了下</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这边是直接使用的docker拉的镜像安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ngrinder/controller</span><br></pre></td></tr></table></figure></p><p>直接拉了最新版本镜像，然后起容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name ngrinder -d -p 8099:80 ngrinder/controller</span><br></pre></td></tr></table></figure></p><p>嗯，起起来了，不出所料，后续起agent时候挂了，端口没开：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR agent controller: Error while connecting to agent controller server at /192.168.0.97:16001</span><br></pre></td></tr></table></figure></p><p>原因很简单，起容器时候，没暴露16001端口，省略后续的其他踩坑，直接把要用的端口都开了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name ngrinder -d -p 8099:80 \</span><br><span class="line"> -p 16001:16001 \</span><br><span class="line"> -p 12000-12009:12000-12009 \</span><br><span class="line"> ngrinder/controller</span><br></pre></td></tr></table></figure></p><p>查看状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 拿containerid</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"># 看日志</span><br><span class="line">docker logs -f --tail=300 containerid</span><br></pre></td></tr></table></figure></p><p>起好之后，浏览器打开：<code>http://192.168.0.97:8099</code>，默认账密<code>admin/admin</code><br>界面长这样：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4eb9syiw4j20s40hh41l.jpg" alt="主界面"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在<code>帮助</code>旁边的<code>admin</code>下，点击下载代理和下载监控，传到服务器上，解压完起代理和监控（linux下直接起shell脚本）<br>先创建<code>脚本</code>,再创建<code>性能测试</code></p><p>创建脚本填写对应参数即可：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ebe1j89ej20ov0hmmxi.jpg" alt="创建脚本"></p><p>测试配置页面也很简单，都是一些通用的配置，代理数量，vusers，启动延时配置，运行时间，运行次数等<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ebfx4si4j20t30ml3zm.jpg" alt="测试配置"></p><p>配置完成，点保存并运行即可</p><p>测试报告：<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ebhu40qej20t00m0t9u.jpg" alt="测试报告"><br>其中有日志，也可以点<code>详细测试结果</code>查看更详细的数据<br><img src="http://ww1.sinaimg.cn/mw690/a025e134gy1g4ebkhbyh9j20rx0ofq4b.jpg" alt="详细报告"><br>支持下载CSV报告查看</p><p>以上就是nGrinder的一次，总的印象，工具还行，报告很直观，但是对于编码可能要求（看了下，Jython编写的，基本就是python的request框架），语言试用Groovy和Jython;内置了SVN，团队之间脚本分享很方便。</p><p>实在不想手持身份证用七牛云，用了新浪的图床，很可能图会挂。。见谅。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;性能测试工具nGrinder试用&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="nGrinder" scheme="http://tokyle.com/tags/nGrinder/"/>
    
  </entry>
  
  <entry>
    <title>python字符串实践</title>
    <link href="http://tokyle.com/2019/06/25/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AE%9E%E8%B7%B5/"/>
    <id>http://tokyle.com/2019/06/25/python字符串实践/</id>
    <published>2019-06-25T09:19:10.000Z</published>
    <updated>2019-06-25T09:20:38.738Z</updated>
    
    <content type="html"><![CDATA[<p>python字符串实践</p><a id="more"></a><p>收银小票打印尝试</p><h3 id="python字符串对齐方式"><a href="#python字符串对齐方式" class="headerlink" title="python字符串对齐方式"></a>python字符串对齐方式</h3><p>首先，看几个命令的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from math import pi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;&#123;0:&lt;10.2f&#125;\n&#123;0:^10.2f&#125;\n&#123;0:&gt;10.2f&#125;&quot;.format(pi))</span><br><span class="line">print(&apos;&#123;&#125;&apos;.format(pi))</span><br><span class="line">print(&apos;&#123;0&#125;&apos;.format(pi))</span><br><span class="line">print(&apos;&#123;&#123;:&#123;&#125;&#125;&#125;&apos;.format(10))</span><br><span class="line">print(&apos;&#123;:10.2f&#125;&apos;.format(pi))</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3.14      </span><br><span class="line">   3.14   </span><br><span class="line">      3.14</span><br><span class="line">3.141592653589793</span><br><span class="line">3.141592653589793</span><br><span class="line">&#123;:10&#125;</span><br><span class="line">      3.14</span><br></pre></td></tr></table></figure></p><h3 id="收银小票尝试："><a href="#收银小票尝试：" class="headerlink" title="收银小票尝试："></a>收银小票尝试：</h3><p>实现方式有点low，写的有点乱。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/6/20 16:06</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># from math import pi</span><br><span class="line"></span><br><span class="line"># print(&quot;&#123;0:&lt;10.2f&#125;\n&#123;0:^10.2f&#125;\n&#123;0:&gt;10.2f&#125;&quot;.format(pi))</span><br><span class="line"># print(&apos;&#123;&#125;&apos;.format(pi))</span><br><span class="line"># print(&apos;&#123;0&#125;&apos;.format(pi))</span><br><span class="line"># print(&apos;&#123;&#123;:&#123;&#125;&#125;&#125;&apos;.format(10))</span><br><span class="line"># print(&apos;&#123;:10.2f&#125;&apos;.format(pi))</span><br><span class="line"></span><br><span class="line">def fruit_price(fruit):</span><br><span class="line">    if fruit == &apos;Watermelon&apos;:</span><br><span class="line">        return 1.6</span><br><span class="line">    elif fruit == &apos;Apple&apos;:</span><br><span class="line">        return 10</span><br><span class="line">    elif fruit == &apos;Peach&apos;:</span><br><span class="line">        return 3.3</span><br><span class="line">    elif fruit == &apos;Pear&apos;:</span><br><span class="line">        return 2</span><br><span class="line">    else:</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">def enter_price():</span><br><span class="line">    price = []</span><br><span class="line">    weights = []</span><br><span class="line">    fruits = []</span><br><span class="line">    num = 0</span><br><span class="line">    while True:</span><br><span class="line">        num += 1</span><br><span class="line">        fruit = input(&apos;Enter the fruit: &apos;)</span><br><span class="line">        weight = input(&apos;Enter the weight: &apos;)</span><br><span class="line">        fruits.append(fruit)</span><br><span class="line">        weights.append(weight)</span><br><span class="line">        a = fruit_price(fruit)</span><br><span class="line">        price.append(a)</span><br><span class="line">        if fruit == &apos;q&apos; or weight == &apos;q&apos;:</span><br><span class="line">            break</span><br><span class="line">    num -= 1</span><br><span class="line">    fruits.remove(fruits[-1])</span><br><span class="line">    price.remove(price[-1])</span><br><span class="line">    weights.remove(weights[-1])</span><br><span class="line"></span><br><span class="line">    return [num,fruits,weights,price]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fruit_res = enter_price()</span><br><span class="line">print(fruit_res)</span><br><span class="line"></span><br><span class="line"># 设置小票宽度</span><br><span class="line">width = int(input(&apos;Please enter your width: &apos;))</span><br><span class="line">price_width = 10</span><br><span class="line">num_width = 10</span><br><span class="line">item_width = width - price_width - num_width</span><br><span class="line"></span><br><span class="line"># 设置小票表头格式</span><br><span class="line">header_fmt = &apos;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:^&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;&#125;&#125;&apos;.format(item_width, num_width, price_width)</span><br><span class="line">fmt = &apos;&#123;&#123;:&#123;&#125;&#125;&#125;&#123;&#123;:^&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;.2f&#125;&#125;&apos;.format(item_width, num_width, price_width)</span><br><span class="line"></span><br><span class="line">print(&apos;*&apos;* width)</span><br><span class="line">print(&quot;Here&apos;s Your Ticket&quot;)</span><br><span class="line"></span><br><span class="line">print(&apos;=&apos;* width)</span><br><span class="line">print(header_fmt.format(&apos;Item&apos;, &apos;Num&apos;, &apos;Price&apos;))</span><br><span class="line">print(&apos;-&apos; * width)</span><br><span class="line"></span><br><span class="line"># 循环打印水果，单价，数量</span><br><span class="line">num = fruit_res[0]</span><br><span class="line">i = 0</span><br><span class="line">prices = []</span><br><span class="line">for i in range(int(num)):</span><br><span class="line">    prices.append(int(fruit_res[2][i]) * float(fruit_res[3][i]))</span><br><span class="line">    print(fmt.format(fruit_res[1][i], fruit_res[2][i], fruit_res[3][i]))</span><br><span class="line">    i += 1</span><br><span class="line"></span><br><span class="line">print(&apos;-&apos; * width)</span><br><span class="line"></span><br><span class="line"># 打印总价</span><br><span class="line">Sum = sum(prices)</span><br><span class="line">item2_width = width - price_width</span><br><span class="line">foot_fmt = &apos;&#123;&#123;:&lt;&#123;&#125;&#125;&#125;&#123;&#123;:&gt;&#123;&#125;.2f&#125;&#125;&apos;.format(item2_width, price_width)</span><br><span class="line">print(foot_fmt.format(&apos;Summary&apos;, Sum))</span><br><span class="line">print(&apos;-&apos; * width)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Enter the fruit: Watermelon</span><br><span class="line">Enter the weight: 10</span><br><span class="line">Enter the fruit: Apple</span><br><span class="line">Enter the weight: 20</span><br><span class="line">Enter the fruit: Peach</span><br><span class="line">Enter the weight: 30</span><br><span class="line">Enter the fruit: q</span><br><span class="line">Enter the weight: q</span><br><span class="line">[3, [&apos;Watermelon&apos;, &apos;Apple&apos;, &apos;Peach&apos;], [&apos;10&apos;, &apos;20&apos;, &apos;30&apos;], [1.6, 10, 3.3]]</span><br><span class="line">Please enter your width: 45</span><br><span class="line">*********************************************</span><br><span class="line">Here&apos;s Your Ticket</span><br><span class="line">=============================================</span><br><span class="line">Item                        Num         Price</span><br><span class="line">---------------------------------------------</span><br><span class="line">Watermelon                   10          1.60</span><br><span class="line">Apple                        20         10.00</span><br><span class="line">Peach                        30          3.30</span><br><span class="line">---------------------------------------------</span><br><span class="line">Summary                                315.00</span><br><span class="line">---------------------------------------------</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>有空再改进。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python字符串实践&lt;/p&gt;
    
    </summary>
    
      <category term="python基础" scheme="http://tokyle.com/categories/python%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>敏捷测试与自动化</title>
    <link href="http://tokyle.com/2019/06/23/%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://tokyle.com/2019/06/23/敏捷测试与自动化/</id>
    <published>2019-06-24T02:09:56.000Z</published>
    <updated>2019-07-04T03:18:20.214Z</updated>
    
    <content type="html"><![CDATA[<p>敏捷测试与自动化</p><a id="more"></a><h3 id="敏捷自动化问题"><a href="#敏捷自动化问题" class="headerlink" title="敏捷自动化问题"></a>敏捷自动化问题</h3><p>最近看到一篇文章，讨论敏捷开发模式下的自动化实施问题，看到里面有很多值得好好想想的地方。</p><p>首先，在一个追求敏捷开发的团队中，很多时候，测试工作都是放在整个项目的最后一个环节，尤其是Android应用项目，多数情况下，会出现很多个版本一起上线，这个时候，作为测试的压力明显是非常大，工作量巨大，纯手工进行测试很可能会忙于应付需求，这个时候正式自动化回归最大效率化的时候，然后现状很可能是，自动化连手工都不如，需要半天甚至一天才能出测试结果，每次运行都是全流程，自动化测试报告也需要大量时间进行分析，这无疑是很失败的敏捷自动化实施。</p><p>很多团队，可能也有专人进行了很长时间的专职自动化设计，搭建，但是效果一直不理想，原因可能是：</p><ol><li><p>自动化人员与业务剥离，甚至不了解业务，所有用例需要业务功能测试人员提供；试想这样的情况下，自动化也不是纯框架设计，进行的也是涉及业务的自动化用例设计，那怎么可能设计出有效的自动化用例呢。</p></li><li><p>管理人员对于自动化预期过高，认为自动化测试可以实现所有的测试活动；自动化测试，说到底，也是在设计了断言的情况下进行验证，也就是已知结果的情况，很多时候，测试工作需要随机测试，暴力测试等等去发现很多非正常情况下可能出现的问题。</p></li><li><p>自动化测试没有专人，没有必要的时间和精力；有的公司可能实行的是固定测试开发团队进行自动化框架编辑搭建，后续的自动化用例是由产线的测试工程师进行编写维护；这样的做法，的确算是功能细分，但是有个前提，产线的测试有时间和精力去专门做自动化测试相关。很多团队有点搞笑，自动化用例让产线实施，并不给产线测试需要的时间去学习和练习自动化测试技能，最终的结果，可想而知。</p></li></ol><p>其实测试人员也都知道，产品交接时间点临近时，产品功能交付的优先级肯定是高于自动化实施，测试人员需要确保的是那些即将交付的产品功能，而不是确保产品功能正常的自动化测试用例。但是长此以往的不断将自动化测试实施优先级降低，一次次的迭代发布日期指定，只会将产线折腾的异常忙碌，烦躁。造成这种情况的原因，可能是迫于市场和客户压力，需要一次次的制定满足于市场的新功能，短时间铺开市场，解决客户问题，但是这样的一次次的追求快，仓促发布功能，最终真的是在满足市场吗？守业更比创业难，不要等到最后市场诚信低至谷底时候才想起来，当然，追求快速IPO分钱走人就当没说。</p><p>插一句：敏捷工作方式的目的是以最小幅度增长的方式发布可供用户使用的功能，并且得到用户的即时反馈。</p><h3 id="可能的解决办法"><a href="#可能的解决办法" class="headerlink" title="可能的解决办法"></a>可能的解决办法</h3><ol><li><p>设定合理的预期，想清楚，为什么需要自动化，需要自动化做什么，怎么实施可以帮助现在的团队。有个很扯淡的想法，实施自动化是因为不想做手工。。。</p></li><li><p>给自动化分配专用的资源，公司需要关注的不应该仅仅是测试开发需要专门的资源，产线的自动化用例编写维护人员更需要专门的时间和精力去学习，练习，维护自动化，整天疲于应对功能迭代压力，最终结果是自动化夭折。</p></li><li><p>提高自动化关注度和优先级，这个需要在公司层面，宣传论证实施自动化的价值，试问如果团队都不知道自动化为何物，就提出要花大时间，聘请专员进行自动化，是不是有点扯。</p></li><li><p>将自动化测试看做软件研发对待，这点是对自动化测试工程师本身来说的，实施自动化测试之前，需要和产品研发一样，需求分析，方案论证，概要设计，详细设计等。</p></li><li><p>合理制定目标，也是针对自动化实施人员来说的，在经验没有那么丰富，或者时间没有那么充裕的情况下，是是不是可以考虑首先进行的是接口的自动化，而不是直接UI。</p></li><li><p>持续学习，既然敏捷工作模式下，产品都是一些快速迭代的过程，那身为自动化工程师的你，是不是应该为了适应不断增加的需求，去快递学习。例如自动化工具后续直接使用docker镜像化，自动化实施配合CI，构建完成直接Jenkins调度，无需手工执行，自动化实施过程中，关注测试右移，实施APM监控等等。</p></li></ol><p>以上是看到的和自己的一点点想法，希望国内广大的测试同胞们可以不被自动化所累，知道自己想要的是什么，其实在我看来，追求系统的底层实现，开发语言的基本语法，高效实施等，才是更有效的方式，一味的追求工具，追求框架，很可能会迷失自己，毕竟做到后面，自动化也成了维护代码。</p><p>愿测试可以被温柔以待</p><p>突然想到个毫无关系的一句话：<code>少年不知画中意，归来已成画中人</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;敏捷测试与自动化&lt;/p&gt;
    
    </summary>
    
      <category term="测试之道" scheme="http://tokyle.com/categories/%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="自动化测试" scheme="http://tokyle.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
