<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>它夏了夏天</title>
  
  <subtitle>生命中有一种遇见，就让它美如行云流水，然后一生去回味。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tokyle.com/"/>
  <updated>2019-06-06T01:03:01.973Z</updated>
  <id>http://tokyle.com/</id>
  
  <author>
    <name>Kyle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重构测试</title>
    <link href="http://tokyle.com/2019/06/05/%E9%87%8D%E6%9E%84%E6%B5%8B%E8%AF%95/"/>
    <id>http://tokyle.com/2019/06/05/重构测试/</id>
    <published>2019-06-06T01:02:44.000Z</published>
    <updated>2019-06-06T01:03:01.973Z</updated>
    
    <content type="html"><![CDATA[<p>重建测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重建测试&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>几个测试问题思考</title>
    <link href="http://tokyle.com/2019/05/29/%E5%87%A0%E4%B8%AA%E6%B5%8B%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/"/>
    <id>http://tokyle.com/2019/05/29/几个测试问题思考/</id>
    <published>2019-05-29T09:07:26.000Z</published>
    <updated>2019-05-29T09:15:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>几个测试问题思考</p><a id="more"></a><p>翻到了关于测试职业生涯的文章，里面有提到几个问题，自己想了想，挺震撼的，之前真没仔细考虑过</p><h3 id="如果测试时间不够，怎么办"><a href="#如果测试时间不够，怎么办" class="headerlink" title="如果测试时间不够，怎么办"></a>如果测试时间不够，怎么办</h3><p>或者可以延伸为，<strong>如果测试时间不够，肯定不能够全部覆盖的进行测试，是否可以只测试客户关心的，比较常用的功能？</strong></p><p>想了挺久，结合网友的讨论，我给出的答案是：<br>作为测试，碰到时间紧张，测试资源欠缺，我们所唯一能做的就是上报公司，让公司协调人工和资源做延期处理。这样做，公司可能会因为不能如期交付而受到一定的经济损失，但交付一个合格的产品给客户，绝对不会有信誉上的损失（即使做了常用功能的测试，也不能保障产品就已经达到的交付标准，实在是中彩票的事情），从长远来看，会有更多的收益；</p><p>作为测试，我们没有任何权利自己做风险处理，“测客户关心的，测主要功能”都是错误的测试行为；</p><p>作为测试，坚守自己的职业道德底线，只做职责范围内和力所能及的事情；</p><p>最后，一个大话，作为测试，不仅需要对支付你工资的老板负责，也请为你手中的产品负责，为客户支付的金钱负责。</p><h3 id="如果让你测试一个完全不熟悉的系统，怎么办"><a href="#如果让你测试一个完全不熟悉的系统，怎么办" class="headerlink" title="如果让你测试一个完全不熟悉的系统，怎么办"></a>如果让你测试一个完全不熟悉的系统，怎么办</h3><p>前提当然是可能没有需求说明书，甚至没有产品架构图<br>看到testerhome上一个回答，很有启发性<br>没有标准答案，参考如下：</p><ol><li><p>先去直接操作和观察被测物。（比直接奔向需求要加分很多，想一下，你实际工作中，快速理解一个东西靠的是什么？肯定不是先读文档，且不说这些文档是不是能够正确的描述被测物）</p></li><li><p>其他信息来源：同类产品，说明书，直接操作、观察被测物，原有版本，找产品经理，找开发，找销售，运维，客服，找用户，公司知识库，历史邮件，会议纪要，原来的各种文档，代码，google，相关法规，行业标准。。。</p></li><li><p>如果项目进度很赶，会先上手操作，参考能找到的一切文档及信息源，通过迭代，一边学一边加深理解，一边给出质量反馈；</p></li><li><p>思考是什么原因造成这样的局面：没有需求文档，没有架构图，开发很赶没空搭理。怎么解决：推动知识库建设和必要的文档输出，也是很重要的。</p></li></ol><h3 id="怎么优化测试工作"><a href="#怎么优化测试工作" class="headerlink" title="怎么优化测试工作"></a>怎么优化测试工作</h3><p>开发提测质量不高。测试的头几天，很多主流程都走不通，导致测试总是在等待，或者是跟着开发一起联调。而这段时间，已经被习惯性的认为是测试时间了，因为：提测了</p><p>项目抱怨，测试时间过长，如何缩短测试时间</p><p>先分析测试时间过长的原因，可能是：</p><ol><li><p>测试环境不可用，测试环境被占用</p></li><li><p>开发提测质量不高，主流程都走不通</p></li></ol><p>解决办法：<br>关于环境问题，可能可以实施：</p><ol><li><p>监控环境使用率，可用率（时间占比）；</p></li><li><p>规范部署，部署时间，操作人，checklist；</p></li><li><p>制定规则，权限分明，操作环境的人员，分工；</p></li><li><p>确定部署人员，backup人员，完整可行的部署手册</p></li><li><p>环境分组，分版本操作（更新devops技能，docker容器化进行环境隔离） </p></li><li><p>等等… </p></li></ol><p>关于提测质量</p><p>测试可以：</p><ol><li><p>有明确的测试计划，并让所有干系人都有明确的预期</p></li><li><p>测试依据风险测试，最大的风险得到最快的cover，科学分配时间，明显缩短bug反馈时间弧</p></li><li><p>bug严格管理，所有重要bug都及时修复</p></li><li><p>良好的沟通和汇报机制，每天让团队主要干系人清晰的知道，距离发布还差多远</p></li><li><p>外部资源联调非常早的进行，不会让它在测试后期成为测试blocker。</p></li></ol><p>要求开发可以：</p><ol><li><p>根据测试提供冒烟用例，开发必须完成一定程度的自测才能提测。</p></li><li><p>测试和开发做自动化同期共建，在开发过程中，核心功能就被自动化用例保护起来了。</p></li><li><p>开发切分feature提测，而不是攒一个大招一下子提一坨</p></li><li><p>代码Codereview变成团队常规活动，QA在早期跟进核心代码，把问题坑杀在萌芽阶段</p></li></ol><p>结合新的理念，测试左移：提前参与；测试右移：生产监控体系；全面保障产品质量，并且提高测试效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个测试问题思考&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>闲谈测试理论</title>
    <link href="http://tokyle.com/2019/05/28/%E9%97%B2%E8%B0%88%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/"/>
    <id>http://tokyle.com/2019/05/28/闲谈测试理论/</id>
    <published>2019-05-28T09:37:16.000Z</published>
    <updated>2019-05-28T09:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>闲谈测试理论</p><a id="more"></a><h3 id="测试理念"><a href="#测试理念" class="headerlink" title="测试理念"></a>测试理念</h3><p>也是个人的测试坚持吧，有很多，最在意的几条</p><p><strong>不为进度牺牲质量</strong></p><p><strong>软件测试，绝对不存在随便点点</strong></p><p><strong>测试人员要全力关注的是测试设计</strong></p><p><strong>测试工程师，是产品的第一批用户，关注用户满意度</strong></p><h3 id="测试工作"><a href="#测试工作" class="headerlink" title="测试工作"></a>测试工作</h3><h4 id="从需求出发"><a href="#从需求出发" class="headerlink" title="从需求出发"></a>从需求出发</h4><p>软件产品的设计、研发、测试、投产，一定是为了满足一定的需求，PRD（产品需求文档）所描述的产品需求，是切研发、测试开展的基础。或许现在很多公司号称敏捷开发， 没有PRD，那也一定会在类似wiki上有相应的记载，如果这个也没有，那产品最终的质量是很值得怀疑的，毕竟一点需求痕迹都没有，那测试人员的测试根据，就只是开发实现了，比起PO的需求，已经产生了很大的偏差。</p><p>测试人员进行软件测试必须从需求出发。首先要全面了解需求，包括其背景、关联性、用户特点等；其次要深入挖掘隐含的需求和关联，包括某个需求隐含了 对于系统现有功能的修改等等。 我们只有在全面、深入了解需求的基础上，才能设计全面、有效的测试用例来进行测试，以满足对于软件产品满足需求的基本质量保证。</p><h4 id="测试设计"><a href="#测试设计" class="headerlink" title="测试设计"></a>测试设计</h4><p>测试活动，最应该关注的是测试设计，而不是最后冷冰冰的执行了多少多少用例，提交了多少多少bug。</p><p>测试设计的基础是对于需求的全面理解，并且在需求的基础上，对于需求实现的设计进行一定的了解；很多测试人员进行测试活动的依据都是需求文档，而忽略了开发的逻辑设计这一块；如果可以进行一定的开发设计分析的话，可以帮助我们测试人员更加全面的进行质量验证（有些时候，开发是可以实现需求，但是会出现数组溢出等问题，这样的问题，在其他地方可能就会引起重大的bug）</p><p>个人觉得，关注测试设计，才是关注了软件测试之道</p><h4 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h4><p>需要明确的是，软件测试，是在生命周期的接近最末端，单单靠测试，是无法保证软件质量的，测试人员，是软件质量的验证者，并不是保障，软件质量需要整个生命周期，整个团队一起努力。</p><p>软件测试并不能保证测试活动结束之后，产品没有bug，这是不现实的，没有一个软件产品可以号称自己没有bug，同样，这也不是测试的目标。</p><p>引用网上看到的一句话：<br><strong>测试活动-是一个运用测试的思维和各种测试理论及方法，将所测试的软件产品的每一个功能都改变成一组特定的输入和一组特定的输出一一确定对应的形式，形成测试用例，然后待开发人员提交测试后，在测试环境部署被测程序，根据测试用例进行主动测试的过程。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲谈测试理论&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>所谓测试新时代</title>
    <link href="http://tokyle.com/2019/05/27/%E6%89%80%E8%B0%93%E6%B5%8B%E8%AF%95%E6%96%B0%E6%97%B6%E4%BB%A3/"/>
    <id>http://tokyle.com/2019/05/27/所谓测试新时代/</id>
    <published>2019-05-27T08:57:56.000Z</published>
    <updated>2019-05-27T08:59:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>所谓测试新时代</p><a id="more"></a><h3 id="2019-软件测试"><a href="#2019-软件测试" class="headerlink" title="2019 软件测试"></a>2019 软件测试</h3><p>翻到了<code>World Quality Report 2018-19</code>看了好几项，也看了testerhome，软件质量报告等优秀公众号的文章，世界的确在变。</p><p>2019甚至之后很多年，国内的软件测试和质量保障人员的职责，已经不是单纯的找bug，现在我们需要做的，是客户满意度和业务成果的推动者。<br>刚入行时候，就一直挂在嘴边的一句话，软件测试，是要站在客户角度看问题，但是随着节奏越来越快，“涉世”越来越深，逐渐的，也就成了，找到个bug，提交各jira，结束，曾几何时，我们就迷失了自己；现在<code>World Quality Report 2018-19</code>再次提出了，<strong>客户满意度</strong>这个词，也是对我们已经迷茫的测试人员一个警醒。</p><h4 id="2019软件测试的趋势"><a href="#2019软件测试的趋势" class="headerlink" title="2019软件测试的趋势"></a>2019软件测试的趋势</h4><h5 id="AI在质量保障和测试中的作用"><a href="#AI在质量保障和测试中的作用" class="headerlink" title="AI在质量保障和测试中的作用"></a>AI在质量保障和测试中的作用</h5><p>随着过去一年甚至几年的AI大潮，AI技术在软件测试中越来越有应用市场，对于自动化的保障、对本身的AI产品的测试、使用AI进行质量预测等等，说实话，是个新技术，也是未来的一个趋势，但是目前该方案还没有那么的普及，很多公司，自身都没有响应的人工智能开发，所以，至少对我来说，是个值得参考的方向，但当前阶段，我不会去过多关注。</p><h5 id="敏捷以及devops"><a href="#敏捷以及devops" class="headerlink" title="敏捷以及devops"></a>敏捷以及devops</h5><p>这个，至少在我现在在的公司，是大谈特谈，从最高层开始，大力推行所谓敏捷开发，敏捷团队，说实话，一个小而优的团队，进行快速迭代对于产品来说，肯定是好的，同时配以devops，辅助CI\CD，全自动化回滚，测试等，可以想象，这样的团队，日常开发、测试、发布的效率有多高。但是实际上呢，从我现在公司的状况来看，一味的牺牲质量去追求速度，为了敏捷实施敏捷，到头来是留下了一堆祸根，客户生产问题接踵而至，整个产线疲于应付客户问题，无心关注新的功能点的设计，质量控制，继续往后，新的功能点进行快速迭代上线，缺乏有效的测试，更加增加了祸根数量，为后续的生产问题集中爆发写下了引言，整个，已经形成了恶性循环。</p><p>同时，敏捷团队和devops的转型，已经打乱了原来的QA团队，所有人分配到了不同的产线，这样使得跨项目的合作共享变成尤其困难。这点值得吐槽的更多，算了，不说了。</p><h5 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h5><p>这个已经不是新鲜事了，几乎所有公司都在追求自动化。也用现在的公司来举例子吧，当前实现的自动化</p><ol><li>产品重构多，自动化脚本几乎每次都会随着产品新迭代进行更新，没有一个可以适应多版本的自动化方案；</li><li>自动化测试环境以及自动化测试数据，准备异常繁琐，大多时间是消耗在环境排查及数据准备上；</li><li>自动化技术及理念不推陈出新，并没有思考过怎么样进行更高效的自动化覆盖，一味的沉溺于维护当前脚本；</li></ol><h5 id="测试环境和成本"><a href="#测试环境和成本" class="headerlink" title="测试环境和成本"></a>测试环境和成本</h5><p>关于测试环境和测试数据，很多公司做法不一样，但是同样的，对于测试来说，很多时候，问题是出现在测试环境上，很多时间是消耗在准备测试数据上，如何进行快速的测试环境部署，以及如何保障测试数据复用真的是衡量一个企业测试团队成熟度的一项指标。</p><h4 id="应对策略"><a href="#应对策略" class="headerlink" title="应对策略"></a>应对策略</h4><h5 id="以智能的、分阶段的方式提升基础自动化和智能测试自动化水平"><a href="#以智能的、分阶段的方式提升基础自动化和智能测试自动化水平" class="headerlink" title="以智能的、分阶段的方式提升基础自动化和智能测试自动化水平"></a>以智能的、分阶段的方式提升基础自动化和智能测试自动化水平</h5><p>未来，自动化肯定是测试的必备技能，团队的自动化测试水平，很直接的会影响到后续一系列开展，是真的可以决定团队是否能真正开展敏捷的关键。</p><p><code>World Quality Report 2018-19</code>给的建议如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1, 优化测试</span><br><span class="line">2，实施基础的自动化测试</span><br><span class="line">3，采用智能的、自适应的测试自动化方案让自动化变得更加“智能”</span><br></pre></td></tr></table></figure></p><h5 id="以非孤立的方式实施测试数据和测试环境的管理"><a href="#以非孤立的方式实施测试数据和测试环境的管理" class="headerlink" title="以非孤立的方式实施测试数据和测试环境的管理"></a>以非孤立的方式实施测试数据和测试环境的管理</h5><p>企业要开始生命周期的自动化，把测试自动化和数据、环境的准备工作一起开展，不要分离开来。另外，要采用更加智能的方式来管理测试环境和数据。</p><h5 id="构建超出测试开发（SDET）之外的质量工程技能"><a href="#构建超出测试开发（SDET）之外的质量工程技能" class="headerlink" title="构建超出测试开发（SDET）之外的质量工程技能"></a>构建超出测试开发（SDET）之外的质量工程技能</h5><p>这项，原谅才疏学浅，暂时get不到，抄录一下。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">敏捷、DevOps、云、IoT、区块链和AI这些新趋势的发展，以及更加自动的、集成的质量保障方法的需求，企业需要关注新的质量技能。</span><br><span class="line"></span><br><span class="line">推荐以下方式做好质量保障能力建设：</span><br><span class="line"></span><br><span class="line">1、第一优先级是吸引敏捷测试专家，需要具备功能自动化技能和领域测试技能，自动化测试将是每个质量保障人员的必备技能；</span><br><span class="line"></span><br><span class="line">2、第二优先级是吸引 SDET ，他们的必备技能要求有高级自动化测试、白盒测试、开发和平台构建能力，同时最好还有 AI 应用的基础算法应用能力和自然语言处理技能；</span><br><span class="line"></span><br><span class="line">3、第三优先级是吸引拥有一些特定 QA 技能集的人员，比如安全等非功能测试、测试环境和数据的管理技能等；</span><br><span class="line"></span><br><span class="line">4、第四优先级是吸引高级 QA 专家，需要有AI架构技能，以构建能够执行重复、智能任务的“智能资产”，这些技能由深度机器学习概念和算法组成，比如决策树、分类器、神经网络、高级统计学和数据优化技能。</span><br></pre></td></tr></table></figure></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>1，未来，我们需要更加关注客户满意度，追求速度，忽视客户满意度，迟早药丸；<br>2，低水平的自动化测试，测试数据及测试环境的管理已经影响到整个敏捷的实施；加强自动化培训，更加规范科学的进行测试数据及环境的管理，才能更好保障QA实施；<br>3，测试人员，需要更多的必备技能，来应对未来的挑战；这点上，个人还是坚持，测试人员需要明了并坚定自己的测试理念。以此为根基，进行测试技术的扩展，才是可行的路。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><blockquote><p><a href="https://mp.weixin.qq.com/s/voKNIhVOPLrjgQhDUhte9w" target="_blank" rel="noopener">2019 软件测试行业 5 大关键趋势与应对策略</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所谓测试新时代&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>测试 有惑</title>
    <link href="http://tokyle.com/2019/05/27/%E6%B5%8B%E8%AF%95-%E6%9C%89%E6%83%91/"/>
    <id>http://tokyle.com/2019/05/27/测试-有惑/</id>
    <published>2019-05-27T08:09:13.000Z</published>
    <updated>2019-05-27T08:10:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>测试有惑</p><a id="more"></a><p>最近因为一些事情，一度要转devops，一个我们这样的小互联网环境下还比较不常用的词汇；同时也遇上要手工造200多个excel这样的无语需求，烦躁之际，看到几篇文章，静下来好好想想，我现在的软件测试，是不是已经迷茫了。</p><h3 id="测试有惑"><a href="#测试有惑" class="headerlink" title="测试有惑"></a>测试有惑</h3><p>最近挺长时间，身边充斥着新兴技术，“大数据”、“容器化”、“微服务”、“service mesh”、“AI”等等，很长一段时间，我也像绝大多数人一样，追在后面，无尽的翻阅着“大数据下如何进行软件测试”、“如何测试分布式系统”、“容器化时代的测试技术”等等诸如此类的文章，渐渐的，从一个测试，学了python，关注了docker，k8s，到如今的servicemesh，istio；渐渐的，也感觉越来越无力，越来越迷茫，我的所作，是不是已经完成偏成了追求工具，追求新鲜，对于软件测试最基本的理论，是不是已经忘记的差不多了。</p><p>看到一篇博客，作者写了一句话，我也问了自己，发现，有点悲哀。</p><p><strong>面对被测对象，你的测试理念是什么</strong>，是否清楚，为何而战。</p><p>技术，永远处于不断重构中，而自己的测试理念，信念，才是作为测试从业者的根基，互联网的世界里，技术上的推陈出新永远比你的学习速度要快，一味的去追求技术，是不是需要担心，有一天，作为没有坚实测试理念的我们，会被技术革了命。</p><p>越来越迷茫，默然做着自己都不知道为什么的测试的我们，是不是可以稍微等一等，停下来重新寻找，或许已经丢失了的，我们的软件测试之道。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试有惑&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://tokyle.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="lives" scheme="http://tokyle.com/tags/lives/"/>
    
  </entry>
  
  <entry>
    <title>excel随机函数</title>
    <link href="http://tokyle.com/2019/05/23/excel%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0/"/>
    <id>http://tokyle.com/2019/05/23/excel随机函数/</id>
    <published>2019-05-24T03:28:33.000Z</published>
    <updated>2019-05-24T03:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>excel随机函数</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>需要给客户一份性能报告，然后有些数据需要稍微修饰下，服务器资源部分，采用的是之前nmon生成的报告，nmon的报告可以通过修改数据，自动生成图像，然后我们就需要在一个数值区间内生成几千个数据，来尽量真实点（o(╥﹏╥)o）（好没下限的感觉）</p><p>例如，现在需要出一个CPU使用率的监控图像，采用nmon和nmon_analyser生成了图像之后，找到cpu sheet页，通过更改User%，Sys%，Wait%以及Idle%来生成需要的数据的监控图像</p><p>现在需要生成一个CPU使用率在76%左右的图像，也就是需要User%的值大约在[74%, 78%]这个区间内，然后需要的是1000个这个区间的随机数，生成随机数的方法很多，这边介绍的excel的函数</p><h3 id="RAND"><a href="#RAND" class="headerlink" title="RAND()"></a>RAND()</h3><p>直接上用法</p><p>如果要生成[0, 10]，单元格内输入<code>=RAND()*10</code>，回车即可，按<code>F9</code>刷新</p><p>如果要生成[0.50]，单元格内输入<code>=RAND()*50</code>，回车即可，按<code>F9</code>刷新</p><p>然后，如果要生成[1, 8]，单元格内输入<code>=RAND()*7+1</code>，回车即可，按<code>F9</code>刷新</p><p>因此，我们的需求可以在单元格内写<code>=RAND()*4+74</code>，回车即可，按<code>F9</code>刷新<br>（1000条数据，直接往下拖即可）</p><p>纯粹是个无聊小技能。。</p><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;excel随机函数&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="excel" scheme="http://tokyle.com/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>appium使用uiautomator2无法启动app问题</title>
    <link href="http://tokyle.com/2019/05/22/appium%E4%BD%BF%E7%94%A8uiautomator2%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8app%E9%97%AE%E9%A2%98/"/>
    <id>http://tokyle.com/2019/05/22/appium使用uiautomator2无法启动app问题/</id>
    <published>2019-05-23T01:56:07.000Z</published>
    <updated>2019-05-23T02:15:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>appium使用uiautomator2无法启动app问题</p><a id="more"></a><p>之前有遇到过Android 7之后，使用appium登录进去之后，拿不到元素，page_source获取也超时，找了资料，都说是android 7的原因，解决办法很简单，appium起的时候，加个参数就行了,改成下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">desired_caps = &#123;&#125;</span><br><span class="line">desired_caps[&apos;platformName&apos;] = &apos;Android&apos;</span><br><span class="line">desired_caps[&apos;platformVersion&apos;] = &apos;8.1.0&apos;</span><br><span class="line">desired_caps[&apos;deviceName&apos;] = &apos;yanfyang&apos;</span><br><span class="line">desired_caps[&apos;appPackage&apos;] = &apos;com.kuaikan.comic&apos;</span><br><span class="line">desired_caps[&apos;appActivity&apos;] = &apos;com.kuaikan.comic.ui.LaunchActivity&apos;</span><br><span class="line">desired_caps[&apos;automationName&apos;] = &apos;uiautomator2&apos;</span><br><span class="line">desired_caps[&apos;noReset&apos;] = True</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, desired_caps)</span><br></pre></td></tr></table></figure></p><p>增加了一个：<code>desired_caps[&#39;automationName&#39;] = &#39;uiautomator2&#39;</code></p><p>这样直接启动，会有点问题</p><h3 id="Message-An-unknown-server-side-error-occurred-while-processing-the-command-Original-error-Could-not-sign-with-default-certificate"><a href="#Message-An-unknown-server-side-error-occurred-while-processing-the-command-Original-error-Could-not-sign-with-default-certificate" class="headerlink" title="Message: An unknown server-side error occurred while processing the command. Original error: Could not sign with default certificate."></a>Message: An unknown server-side error occurred while processing the command. Original error: Could not sign with default certificate.</h3><p>后面还有更有价值的报错，完整的不记得了，大概是这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Appium\resources\app\node_modules\appium-uiautomator2-server\apks\appium-uiautomator2-server-v3.1.1.apk       Access denied</span><br></pre></td></tr></table></figure></p><p>看到<code>Access denied</code>，首先就检查了下，因为当前电脑是域账号登录的，不是管理员，对那个报错的文件夹，权限只有读，没有写的权限，看样子问题是权限的</p><p><strong>解决办法</strong>：打开appium时候，右键使用管理员权限打开，这样就可以了</p><h3 id="命令行方式管理员运行appium"><a href="#命令行方式管理员运行appium" class="headerlink" title="命令行方式管理员运行appium"></a>命令行方式管理员运行appium</h3><p>linux或者mac好解决，sudo 即可，windows下，查了点资料，有个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas /user:Administrator Appium.exe</span><br></pre></td></tr></table></figure></p><p>需要进入appium目录下执行</p><p>执行这条命令，会让输入一个administrator的密码，这个密码，可以更改，方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右击我的电脑——管理——本地用户和组——点击用户——选择administrator——右击设置密码</span><br></pre></td></tr></table></figure></p><h4 id="1327-用户帐户限制阻止了此用户进行登录。例如：不允许使用空密码，登录次数的限制，或强制实施的某个策略限制。"><a href="#1327-用户帐户限制阻止了此用户进行登录。例如：不允许使用空密码，登录次数的限制，或强制实施的某个策略限制。" class="headerlink" title="1327: 用户帐户限制阻止了此用户进行登录。例如：不允许使用空密码，登录次数的限制，或强制实施的某个策略限制。"></a>1327: 用户帐户限制阻止了此用户进行登录。例如：不允许使用空密码，登录次数的限制，或强制实施的某个策略限制。</h4><p>输入密码之后，还是会报错上述错误，这个，是由于没有解禁用户造成的，解禁办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">右击我的电脑——管理——本地用户和组——点击用户——选择administrator——右击——选择属性——取消勾选  账户已禁用</span><br></pre></td></tr></table></figure></p><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;appium使用uiautomator2无法启动app问题&lt;/p&gt;
    
    </summary>
    
      <category term="appium" scheme="http://tokyle.com/categories/appium/"/>
    
    
      <category term="appium" scheme="http://tokyle.com/tags/appium/"/>
    
      <category term="uiautomator2" scheme="http://tokyle.com/tags/uiautomator2/"/>
    
  </entry>
  
  <entry>
    <title>jumpserver简单使用</title>
    <link href="http://tokyle.com/2019/05/21/jumpserver%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://tokyle.com/2019/05/21/jumpserver简单使用/</id>
    <published>2019-05-21T07:15:44.000Z</published>
    <updated>2019-05-21T07:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>jumpserver简单使用</p><a id="more"></a><p>Jumpserver搭建完成之后，就可以通过堡垒机跳转到制定的机器了，登录jumpserver：</p><ol><li>要么直接是命令行(xshell 客户端)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@192.168.0.1 2222</span><br></pre></td></tr></table></figure></li></ol><p>回车再输入密码即可（192.168.0.1是jumpserver搭建的服务器的ip）</p><ol><li>使用xshell客户端秘钥进行登录，jumpserver服务器创建登录用户，设置密码，生成公钥和私钥，xshell使用该用户进行登录（具体设置后面会说明）</li></ol><p>jumpserver登录web页面有几块：<br><code>仪表盘</code>、<code>用户管理</code>、<code>资产管理</code>、<code>权限管理</code>、<code>会话管理</code>、<code>作业中心</code>、<code>日志审计</code>、<code>系统设置</code><br>简单介绍一下基本的一些用法</p><h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><p>系统设置里面有几个，基本设置、邮件设置、LDAP设置、终端设置、安全设置</p><p><strong>基本设置</strong>很简单，配置下当前jumpserver web端的url即可，Email主题前缀就是发送的邮件主题前缀，可以自定，没啥好说的;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 修改 url 的&quot;localhost&quot;为你的实际 url 地址, 否则邮件收到的地址将为&quot;localhost&quot; 也无法创建新用户</span><br></pre></td></tr></table></figure><p><strong>邮件设置</strong>，根据实际的邮件配置即可，使用SSL，端口为465，设置完成之后，可以点击“测试连接”试试看能不能成功；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 点击页面上边的&quot;邮件设置&quot;, 进入邮件设置页面</span><br><span class="line"># 默认使用 25 端口, 不勾选 SSL 和 TLS; 如果需要勾选 SSL, 端口需要修改成 465; 如果需要勾选 TLS, 端口需要改成 587</span><br><span class="line"># 不可以同时勾选 SSL 和 TLS</span><br><span class="line"># 配置邮件服务后, 点击页面的&quot;测试连接&quot;按钮, 如果配置正确, Jumpserver 会发送一条测试邮件到您的 SMTP 账号邮箱里面, 确定收到测试邮件后点击保存即可使用</span><br></pre></td></tr></table></figure></p><p><strong>LDAP设置</strong>，统一用户认证，看你需不需要使用域账号了，具体怎么配置可以咨询IT；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如果不需要使用&quot;ldap&quot;用户登陆 jumpserver, 可以直接跳过, 不需要设置</span><br><span class="line"># 先&quot;测试&quot;通过才能保存</span><br><span class="line"># DN 和 OU 一定要完整(如 &quot;DN:cn=Manage,ou=Jumpserver,dc=jumpserver,ou=org&quot;)</span><br><span class="line"># 注：可借用第三方 gui 工具查看 ldap 用户的属性, 新版本已经支持中文名登录, 即cn=中文也可正常使用</span><br></pre></td></tr></table></figure></p><p><strong>终端设置</strong>，按需勾选，密码认证，密钥认证等；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># &quot;密码认证&quot;和&quot;密钥认证&quot;是 SSH 连接跳板机时所使用的认证方式(都不选会造成无法使用 SSH 方式连接登录跳板机, 不影响 web 登录)</span><br><span class="line"># &quot;Telnet成功正则表达式&quot; telnet设备登陆失败需要设置</span><br><span class="line"># &quot;命令存储&quot;&quot;录像存储&quot;位置设置</span><br><span class="line"></span><br><span class="line"># &quot;命令存储&quot;&quot;录像存储&quot;修改后, 需要在Jumpserver 会话管理-终端管理 修改terminal的配置 录像存储 命令记录, 然后重启 Jumpserver 服务</span><br><span class="line"># 设置后重启 Coco 才能生效</span><br></pre></td></tr></table></figure></p><p><strong>安全设置</strong>，也是按需勾选；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># &quot;MAF二次认证&quot;勾选会开启全局强制&quot;MFA&quot;, 所有 jumpserver 用户必须使用动态口令进行认证登录(即时生效)</span><br><span class="line"># &quot;限制登录失败&quot;和&quot;限制登录时间&quot;设置需要重启 jumpserver 才能生效</span><br><span class="line"># &quot;SSH最大空闲时间&quot;设置需要重启 coco 才能生效</span><br><span class="line"># &quot;密码校验规则&quot;设置立即生效</span><br></pre></td></tr></table></figure></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>用户管理分用户列表和用户组，顾名思义，jumpserver的用户和组；根据实际需要创建对应的用户，和组，用户分到对应的组即可；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 点击页面左侧&quot;用户列表&quot;菜单下的&quot;用户列表&quot;, 进入用户列表页面</span><br><span class="line"># 点击页面左上角&quot;创建用户&quot;按钮, 进入创建用户页面, (也可以通过右上角导入模版进行用户导入)</span><br><span class="line"># 其中, 用户名即 Jumpserver 登录账号(具有唯一性, 不能重名)。名称为页面右上角用户标识(可重复)</span><br><span class="line"># 成功提交用户信息后, Jumpserver 会发送一条设置&quot;用户密码&quot;的邮件到您填写的用户邮箱</span><br><span class="line"># 点击邮件中的设置密码链接, 设置好密码后, 您就可以用户名和密码登录 Jumpserver 了。</span><br><span class="line"># 用户首次登录 Jumpserver, 会被要求完善用户信息, 按照向导操作即可。</span><br><span class="line">注：MFA 即 Google Authenticator, 使用此软件需要APP时间与浏览器时间同步</span><br></pre></td></tr></table></figure></p><p>关于创建用户及完善用户信息，为了方便后续使用xshell客户端可以使用密钥登录，需要一点注意：</p><ol><li>首先，在jumpserver服务器上创建登录的账号，设置密码，生成公钥和私钥(root账号)：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#新增用户</span><br><span class="line">useradd kyle</span><br><span class="line"></span><br><span class="line"># 设置新密码</span><br><span class="line">passwd kyle</span><br><span class="line"></span><br><span class="line"># 生成公钥及私钥（记得过程中输入密钥的密码，后面会用到）</span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>在用户的家目录下（/home/kyle），会有<code>.ssh</code>文件夹（ls -al），里面是生成的公钥和私钥（cd /home/kyle/.ssh &amp;&amp; ls -al），这边用<code>id_rsa_1</code>和<code>id_rsa_1.pub</code>表示，便于识别</p><p>在jumpserver服务器上创建完账号kyle之后，在jumpserver web界面创建用户，用户名使用kyle，邮件自填，点击保存，等着收邮件，邮件会提示改密码，更改了密码之后，会进行完善用户信息，最主要的就是一个密钥，将之前生生成的公钥（id_rsa_1.pub）内容填进去即可(cat，复制)</p><h3 id="资产管理"><a href="#资产管理" class="headerlink" title="资产管理"></a>资产管理</h3><p>资产管理顾名思义就是管理设备的地方</p><h4 id="资产列表"><a href="#资产列表" class="headerlink" title="资产列表"></a>资产列表</h4><p>管理资产的节点，左边是资产树，右击可以进行增删改操作，右侧是该节点下的资产，界面挺简单</p><h4 id="网域列表"><a href="#网域列表" class="headerlink" title="网域列表"></a>网域列表</h4><p>这个功能没用过，看官方文档介绍的，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">网域功能是为了解决部分环境（如：混合云）无法直接连接而新增的功能，原理是通过网关服务器进行跳转登录。 </span><br><span class="line">JMS =&gt; 网域网关 =&gt; 目标资产</span><br></pre></td></tr></table></figure></p><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>jumpserver的管理用户，可以理解为资产上的root用户，或者是具备all sudo权限的用户；页面直接点创建管理用户，填写资产机器的root账号信息，或者用all sudo权限的账号信息即可（有个添加秘钥的选项，这个可以设置，root在目标机器上生成公钥和私钥，再引过来即可）</p><h4 id="系统用户"><a href="#系统用户" class="headerlink" title="系统用户"></a>系统用户</h4><p>官方解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统用户是 Jumpserver跳转登录资产时使用的用户，可以理解为登录资产用户，如 web, sa, dba(`ssh web@some-host`), 而不是使用某个用户的用户名跳转登录服务器(`ssh kyle@some-host`); 简单来说是 用户使用自己的用户名登录Jumpserver, Jumpserver使用系统用户登录资产。 系统用户创建时，如果选择了自动推送 Jumpserver会使用ansible自动推送系统用户到资产中，如果资产(交换机、windows)不支持ansible, 请手动填写账号密码。</span><br></pre></td></tr></table></figure></p><p>以下为官方文档的注意事项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># &quot;系统用户&quot;是 Jumpserver 跳转登录资产时使用的用户, 用户使用该用户登录资产</span><br><span class="line"># &quot;自动生成密码&quot;、&quot;自动推送&quot;、&quot;Sudo&quot;等功能需要对应资产的&quot;管理用户&quot;是且有root权限, 否则自动推送失败</span><br><span class="line"># ssh 协议的 &quot;Sudo&quot; 栏设定用户的 sudo 权限,</span><br><span class="line"># ssh 协议如果创建的&quot;系统用户&quot;已在资产上面存在, &quot;推送&quot;将会覆盖掉原用户的&quot;home&quot;目录权限(注: 替换成700权限)</span><br><span class="line"># ssh 协议的 &quot;ssh私钥&quot; 如果私钥有密码, 请把key的密码填在密码栏上, 目前仅支持 RSA DSA 格式私钥</span><br><span class="line"></span><br><span class="line"># 这里简单举几个 &quot;sudo&quot; 设置例子</span><br><span class="line">Sudo /bin/su  # 当前系统用户可以免sudo密码执行sudo su命令</span><br><span class="line"></span><br><span class="line">Sudo /usr/bin/git, /usr/bin/php, /bin/cat, /bin/more, /bin/less, /usr/bin/tail</span><br><span class="line"># 当前系统用户可以免sudo密码执行git php cat more less tail</span><br><span class="line"></span><br><span class="line">Sudo !/usr/bin/yum  # 当前系统用户不可以执行sudo yum命令</span><br><span class="line"></span><br><span class="line"># 此处的权限应该根据使用用户的需求汇总后定制, 原则上给予最小权限即可</span><br><span class="line"></span><br><span class="line"># &quot;系统用户&quot;创建时, 如果选择了&quot;自动推送&quot; Jumpserver 会使用&quot;Ansible&quot;自动推送系统用户到资产中, &quot;root&quot;用户不支持推送</span><br><span class="line"># 如果资产(交换机、Windows)不支持&quot;Ansible&quot;, 请去掉&quot;自动生成密钥&quot;、&quot;自动推送&quot;勾选。手动填写资产上已有的账号及账号密码</span><br><span class="line"></span><br><span class="line"># 如果想让用户登录资产时自己输入密码, 可以在创建系统用户时选择&quot;手动登录&quot;</span><br></pre></td></tr></table></figure></p><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>权限管理下，主要就是<code>资产授权</code>，可以创建授权规则，选择用户或者组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># &quot;名称&quot;, 授权的名称, 不能重复</span><br><span class="line"># &quot;用户&quot;和&quot;用户组&quot;二选一, 不推荐即选择用户又选择用户组</span><br><span class="line"># &quot;资产&quot;和&quot;节点&quot;二选一, 选择节点会包含节点下面的所有资产</span><br><span class="line"># &quot;系统用户&quot;, 及所选的用户或用户组下的用户能通过该系统用户使用所选节点或者节点下的资产</span><br><span class="line"># 用户(组), 资产(节点), 系统用户是一对一的关系, 所以当拥有 Linux、Windows 不同类型资产时, 应该分别给 Linux 资产和 Windows 资产创建授权规则</span><br></pre></td></tr></table></figure></p><h3 id="Jumpserver一些名词解释"><a href="#Jumpserver一些名词解释" class="headerlink" title="Jumpserver一些名词解释"></a>Jumpserver一些名词解释</h3><h4 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h4><ul><li><p>用户组<br>多个用户可以组合成用户组，为了方便进行授权，可以将一个部门或者几个用户组成用户组，在授权中使用组授权，该组中的用户拥有所有授权的主机权限</p></li><li><p>用户<br>用户是授权和登陆的主体，将来为每个员工简历一个账户，用来登录跳板机，将资产授权给改用户</p></li></ul><h4 id="资产管理-1"><a href="#资产管理-1" class="headerlink" title="资产管理"></a>资产管理</h4><ul><li><p>资产<br>资产通常是我们的服务器、网络设备等，将资产授权给用户，用户则会有权限登录资产，执行命令等</p></li><li><p>管理账号<br>添加资产时需要一个管理账号，该账号是该资产上已有的有管理权限的用户，如root，或者是有NOPASSWD:ALL sudo权限的用户，改管理账号用来向资产推送系统用户，为系统用户添加sudo，获取资产的一些信息</p></li></ul><h4 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h4><ul><li>系统用户<br>系统用户是服务器上建立的一些真实存在的可以ssh登陆的用户，如dev,sa,dba等，系统用户可以使用jumpserver推送到服务器上，也可以利用自己公司的工具进行推送，授权时将用户、资产、系统用户关联起来，则表明用户有权限登陆该资产的这个系统用户，例如：用户<strong>小明</strong>以<strong>dev</strong>系统用户登录192.168.0.2资产，简单理解就是，<strong>将某个资产上的某个系统用户映射给这个用户登录</strong></li></ul><h4 id="用户作用："><a href="#用户作用：" class="headerlink" title="用户作用："></a>用户作用：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">登录web（使用用户）</span><br><span class="line"></span><br><span class="line">登陆跳板机（使用用户）</span><br><span class="line"></span><br><span class="line">跳转登陆Client端（使用系统用户）</span><br><span class="line"></span><br><span class="line">系统用户 关联sudo（就是sudo授权），该系统用户就拥有sudo权限</span><br><span class="line"></span><br><span class="line">推送系统用户（使用管理用户，管理用户是Client端上已有的用户并且有sudo权限）</span><br></pre></td></tr></table></figure><p>以上，完~</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><blockquote><p><a href="http://docs.jumpserver.org/zh/docs/quick_start.html" target="_blank" rel="noopener">官方指导文档</a><br><a href="https://www.cnblogs.com/kevingrace/p/5587265.html" target="_blank" rel="noopener">优秀指导文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jumpserver简单使用&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="Jumpserver" scheme="http://tokyle.com/tags/Jumpserver/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装jumpserver堡垒机</title>
    <link href="http://tokyle.com/2019/05/20/centos7%E5%AE%89%E8%A3%85jumpserver%E5%A0%A1%E5%9E%92%E6%9C%BA/"/>
    <id>http://tokyle.com/2019/05/20/centos7安装jumpserver堡垒机/</id>
    <published>2019-05-20T09:11:18.000Z</published>
    <updated>2019-05-21T02:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>centos7安装jumpserver堡垒机</p><a id="more"></a><h3 id="Jumpserver"><a href="#Jumpserver" class="headerlink" title="Jumpserver"></a>Jumpserver</h3><p>jumpserver是一款常用的开源堡垒机方案，基于python+django，适合上手，安装需要确保python3环境</p><blockquote><p><a href="http://tokyle.com/%2F2018%2F04%2F20%2FCentos%E4%B8%8B%E5%8D%87%E7%BA%A7python2-7%E5%88%B03-6%2F">centos7下python2和python3共存</a></p></blockquote><h3 id="安装jumpserver"><a href="#安装jumpserver" class="headerlink" title="安装jumpserver"></a>安装jumpserver</h3><h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line"></span><br><span class="line">git clone --depth=1 https://github.com/jumpserver/jumpserver.git</span><br></pre></td></tr></table></figure><h4 id="安装RPM包"><a href="#安装RPM包" class="headerlink" title="安装RPM包"></a>安装RPM包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/jumpserver/requirements</span><br><span class="line"></span><br><span class="line">yum -y install `cat rpm_requirements.txt`</span><br></pre></td></tr></table></figure><h4 id="安装python库依赖"><a href="#安装python库依赖" class="headerlink" title="安装python库依赖"></a>安装python库依赖</h4><p><strong>tip: </strong> 安装pip，实际可以使用pip3安装依赖<br>安装pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装epel扩展源</span><br><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line"># 安装pip</span><br><span class="line">yum -y install python-pip</span><br><span class="line"></span><br><span class="line"># 清楚cache</span><br><span class="line">yum clean all</span><br></pre></td></tr></table></figure></p><p><strong>安装依赖</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure></p><h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><p>使用redis作为cache和celery broke<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install redis</span><br><span class="line"></span><br><span class="line">systemctl enable redis</span><br><span class="line"></span><br><span class="line">systemctl start redis</span><br></pre></td></tr></table></figure></p><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>这边使用的是MySQL，安装教程就不写了，很简单，创建jumpserver库和用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create database jumpserver  character set utf8;</span><br><span class="line"></span><br><span class="line">create user jumpserver@&apos;%&apos; identified by &apos;pwd&apos;;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;jumpserver&apos;@&apos;%&apos; IDENTIFIED BY &apos;pwd&apos; WITH GRANT OPTION;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure></p><h4 id="修改jumpserver配置文件"><a href="#修改jumpserver配置文件" class="headerlink" title="修改jumpserver配置文件"></a>修改jumpserver配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/jumpserver</span><br><span class="line"></span><br><span class="line">cp config_example.yml config.yml</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 生成随机SECRET_KEY</span><br><span class="line">SECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`</span><br><span class="line"></span><br><span class="line">echo &quot;SECRET_KEY=$SECRET_KEY&quot; &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"># 生成随机BOOTSTRAP_TOKEN</span><br><span class="line">BOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`</span><br><span class="line"></span><br><span class="line">echo &quot;BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN&quot; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/SECRET_KEY:/SECRET_KEY: $SECRET_KEY/g&quot; /opt/jumpserver/config.yml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/BOOTSTRAP_TOKEN:/BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN/g&quot; /opt/jumpserver/config.yml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/# DEBUG: true/DEBUG: false/g&quot; /opt/jumpserver/config.yml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/# LOG_LEVEL: DEBUG/LOG_LEVEL: ERROR/g&quot; /opt/jumpserver/config.yml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/# SESSION_EXPIRE_AT_BROWSER_CLOSE: false/SESSION_EXPIRE_AT_BROWSER_CLOSE: true/g&quot; /opt/jumpserver/config.yml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/DB_PASSWORD: /DB_PASSWORD: $DB_PASSWORD/g&quot; /opt/jumpserver/config.yml</span><br></pre></td></tr></table></figure><p>查看SECRET_KEY和BOOTSTRAP_TOKEN<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.bashrc</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">echo -e &quot;\033[31m 你的SECRET_KEY是 $SECRET_KEY \033[0m&quot;</span><br><span class="line">echo -e &quot;\033[31m 你的BOOTSTRAP_TOKEN是 $BOOTSTRAP_TOKEN \033[0m&quot;</span><br></pre></td></tr></table></figure></p><p>人工确认修改没有问题：<code>vim /opt/jumpserver/config.yml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"># SECURITY WARNING: keep the secret key used in production secret!</span><br><span class="line"># 加密秘钥 生产环境中请修改为随机字符串，请勿外泄, 可使用命令生成 </span><br><span class="line"># $ cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 49;echo</span><br><span class="line">SECRET_KEY: </span><br><span class="line"></span><br><span class="line"># SECURITY WARNING: keep the bootstrap token used in production secret!</span><br><span class="line"># 预共享Token coco和guacamole用来注册服务账号，不在使用原来的注册接受机制</span><br><span class="line">BOOTSTRAP_TOKEN: </span><br><span class="line"></span><br><span class="line"># Development env open this, when error occur display the full process track, Production disable it</span><br><span class="line"># DEBUG 模式 开启DEBUG后遇到错误时可以看到更多日志</span><br><span class="line">DEBUG: false</span><br><span class="line"></span><br><span class="line"># DEBUG, INFO, WARNING, ERROR, CRITICAL can set. See https://docs.djangoproject.com/en/1.10/topics/logging/</span><br><span class="line"># 日志级别</span><br><span class="line">LOG_LEVEL: ERROR</span><br><span class="line"># LOG_DIR: </span><br><span class="line"></span><br><span class="line"># Session expiration setting, Default 24 hour, Also set expired on on browser close</span><br><span class="line"># 浏览器Session过期时间，默认24小时, 也可以设置浏览器关闭则过期</span><br><span class="line"># SESSION_COOKIE_AGE: 86400</span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE: true</span><br><span class="line"></span><br><span class="line"># Database setting, Support sqlite3, mysql, postgres ....</span><br><span class="line"># 数据库设置</span><br><span class="line"># See https://docs.djangoproject.com/en/1.10/ref/settings/#databases</span><br><span class="line"></span><br><span class="line"># SQLite setting:</span><br><span class="line"># 使用单文件sqlite数据库</span><br><span class="line"># DB_ENGINE: sqlite3</span><br><span class="line"># DB_NAME: </span><br><span class="line"></span><br><span class="line"># MySQL or postgres setting like:</span><br><span class="line"># 使用Mysql作为数据库</span><br><span class="line">DB_ENGINE: mysql</span><br><span class="line">DB_HOST: 127.0.0.1</span><br><span class="line">DB_PORT: 3306</span><br><span class="line">DB_USER: jumpserver</span><br><span class="line">DB_PASSWORD: </span><br><span class="line">DB_NAME: jumpserver</span><br><span class="line"></span><br><span class="line"># When Django start it will bind this host and port</span><br><span class="line"># ./manage.py runserver 127.0.0.1:8080</span><br><span class="line"># 运行时绑定端口</span><br><span class="line">HTTP_BIND_HOST: 0.0.0.0</span><br><span class="line">HTTP_LISTEN_PORT: 8080</span><br><span class="line"></span><br><span class="line"># Use Redis as broker for celery and web socket</span><br><span class="line"># Redis配置</span><br><span class="line">REDIS_HOST: 127.0.0.1</span><br><span class="line">REDIS_PORT: 6379</span><br><span class="line"># REDIS_PASSWORD: </span><br><span class="line"># REDIS_DB_CELERY: 3</span><br><span class="line"># REDIS_DB_CACHE: 4</span><br><span class="line"></span><br><span class="line"># Use OpenID authorization</span><br><span class="line"># 使用OpenID 来进行认证设置</span><br><span class="line"># BASE_SITE_URL: http://localhost:8080</span><br><span class="line"># AUTH_OPENID: false  # True or False</span><br><span class="line"># AUTH_OPENID_SERVER_URL: https://openid-auth-server.com/</span><br><span class="line"># AUTH_OPENID_REALM_NAME: realm-name</span><br><span class="line"># AUTH_OPENID_CLIENT_ID: client-id</span><br><span class="line"># AUTH_OPENID_CLIENT_SECRET: client-secret</span><br><span class="line">#</span><br><span class="line"># Use Radius authorization</span><br><span class="line"># 使用Radius来认证</span><br><span class="line"># AUTH_RADIUS: false</span><br><span class="line"># RADIUS_SERVER: localhost</span><br><span class="line"># RADIUS_PORT: 1812</span><br><span class="line"># RADIUS_SECRET: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># OTP settings</span><br><span class="line"># OTP/MFA 配置</span><br><span class="line"># OTP_VALID_WINDOW: 0</span><br><span class="line"># OTP_ISSUER_NAME: Jumpserver</span><br></pre></td></tr></table></figure></p><h4 id="运行Jumpserver"><a href="#运行Jumpserver" class="headerlink" title="运行Jumpserver"></a>运行Jumpserver</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/jumpserver</span><br><span class="line"></span><br><span class="line"># 后台运行</span><br><span class="line">./jms start all -d</span><br><span class="line"></span><br><span class="line"># 其他命令</span><br><span class="line">./jms start|stop|status all</span><br></pre></td></tr></table></figure><h3 id="安装SSH-Server和-WebSocket-Server：Coco"><a href="#安装SSH-Server和-WebSocket-Server：Coco" class="headerlink" title="安装SSH Server和 WebSocket Server：Coco"></a>安装SSH Server和 WebSocket Server：Coco</h3><h4 id="clone项目"><a href="#clone项目" class="headerlink" title="clone项目"></a>clone项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/jumpserver/coco.git</span><br></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/coco/requirements</span><br><span class="line"></span><br><span class="line">yum -y install $(cat rpm_requirements.txt)</span><br><span class="line"></span><br><span class="line">pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/coco/</span><br><span class="line"></span><br><span class="line">cp config_example.yml config.yml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/BOOTSTRAP_TOKEN: &lt;PleasgeChangeSameWithJumpserver&gt;/BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN/g&quot; /opt/coco/config.yml</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/# LOG_LEVEL: INFO/LOG_LEVEL: ERROR/g&quot; /opt/coco/config.yml</span><br></pre></td></tr></table></figure><p><code>vim  /opt/coco/config.yml</code></p><h4 id="启coco"><a href="#启coco" class="headerlink" title="启coco"></a>启coco</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 后台启动</span><br><span class="line">./cocod start -d</span><br><span class="line"></span><br><span class="line"># 更多命令</span><br><span class="line">./cocod start|stop|statu</span><br></pre></td></tr></table></figure><h3 id="安装Web-Terminal-前端-Luna"><a href="#安装Web-Terminal-前端-Luna" class="headerlink" title="安装Web Terminal 前端: Luna"></a>安装Web Terminal 前端: Luna</h3><p>直接下载解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">wget https://github.com/jumpserver/luna/releases/download/1.4.10/luna.tar.gz</span><br><span class="line"></span><br><span class="line">#如果网络有问题导致下载无法完成可以使用下面地址</span><br><span class="line">wget https://demo.jumpserver.org/download/luna/1.4.10/luna.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf luna.tar.gz</span><br><span class="line">chown -R root:root luna</span><br></pre></td></tr></table></figure></p><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install yum-utils</span><br><span class="line"></span><br><span class="line"># 配置nginx yum源</span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure><p>内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/$releasever/$basearch/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br></pre></td></tr></table></figure></p><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line"></span><br><span class="line">yum install -y nginx</span><br><span class="line"></span><br><span class="line">mv default.conf default.conf_20190520.bak</span><br><span class="line"></span><br><span class="line"># 修改配置</span><br><span class="line">vim /etc/nginx/conf.d/jumpserver.conf</span><br></pre></td></tr></table></figure></p><p>修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;  # 代理端口, 以后将通过此端口进行访问, 不再通过8080端口</span><br><span class="line">    # server_name demo.jumpserver.org;  # 修改成你的域名或者注释掉</span><br><span class="line"></span><br><span class="line">    client_max_body_size 100m;  # 录像及文件上传大小限制</span><br><span class="line"></span><br><span class="line">    location /luna/ &#123;</span><br><span class="line">        try_files $uri / /index.html;</span><br><span class="line">        alias /opt/luna/;  # luna 路径, 如果修改安装目录, 此处需要修改</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /media/ &#123;</span><br><span class="line">        add_header Content-Encoding gzip;</span><br><span class="line">        root /opt/jumpserver/data/;  # 录像位置, 如果修改安装目录, 此处需要修改</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /static/ &#123;</span><br><span class="line">        root /opt/jumpserver/data/;  # 静态资源, 如果修改安装目录, 此处需要修改</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /socket.io/ &#123;</span><br><span class="line">        proxy_pass       http://localhost:5000/socket.io/;  # 如果coco安装在别的服务器, 请填写它的ip</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /coco/ &#123;</span><br><span class="line">        proxy_pass       http://localhost:5000/coco/;  # 如果coco安装在别的服务器, 请填写它的ip</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /guacamole/ &#123;</span><br><span class="line">        proxy_pass       http://localhost:8081/;  # 如果guacamole安装在别的服务器, 请填写它的ip</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $http_connection;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8080;  # 如果jumpserver安装在别的服务器, 请填写它的ip</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br><span class="line"></span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><h4 id="访问jumpserver"><a href="#访问jumpserver" class="headerlink" title="访问jumpserver"></a>访问jumpserver</h4><p>nginx启动后，浏览器访问<code>http:ip:nginx配置的端口</code>即可访问，默认账密<code>admin/admin</code></p><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p>如果登录客户端是 macOS 或 Linux, 登录语法如下<br>$ ssh -p2222 admin@192.168.244.144<br>$ sftp -P2222 admin@192.168.244.144<br>密码: admin</p><p>如果登录客户端是 Windows, Xshell Terminal 登录语法如下<br>$ ssh admin@192.168.244.144 2222<br>$ sftp admin@192.168.244.144 2222<br>密码: admin<br>如果能登陆代表部署成功</p><p>以上，完~</p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><blockquote><p><a href="http://docs.jumpserver.org/zh/docs/setup_by_centos.html" target="_blank" rel="noopener">官方安装指导</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;centos7安装jumpserver堡垒机&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="Jumpserver" scheme="http://tokyle.com/tags/Jumpserver/"/>
    
  </entry>
  
  <entry>
    <title>几个linux命令小技巧</title>
    <link href="http://tokyle.com/2019/05/15/%E5%87%A0%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://tokyle.com/2019/05/15/几个linux命令小技巧/</id>
    <published>2019-05-16T01:36:27.000Z</published>
    <updated>2019-05-16T01:39:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些Linux技巧型命令</p><a id="more"></a><p>可能不是太常用，算是可以提高效率的一点点方式，简单实践了一下。</p><h3 id="光标类"><a href="#光标类" class="headerlink" title="光标类"></a>光标类</h3><p>不同于vi/vim下的<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>上下左右移动，这边介绍的是普通模式下的光标移动。</p><h4 id="删除从行开头到光标处的命令"><a href="#删除从行开头到光标处的命令" class="headerlink" title="删除从行开头到光标处的命令"></a>删除从行开头到光标处的命令</h4><p><code>ctrl + u</code><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /home/;ll光标处</span><br></pre></td></tr></table></figure></p><p>按下<code>ctrl+u</code>，会将<code>cd /home/;ll</code>该行删除</p><h4 id="删除从光标到结尾处的命令"><a href="#删除从光标到结尾处的命令" class="headerlink" title="删除从光标到结尾处的命令"></a>删除从光标到结尾处的命令</h4><p><code>ctrl + k</code><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# cd /home/;光标处ll</span><br></pre></td></tr></table></figure></p><p>按下<code>ctrl+k</code>，会将<code>ll</code>删除</p><h4 id="删除一个词（空格隔开的字符串）"><a href="#删除一个词（空格隔开的字符串）" class="headerlink" title="删除一个词（空格隔开的字符串）"></a>删除一个词（空格隔开的字符串）</h4><p><code>ctrl + w</code><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ls -al光标处</span><br></pre></td></tr></table></figure></p><p>按下<code>ctrl w</code>，会将<code>-al</code>删除</p><h3 id="资源查看"><a href="#资源查看" class="headerlink" title="资源查看"></a>资源查看</h3><h4 id="各目录子目录占用空间大小"><a href="#各目录子目录占用空间大小" class="headerlink" title="各目录子目录占用空间大小"></a>各目录子目录占用空间大小</h4><p>tips: <strong>-h参数会将结果展示为人类可读的方式，所以结果会加上M、G这样的单位</strong></p><p>查看当前磁盘占用情况，这个都知道<code>df -h</code><br>查看目录各子目录占用空间大小，例如查看<code>/home</code>下各子目录空间大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# du -h --max-depth=1 /home/</span><br><span class="line">91M/home/ngrinder</span><br><span class="line">0/home/docker</span><br><span class="line">143M/home/</span><br></pre></td></tr></table></figure></p><p>查看内存情况：<code>free -h</code></p><h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><h4 id="获取pid"><a href="#获取pid" class="headerlink" title="获取pid"></a>获取pid</h4><p>很多时候，我们需要查看运行进行的PID，无论是进行分析还是杀进程。。以前的常用做法是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep zabbix_server</span><br></pre></td></tr></table></figure></p><p>这样，拿到<code>zabbix_server</code>这个进程的PID，同时会输出一堆信息，如果我们只想要一个pid，也有办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pgrep zabbix_server</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">pidof zabbix_server</span><br></pre></td></tr></table></figure></p><h4 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h4><p>之前杀进程，比较常用的就是<code>ps -ef|grep XX</code>拿到pid，然后kill掉，或者写的复杂点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 `ps -ef | grep zabbix | grep -v grep | awk &apos;&#123;print $2&#125;&apos;`</span><br></pre></td></tr></table></figure></p><p>现在有比较简单的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill zabbix</span><br></pre></td></tr></table></figure></p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="清空文件内容"><a href="#清空文件内容" class="headerlink" title="清空文件内容"></a>清空文件内容</h4><p>之前清空日志文件的内容，一直很头疼，文件太大根本进不去，sed和awk又没那么熟练，现在找到个比较快捷的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;zabbix_server.log</span><br></pre></td></tr></table></figure></p><p>完成清空<br>效果展示：<br>清空前：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zabbix]# ll</span><br><span class="line">total 108</span><br><span class="line">-rw-rw-r-- 1 zabbix zabbix 50071 May 16 08:55 zabbix_server.log</span><br></pre></td></tr></table></figure></p><p>清空：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost zabbix]# &gt;zabbix_server.log</span><br><span class="line"></span><br><span class="line">[root@localhost zabbix]# ll</span><br><span class="line">total 56</span><br><span class="line">-rw-rw-r-- 1 zabbix zabbix     0 May 16 08:57 zabbix_server.log</span><br></pre></td></tr></table></figure></p><p>linux是个非常有意思的系统啊，有事没事多多研究<code>grep</code>、<code>sed</code>、<code>awk</code>以及<code>vi/vim</code>啊！</p><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些Linux技巧型命令&lt;/p&gt;
    
    </summary>
    
      <category term="skill" scheme="http://tokyle.com/categories/skill/"/>
    
    
      <category term="Linux" scheme="http://tokyle.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装docker</title>
    <link href="http://tokyle.com/2019/05/14/centos7%E5%AE%89%E8%A3%85docker/"/>
    <id>http://tokyle.com/2019/05/14/centos7安装docker/</id>
    <published>2019-05-14T06:21:34.000Z</published>
    <updated>2019-05-14T06:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Centos7安装docker</p><a id="more"></a><p>容器化大潮，微服务最后一里路，至少掌握docker的基本使用</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>查看内核版本，大于3.10才能安装</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p><code>更新yum源</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p><code>卸载旧版本</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker docker-common docker-selinux docker-engine -y</span><br></pre></td></tr></table></figure><p><code>安装需要的安装包</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p><code>配置yum源（防止万里长城，配置阿里yum源）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p><code>查看可选择版本</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><p><code>安装最新稳定版（repo中默认开启了stable仓库）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><p><code>或者指定版本</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce-18.06.3.ce</span><br></pre></td></tr></table></figure><p><code>启动并加自启动</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p><code>验证</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker]# docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.6</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        481bc77156</span><br><span class="line"> Built:             Sat May  4 02:34:58 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.6</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       481bc77</span><br><span class="line">  Built:            Sat May  4 02:02:43 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure></p><p>有client和server表示安装成功</p><p>本篇算是容器化的第一篇，计划后续好好折腾折腾docker和K8S，去年欠下的，要补回来了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Centos7安装docker&lt;/p&gt;
    
    </summary>
    
      <category term="容器化" scheme="http://tokyle.com/categories/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="docker" scheme="http://tokyle.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>修改Linux时间</title>
    <link href="http://tokyle.com/2019/04/28/%E4%BF%AE%E6%94%B9Linux%E6%97%B6%E9%97%B4/"/>
    <id>http://tokyle.com/2019/04/28/修改Linux时间/</id>
    <published>2019-04-28T05:37:01.000Z</published>
    <updated>2019-04-28T05:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>linux修改系统时间</p><a id="more"></a><h3 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s 04/28/19</span><br></pre></td></tr></table></figure><p>修改日期为：2019/04/28</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s 11:28:00</span><br></pre></td></tr></table></figure><p>修改时间为11:28:00</p><p>或者一次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date -s &quot;2019-04-28 11:28:00&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock -w</span><br></pre></td></tr></table></figure><p>将时间写入bios避免重启失效</p><h3 id="同步网络时间"><a href="#同步网络时间" class="headerlink" title="同步网络时间"></a>同步网络时间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ntp</span><br></pre></td></tr></table></figure><p>ntp常用服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">中国国家授时中心：210.72.145.44</span><br><span class="line">NTP服务器(上海) ：ntp.api.bz</span><br><span class="line">美国：time.nist.gov </span><br><span class="line">复旦：ntp.fudan.edu.cn </span><br><span class="line">微软公司授时主机(美国) ：time.windows.com </span><br><span class="line">台警大授时中心(台湾)：asia.pool.ntp.org</span><br></pre></td></tr></table></figure></p><h4 id="同步时间："><a href="#同步时间：" class="headerlink" title="同步时间："></a>同步时间：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -dv ntp.api.bz</span><br></pre></td></tr></table></figure><p>同步完成之后，发现时间有点不对，12h误差<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# date</span><br><span class="line">Sun Apr 28 01:20:14 EDT 2019</span><br></pre></td></tr></table></figure></p><p>查了下，<code>EDT</code>是美国东部时间，需要改成北京时间</p><h3 id="时区修改"><a href="#时区修改" class="headerlink" title="时区修改"></a>时区修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/localtime /etc/localtime.bak </span><br><span class="line"></span><br><span class="line">ln -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime </span><br><span class="line"></span><br><span class="line">date</span><br></pre></td></tr></table></figure><p>完成~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux修改系统时间&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux" scheme="http://tokyle.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter调用python完成HmacSHA256加密处理</title>
    <link href="http://tokyle.com/2019/04/23/Jmeter%E8%B0%83%E7%94%A8python%E5%AE%8C%E6%88%90HmacSHA256%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86/"/>
    <id>http://tokyle.com/2019/04/23/Jmeter调用python完成HmacSHA256加密处理/</id>
    <published>2019-04-23T07:18:16.000Z</published>
    <updated>2019-04-23T07:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jmeter调用python完成HmacSHA256加密处理</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>同事有个需求，一个获取人员信息的接口，请求头里面需要有一个<code>sign</code>参数，这个参数是几个实时获取的参数最后进行Hmachash256加密之后生成的，具体示例：<br>获取用户接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://192.168.0.1/api/user?userName=20190101&amp;tenant=testtenant</span><br></pre></td></tr></table></figure></p><p>请求头：</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>Authorization</td><td>Bearer ${token}</td></tr><tr><td>content-type</td><td>application/json</td></tr><tr><td>tenant</td><td>testtenant</td></tr><tr><td>timestamp</td><td>当前时间戳</td></tr><tr><td>randoms</td><td>随机数</td></tr><tr><td>sign</td><td>签名</td></tr></tbody></table><p>其中签名生成规则如下：<br><code>tenanttesttenantuserName20190101tenanttesttenanttimestamp当前时间戳randoms随机数</code><br>这一长串再使用指定密码，进行<strong>HmacSHA256</strong>加密，生成的密文即为<code>sign</code></p><blockquote><p><a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">加密工具</a></p></blockquote><h3 id="jmeter方案"><a href="#jmeter方案" class="headerlink" title="jmeter方案"></a>jmeter方案</h3><p>因为后期接口要进行性能测试，所以还是选了jmeter进行性能测试，按照接口描述的先排序再加密，在jmeter中，首先想到的就是通过<code>beanshell</code>外部实现，然后生成对应jar包，在jmeter中引用，然后就有个问题，我java太菜了。。。没办法，折腾python。</p><h4 id="jmeter中使用python脚本"><a href="#jmeter中使用python脚本" class="headerlink" title="jmeter中使用python脚本"></a>jmeter中使用python脚本</h4><p>在jmeter中使用python脚本，搜了下，找到三种方式：<br><strong>1</strong>. 使用Jython包 </p><blockquote><p><a href="https://www.jython.org/downloads.html" target="_blank" rel="noopener">下载地址</a><br>下载 <code>Download Jython 2.7.0 - Standalone Jar</code> 包，放到jmeter/lib/目录下，重启jmeter，就能在<code>sampler</code>中找到<code>JSR223 Sampler</code>，里面就有python，但是，是python2.7，所以，对我没啥用</p></blockquote><p><strong>2</strong>. jmeter-functions-execute-python-script-1.0.jar，网上有个这个包，可以从函数助手那边进去执行python脚本，试了下失败了，就不介绍了，有兴趣可以百度下咋弄</p><p><strong>3</strong>. <strong>OS Process Sampler</strong>，使用这个组件可以执行脚本，后面着重介绍这个，使用了下，很强的组件，理论上，只要你脚本能力强，可以获得各种想要的（终于看到摆脱java的希望了。。）</p><h4 id="OS-Process-Sampler"><a href="#OS-Process-Sampler" class="headerlink" title="OS Process Sampler"></a>OS Process Sampler</h4><p>这个组件可以用来启动一个可执行程序，由于是通过命令行方式启动，所以我们可以用任何语言编写一个测试用的可执行程序(比如Linux的sh脚本)。在该可执行程序中调用我们的接口，并把返回的原始数据输出而交由JMeter做后续解析判断。</p><p>位置：<code>/sampler/OS Process Sampler</code><br>这个组件有几栏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command: 可执行文件（windows系统建议放.bat脚本或exe文件，linux系统放shell；干过windows下放了shell直接报非可执行文件。。）</span><br><span class="line"></span><br><span class="line">working directory：工作目录，默认是jmeterbin 目录，可指定</span><br><span class="line">command parameters：参数，如果脚本需要传参，可在这边传</span><br></pre></td></tr></table></figure></p><p>既然这个组件可以执行bat文件，那我们在bat文件里面再调python文件不就实现了嘛~</p><h3 id="加密实现"><a href="#加密实现" class="headerlink" title="加密实现"></a>加密实现</h3><p>前面说了，思路就是使用<code>OS Process Sampler</code>来调用<code>.bat</code>文件，然后在<code>.bat</code>文件中再调python文件，实现加密，脚本如下：</p><h4 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h4><p>OS Process Sampler中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command: oss.bat路径</span><br><span class="line"></span><br><span class="line">working directory：默认</span><br><span class="line">command parameters：secret，userName，tenant（三个传参，方便参数化）</span><br></pre></td></tr></table></figure></p><p>同时，在<code>OS Process Sampler</code>后追加三个正则表达式提取器，分别获取<strong>时间戳</strong>，<strong>随机数</strong>，<strong>签名</strong></p><p>正则表达式提取器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">引用名称：sign</span><br><span class="line">正则表达式：sign:(.+?)&lt;&gt;</span><br><span class="line">模板：$1$</span><br><span class="line">匹配数字: 1</span><br></pre></td></tr></table></figure></p><p>时间戳和随机数相同方式获取</p><h4 id="oss-bat"><a href="#oss-bat" class="headerlink" title="oss.bat"></a>oss.bat</h4><p>oss.bat:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set secret = %1</span><br><span class="line">set userName = %2</span><br><span class="line">set tenant = %3</span><br><span class="line"></span><br><span class="line">python  E:\py_workspace\hashtest\JmeterSSTest.py  %*</span><br></pre></td></tr></table></figure></p><p>Windows批处理文件，首先获取传进去的三个参数，再将这三个参数作为入参传给python脚本</p><h4 id="JmeterSSTest-py"><a href="#JmeterSSTest-py" class="headerlink" title="JmeterSSTest.py"></a>JmeterSSTest.py</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*-coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">@author: kyle</span><br><span class="line">@time: 2019/4/23 12:44</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import hashlib</span><br><span class="line">import hmac</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"># 定义传参，按顺序，secret,userName,tenant</span><br><span class="line">secret = sys.argv[1]</span><br><span class="line">userName = sys.argv[2]</span><br><span class="line">tenant = sys.argv[3]</span><br><span class="line"></span><br><span class="line"># 获取当前时间戳</span><br><span class="line">timestamp = int(time.time())</span><br><span class="line"></span><br><span class="line"># 获取随机数</span><br><span class="line">randoms = random.randint(0, 999999999)</span><br><span class="line"></span><br><span class="line"># 获取sign</span><br><span class="line">strsign = str(u&apos;tenant&apos; + str(tenant) + u&apos;userName&apos; + str(userName) + u&apos;tenant&apos; + str(tenant) +</span><br><span class="line">               u&apos;timestamp&apos; + str(timestamp) + u&apos;randoms&apos; + str(randoms))</span><br><span class="line"></span><br><span class="line"># hmacsha256加密</span><br><span class="line">intsign = hmac.new(bytes(str(secret), encoding=&apos;utf-8&apos;), bytes(str(strsign), encoding=&apos;utf-8&apos;),</span><br><span class="line">                    digestmod=hashlib.sha256).digest()</span><br><span class="line"></span><br><span class="line"># 二进制转义</span><br><span class="line">sign = intsign.hex()</span><br><span class="line"></span><br><span class="line">print(u&apos;timestamp&apos; + &apos;:&apos; + str(timestamp) + &apos;&lt;&gt;&apos;)</span><br><span class="line">print(u&apos;randoms&apos; + &apos;:&apos; + str(randoms) + &apos;&lt;&gt;&apos;)</span><br><span class="line">print(u&apos;sign&apos; + &apos;:&apos; + str(sign) + &apos;&lt;&gt;&apos;)</span><br></pre></td></tr></table></figure><p>脚本就不解释了，不难</p><h3 id="完整jmeter结构"><a href="#完整jmeter结构" class="headerlink" title="完整jmeter结构"></a>完整jmeter结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 获取token接口（简单控制器）</span><br><span class="line">-- http信息头管理器</span><br><span class="line">    -- http请求</span><br><span class="line">    -- 响应断言</span><br><span class="line">    --查看结果树</span><br><span class="line">    -- JSON Extractor</span><br><span class="line">-- 加密sign</span><br><span class="line">   -- OS Process Sampler</span><br><span class="line">     -- 正则提取 timestamp</span><br><span class="line">     -- 正则提取 randoms</span><br><span class="line">     -- 正则提取 sign</span><br><span class="line">-- 获取用户接口</span><br><span class="line">   -- http信息头管理器</span><br><span class="line">   -- http请求</span><br><span class="line">   -- 查看结果树</span><br><span class="line">   -- 响应断言</span><br></pre></td></tr></table></figure><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jmeter调用python完成HmacSHA256加密处理&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="jmeter" scheme="http://tokyle.com/tags/jmeter/"/>
    
      <category term="python3" scheme="http://tokyle.com/tags/python3/"/>
    
      <category term="HmacSHA256" scheme="http://tokyle.com/tags/HmacSHA256/"/>
    
  </entry>
  
  <entry>
    <title>Android性能测试——内存</title>
    <link href="http://tokyle.com/2019/04/18/Android%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E5%86%85%E5%AD%98/"/>
    <id>http://tokyle.com/2019/04/18/Android性能测试——内存/</id>
    <published>2019-04-18T09:06:22.000Z</published>
    <updated>2019-04-18T09:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android性能测试——内存</p><a id="more"></a><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>通常情况下我们说的内存都是指手机的RAM，RAM主要包括：</p><ul><li>寄存器：速度最快的存储</li><li>栈（stack）：在jvm中栈用来存储一些对象的引用、局部变量以及计算过程的中间数据，在方法退出后那么这些变量也会被销毁。它的存储比堆快得多，只比CPU里的寄存器慢</li><li>堆（Heap）：用来存储程序中的一些对象，比如你用new关键字创建的对象，它就会被存储在堆内存中，但是这个对象在堆内存中的首地址会存储在栈中；堆中分配的内存，由java虚拟机自动垃圾回收器（GC）来管理。<br>关于GC的，记得之前稍微记过点<a href="http://tokyle.com/%2F2018%2F11%2F02%2FJVM%E5%86%85%E5%AD%98%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%2F">JVM内存性能问题定位</a></li><li>… …</li></ul><h3 id="Dalvik和JVM"><a href="#Dalvik和JVM" class="headerlink" title="Dalvik和JVM"></a>Dalvik和JVM</h3><p>Davlik虚拟机（DVM）是Android系统在java虚拟机（JVM）基础上优化得到的，DVM是基于寄存器的，而JVM是基于栈的，由于寄存器更高效，DVM性能相比JVM要好一点。</p><h3 id="Android中进程的堆内存"><a href="#Android中进程的堆内存" class="headerlink" title="Android中进程的堆内存"></a>Android中进程的堆内存</h3><p>RAM作为进程运行不可或缺的资源，对Android系统性能和稳定性有着决定性影响，RAM的一部分被操作系统留作他用，比如显存等等，当然这个程序员无法干预，我们也不必过多地关注它。进程空间中的heap空间是我们需要重点关注的。heap空间完全由程序员控制，我们使用的C++ new和java new所申请的空间都是heap空间， C/C++申请的内存空间在native heap中，而java申请的内存空间则在dalvik heap中。</p><h3 id="Android的java程序为什么容易OOM"><a href="#Android的java程序为什么容易OOM" class="headerlink" title="Android的java程序为什么容易OOM"></a>Android的java程序为什么容易OOM</h3><p>这个是因为Android系统对dalvik的vmheapsize作了硬性限制，当java进程申请的java空间超过阈值时，就会抛出OOM异常（这个阈值可以是48M、24M、16M等，视机型而定），可以通过adb shell getprop | grep dalvik.vm.heapgrowthlimit查看此值。也就是说，程序发生OMM并不表示RAM不足，而是因为程序申请的java heap对象超过了dalvik vmheapgrowthlimit。也就是说，在RAM充足的情况下，也可能发生OOM。</p><p>这样的设计似乎有些不合理，但是Google为什么这样做呢？这样设计的目的是为了让Android系统能同时让比较多的进程常驻内存，这样程序启动时就不用每次都重新加载到内存，能够给用户更快的响应。迫使每个应用程序使用较小的内存，移动设备非常有限的RAM就能使比较多的app常驻其中。但是有一些大型应用程序是无法忍受vmheapgrowthlimit的限制的</p><p>实际上<code>dalvik.vm.heapgrowthlimit</code>和<code>dalvik.vm.heapsize</code>都是java虚拟机的最大内存限制，应用如果不想在dalvikheap达到heapgrowthlimit限制的时候出现OOM，需要在Manifest中的application标签中声明<code>android:largeHeap=“true”</code>，声明后应用dalvik heap达到heapsize的时候才会出现OOM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; adb shell getprop | grep dalvik.vm.heapgrowthlimit</span><br><span class="line">[dalvik.vm.heapgrowthlimit]: [192m]</span><br><span class="line"></span><br><span class="line">&#123;lamb&#125; adb shell getprop | grep dalvik.vm.heapsize</span><br><span class="line">[dalvik.vm.heapsize]: [512m]</span><br></pre></td></tr></table></figure><h3 id="Android内存采集"><a href="#Android内存采集" class="headerlink" title="Android内存采集"></a>Android内存采集</h3><p><strong>dumpsys</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; adb shell dumpsys meminfo com.kuaikan.comic                                                                 </span><br><span class="line">Applications Memory Usage (in Kilobytes):                                                                          </span><br><span class="line">Uptime: 467997959 Realtime: 2137774428                                                                             </span><br><span class="line">** MEMINFO in pid 15956 [com.kuaikan.comic] **                                                                     </span><br><span class="line">                   Pss  Private  Private  SwapPss     Heap     Heap     Heap                                       </span><br><span class="line">                 Total    Dirty    Clean    Dirty     Size    Alloc     Free                                       </span><br><span class="line">                ------   ------   ------   ------   ------   ------   ------                                       </span><br><span class="line">  Native Heap    98778    98668       64      406   127872   120081     7790                                       </span><br><span class="line">  Dalvik Heap     8247     8204       24       52    20111     7823    12288                                       </span><br><span class="line"> Dalvik Other     2505     2496        4        2                                                                  </span><br><span class="line">        Stack     2464     2464        0        0  </span><br><span class="line">       Ashmem      258      256        0        0   </span><br><span class="line">      Gfx dev    24048    23372      676        0  </span><br><span class="line">    Other dev       45        8       28        0  </span><br><span class="line">     .so mmap     4157     2036      716       26  </span><br><span class="line">    .jar mmap        8        8        0        0  </span><br><span class="line">    .apk mmap     9900     9676      160        0  </span><br><span class="line">    .dex mmap    20863    17524     2380        0  </span><br><span class="line">    .oat mmap     2731        0      384        0  </span><br><span class="line">    .art mmap     8290     6736      148       12   </span><br><span class="line">   Other mmap       29        4        0        0                                                                  </span><br><span class="line">   EGL mtrack    38636    38636        0        0                                                                  </span><br><span class="line">    GL mtrack     5480     5480        0        0   </span><br><span class="line">      Unknown     6031     6016        0        3  </span><br><span class="line">        TOTAL   232971   221584     4584      501   147983   127904    20078  </span><br><span class="line"> App Summary                                                                                                       </span><br><span class="line">                       Pss(KB)   </span><br><span class="line">                        ------    </span><br><span class="line">           Java Heap:    15088   </span><br><span class="line">         Native Heap:    98668    </span><br><span class="line">                Code:    32884   </span><br><span class="line">               Stack:     2464    </span><br><span class="line">            Graphics:    68164   </span><br><span class="line">       Private Other:     8900   </span><br><span class="line">              System:     6803     </span><br><span class="line">               TOTAL:   232971       TOTAL SWAP PSS:      501   </span><br><span class="line"> Objects                                                                                                           </span><br><span class="line">               Views:      927         ViewRootImpl:        2  </span><br><span class="line">         AppContexts:       11           Activities:        1   </span><br><span class="line">              Assets:        8        AssetManagers:        5    </span><br><span class="line">       Local Binders:       89        Proxy Binders:       42    </span><br><span class="line">       Parcel memory:       56         Parcel count:      226   </span><br><span class="line">    Death Recipients:        5      OpenSSL Sockets:       10  </span><br><span class="line">            WebViews:        0       </span><br><span class="line"> SQL                                                                                                               </span><br><span class="line">         MEMORY_USED:     3886    </span><br><span class="line">  PAGECACHE_OVERFLOW:     1026          MALLOC_SIZE:      309</span><br><span class="line"> DATABASES                                                                                                      </span><br><span class="line">      pgsz     dbsz   Lookaside(b)          cache  Dbname </span><br><span class="line">         4       52            109       54/31/17  /data/user/0/com.kuaikan.comic/databases/bugly_db_    </span><br><span class="line">         4      100             76        83/57/9  /data/user/0/com.kuaikan.comic/databases/kkmh-room.db      </span><br><span class="line">         4       12                         0/0/0    (attached) temp   </span><br><span class="line">         4      100            109      147/26/14  /data/user/0/com.kuaikan.comic/databases/kkmh-room.db (1)       </span><br><span class="line">         4       20             24         1/16/2  /data/user/0/com.kuaikan.comic/databases/ThrowalbeLog.db        </span><br><span class="line">         4      564             88       52/43/25  /data/user/0/com.kuaikan.comic/databases/kkmh.db    </span><br><span class="line">         4       20            109      185/24/10  /data/user/0/com.kuaikan.comic/databases/btechainh.db           </span><br><span class="line">         4       20             45         6/19/5  /data/user/0/com.kuaikan.comic/databases/sharesdk.db            </span><br><span class="line">         4       20             52        23/24/6  /data/user/0/com.kuaikan.comic/databases/aa_in_techain.db       </span><br><span class="line">         4       36             92      106/41/25  /data/user/0/com.kuaikan.comic/databases/techain_d.db           </span><br><span class="line">         4       52             47         2/17/3  /data/user/0/com.kuaikan.comic/databases/volcano_ac_techain.db  </span><br><span class="line">         4       20             29         1/16/2  /data/user/0/com.kuaikan.comic/databases/tracker.db   </span><br><span class="line">         4       60             97         3/21/5  /data/user/0/com.kuaikan.comic/databases/tes_db     </span><br><span class="line">         4       16             52        12/17/5  /storage/emulated/0/Mob/comm/dbs/.dh </span><br><span class="line">         4       20             65        16/19/5  /data/user/0/com.kuaikan.comic/databases/x24_techain_typhoon.db </span><br><span class="line">         4       76             38        54/17/3  /data/user/0/com.kuaikan.comic/databases/com.kuaikan.comic      </span><br><span class="line">         4       28             50         5/18/4  /data/user/0/com.kuaikan.comic/databases/tcyrtsdb.db            </span><br><span class="line">         4       44             80        10/21/7  /data/user/0/com.kuaikan.comic/databases/beacon_tbs_db   </span><br><span class="line">         4       20             26         1/16/2  /data/user/0/com.kuaikan.comic/databases/kk-push </span><br><span class="line"> Asset Allocations                                                                            </span><br><span class="line">    zip:/data/user/0/com.tencent.mm/app_tbs/core_share/res.apk:/resources.arsc: 97K</span><br></pre></td></tr></table></figure><h4 id="字段含义"><a href="#字段含义" class="headerlink" title="字段含义"></a>字段含义</h4><ul><li><p>私有内存(Dirty and Clean)<br>进程独占内存。也就是进程销毁时可以回收的内存容量。通常private Dirty内存是最重要的部分，因为只被自己进程使用。Dirty内存是已经被修改的内存页，因此必须常驻内存（因为没有swap）；Clean内存是已经映射持久文件使用的内存页（例如正在被执行的代码），因此一段时间不使用的话就可以置换出去。</p></li><li><p>实际使用内存(PSS)<br>将跨进程共享页也加入进来， 进行按比例计算PSS。这样能够比较准确的表示<strong>进程占用的实际物理内存</strong></p></li><li><p>Native Heap Alloc<br>JNI层的内存分配</p></li><li><p>Dalvik Heap Alloc<br>Java层的内存分配</p></li></ul><p>这两个值一直增长，应用程序可能出现了内存泄漏</p><h3 id="测试Android内存"><a href="#测试Android内存" class="headerlink" title="测试Android内存"></a>测试Android内存</h3><p><strong>1.</strong> monkey压力测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p com.kuaikan.comic --ignore-crashes --ignore-timeouts --ignore-security-exceptions  --ignore-native-crashes --pct-touch 70 --pct-motion 25 --pct-majornav 5 -v -v -v --throttle 300 100000</span><br></pre></td></tr></table></figure><p><strong>2.</strong> adb shell dumpsys meminfo监控内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys meminfo com.kuaikan.comic</span><br></pre></td></tr></table></figure><p>如发现内存过大，保存<strong>HPROF文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am dumpheap com.kuaikan.comic /data/local/tmp/1.hprof</span><br></pre></td></tr></table></figure></p><p><strong>3.</strong> 格式化<br><code>D:\dev\android\android-sdk-windows\platform-tools</code>下有个<strong>hprof-conv.exe</strong>工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hprof-conv 1.hprof 2.hprof</span><br></pre></td></tr></table></figure></p><p><strong>4.</strong> 用MAT分析<br><a href="https://pan.baidu.com/s/1mF70g1IyS8wYIuXaNx7vaQ" target="_blank" rel="noopener">MAT度娘盘地址（提取码：jidc）</a></p><h3 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h3><h4 id="Android沙盒"><a href="#Android沙盒" class="headerlink" title="Android沙盒"></a>Android沙盒</h4><p>由于Android是建立在Linux系统之上的，所以Android系统继承了Linux的 类Unix继承进程隔离机制与最小权限原则，并且在原有Linux的进程管理基础上对UID的使用做了改进，形成了Android应用的”沙箱“机制。</p><p>普通的Linux中启动的应用通常和登陆用户相关联，同一用户的UID相同。但是Android中给不同的应用都赋予了不同的UID，这样不同的应用将不能相互访问资源。对应用而言，这样会更加封闭，安全。</p><p>在Android系统中，应用（通常）都在一个独立的沙箱中运行，即每一个Android应用程序都在它自己的进程中运行，都拥有一个独立的Dalvik虚拟机实例。Dalvik经过优化，允许在有限的内存中同时高效地运行多个虚拟机的实例，并且每一个Dalvik应用作为一个独立的Linux进程执行。Android这种基于Linux的进程“沙箱”机制，是整个安全设计的基础之一。</p><p>简单点说就是在Android的世界中每一个应用相当与一个Linux中的用户，他们相互独立，不能相互共享与访问，（这也就解释了Android系统中为什么需要进程间通信），正是由于沙盒机制的存在最大程度的保护了应用之间的安全，但是也带来了每一个应用所分配的内存大小是有限制的问题。</p><h4 id="获取当前页面activity"><a href="#获取当前页面activity" class="headerlink" title="获取当前页面activity"></a>获取当前页面activity</h4><p>通过<code>adb shell dumpsys window |findstr mCurrent</code>，捕获当前页面的activity<br>通过<code>adb shell dumpsys activity|findstr &quot;realActivity&quot;</code>, 捕获到当前页面的activity</p><h4 id="频繁GC的可能原因"><a href="#频繁GC的可能原因" class="headerlink" title="频繁GC的可能原因"></a>频繁GC的可能原因</h4><ol><li><p>Memory Churn（内存抖动），内存抖动是因为大量的对象被创建又在短时间内马上被释放</p></li><li><p>瞬间产生大量的对象会严重占用Young Generation的内存区域，当达到阀值，剩余空间不够的时候，也会触发GC。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加 Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。</p></li></ol><h3 id="优秀Android博客"><a href="#优秀Android博客" class="headerlink" title="优秀Android博客"></a>优秀Android博客</h3><blockquote><p><a href="https://www.jianshu.com/p/2bceb820b435?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">Android性能优化-详解内存优化来龙去脉</a><br><a href="https://www.jianshu.com/p/0df5ad0d2e6a" target="_blank" rel="noopener">Android性能优化&amp;内存篇</a><br><a href="https://blog.csdn.net/carson_ho/article/details/79549417" target="_blank" rel="noopener">一份详细&amp;全面内存优化指南</a></p></blockquote><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android性能测试——内存&lt;/p&gt;
    
    </summary>
    
      <category term="性能测试" scheme="http://tokyle.com/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Android" scheme="http://tokyle.com/tags/Android/"/>
    
      <category term="adb" scheme="http://tokyle.com/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>记一次Linux磁盘清理</title>
    <link href="http://tokyle.com/2019/04/18/%E8%AE%B0%E4%B8%80%E6%AC%A1Linux%E7%A3%81%E7%9B%98%E6%B8%85%E7%90%86/"/>
    <id>http://tokyle.com/2019/04/18/记一次Linux磁盘清理/</id>
    <published>2019-04-18T07:20:41.000Z</published>
    <updated>2019-04-18T07:21:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次Linux清磁盘</p><a id="more"></a><p>最近发现有台机器磁盘满了，搜了下，nohub.out占完了</p><p>然后果断的rm -rf nohub.out，以为结束了，然而df -h看了下，一点都没释放。。。</p><p>因为被删除的文件在删除的时侯还是进程在操作(打开、访问等)的缘故，rm只完成了在磁盘上文件实体的释放，而类似free list结构中相应的文件系统因进程的操作相应的inode并未释放。</p><p>解决的方法：<br>这样的问题解决起来也很简单，找到操作的进程，kill掉就可以了</p><p>当然，闲得无聊，你重启机器，也没话说<br>(最后，别忘了重启你的程序)</p><p>在网上发现两个可以不用停止服务就可清空nohup.out的命令。<br>第一种：cp /dev/null nohup.out<br>第二种：cat /dev/null &gt; nohup.out</p><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次Linux清磁盘&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux" scheme="http://tokyle.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7搭建testlink</title>
    <link href="http://tokyle.com/2019/04/16/centos7%E6%90%AD%E5%BB%BAtestlink/"/>
    <id>http://tokyle.com/2019/04/16/centos7搭建testlink/</id>
    <published>2019-04-17T01:51:39.000Z</published>
    <updated>2019-04-17T01:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>centos 7搭建testlink</p><p>帮忙搭建了个testlink，说实话，不习惯用这个</p><a id="more"></a><h3 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h3><p>搭建版本<br><code>testlink</code>: 1.9.19<br><code>MySQL</code>：5.7.25 （mysql -V）<br><code>PHP</code>：5.6 (php -v)<br><code>Linux</code>：Centos 7.6.1810 (Core) （cat /etc/redhat-release）</p><h3 id="前置操作"><a href="#前置操作" class="headerlink" title="前置操作"></a>前置操作</h3><p>升级yum：<code>yum update</code></p><p>关闭防火墙：<code>systemctl  stop   firewalld.service</code><br>防火墙禁止自启动：<code>systemctl   disable   firewalld.service</code></p><p>关闭selinux：<code>sudo sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</code></p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>下载源包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>安装MySQL源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall mysql57-community-release-el7-8.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>检查可选包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql-connectors-community/x86_64 MySQL Connectors Community                  51</span><br><span class="line">mysql-tools-community/x86_64      MySQL Tools Community                       63</span><br><span class="line">mysql57-community/x86_64          MySQL 5.7 Community Server                 267</span><br></pre></td></tr></table></figure><p>可修改配置：<code>/etc/yum.repos.d/mysql-community.repo</code>选择想要安装的版本，将对应<code>enable</code>改为<strong>1</strong></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>启动服务：<code>systemctl start mysqld</code><br>查看服务状态：<code>systemctl status mysqld</code></p><p>配置开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p><h4 id="安装后配置"><a href="#安装后配置" class="headerlink" title="安装后配置"></a>安装后配置</h4><h5 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h5><p>查看原始密码：<code>grep &#39;temporary password&#39; /var/log/mysqld.log</code></p><p>进入控制台<code>mysql -uroot -p</code>，修改密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;yourpwd&apos;;</span><br></pre></td></tr></table></figure></p><p>修改权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;yourpwd&apos; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure></p><h4 id="创建testlink库"><a href="#创建testlink库" class="headerlink" title="创建testlink库"></a>创建testlink库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE testlink;</span><br><span class="line"></span><br><span class="line">CREATE USER ‘testlinkuser‘@‘localhost‘ IDENTIFIED BY ‘yourpwd‘;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON testlink.* TO ‘testlinkuser‘@‘localhost‘ IDENTIFIED BY ‘yourpwd‘ WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure><h3 id="安装Apache"><a href="#安装Apache" class="headerlink" title="安装Apache"></a>安装Apache</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd</span><br></pre></td></tr></table></figure><p>配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i ‘s/^/#&amp;/g‘ /etc/httpd/conf.d/welcome.conf</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/Options Indexes FollowSymLinks/Options FollowSymLinks/&quot; /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure></p><p>启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start httpd.service</span><br><span class="line"></span><br><span class="line">systemctl enable httpd.service</span><br></pre></td></tr></table></figure></p><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><p>直接用yum install php安装的，默认是5.4版本，然而testlink要求至少是<strong>5.5</strong>（这点坑的我，zabbix直接不能和它装一台机器）</p><p>配置yum源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line"></span><br><span class="line">rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br></pre></td></tr></table></figure></p><p>安装<strong>php5.6</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php56 php56-php php56-php-mysqlnd php56-php-gd php56-php-mcrypt php56-php-mbstring php56-php-xml php56-php-cli php56-php-ldap</span><br></pre></td></tr></table></figure><p>修改参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i &quot;s/session.gc_maxlifetime = 1440/session.gc_maxlifetime = 2880/&quot; /opt/remi/php56/root/etc/php.ini</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/max_execution_time = 30/max_execution_time = 120/&quot; /opt/remi/php56/root/etc/php.ini</span><br></pre></td></tr></table></figure></p><h3 id="安装testlink"><a href="#安装testlink" class="headerlink" title="安装testlink"></a>安装testlink</h3><blockquote><p><a href="https://sourceforge.net/projects/testlink/files/" target="_blank" rel="noopener">官网下载地址</a></p></blockquote><p>下载完成后传到linux下（rz…），解压缩到<code>/var/www/html</code>目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf testlink-1.9.19.tar.gz -C /var/www/html</span><br></pre></td></tr></table></figure></p><p>重命名：<code>mv testlink-1.9.19 testlink</code></p><p>创建<strong>upload_area</strong>：<code>mkdir /var/www/html/upload_area</code></p><p>修改项目属主以及日志文件权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chown -R apache:apache /var/www/html/testlink</span><br><span class="line"></span><br><span class="line">chmod -R 755 /var/www/html/testlink/logs</span><br></pre></td></tr></table></figure></p><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>首先是创建（直接把示例文件备份重命名）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /var/www/html/testlink/custom_config.inc.php.example/var/www/html/testlink/custom_config.inc.php</span><br></pre></td></tr></table></figure></p><p>修改配置(日志路径等)可直接vim进入之后查找<code>?log_path</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// $tlCfg-&gt;log_path = ‘/var/testlink-ga-testlink-code/logs/‘; /* unix example */</span><br><span class="line">// $g_repositoryPath = ‘/var/testlink-ga-testlink-code/upload_area/‘;  /* unix example */</span><br><span class="line"></span><br><span class="line">$tlCfg-&gt;log_path = ‘/var/www/html/testlink/logs/‘;</span><br><span class="line">$g_repositoryPath = ‘/var/www/html/testlink/upload_area/‘;</span><br><span class="line">$tlCfg-&gt;config_check_warning_mode = ‘SILENT‘;</span><br></pre></td></tr></table></figure></p><p>重启Apache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure></p><h3 id="启动testlink"><a href="#启动testlink" class="headerlink" title="启动testlink"></a>启动testlink</h3><p>浏览器输入<code>http://IP/testlink</code><br>进入安装页面，依次<code>new installation</code>-&gt;<code>agree license</code>-&gt;<code>continue</code>开始一堆校验，继续<code>continue</code>，进入数据库配置页面，依次填写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Database name：testlink（testlink库名）</span><br><span class="line"></span><br><span class="line">Database admin login：root</span><br><span class="line">Database admin password：yourpwd（你MySQL的root密码）</span><br><span class="line"></span><br><span class="line">Testlink DB login：testlinkuser（testlink数据库用户名）</span><br><span class="line">Testlink DB password：yourpwd（你testlink库密码）</span><br></pre></td></tr></table></figure></p><p>填写完成，点击<code>Process Testlink Setup</code><br>结束！</p><h3 id="登录testlink"><a href="#登录testlink" class="headerlink" title="登录testlink"></a>登录testlink</h3><p><code>http://IP/testlink</code><br>默认账密：<code>admin/admin</code></p><p>以上，完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;centos 7搭建testlink&lt;/p&gt;
&lt;p&gt;帮忙搭建了个testlink，说实话，不习惯用这个&lt;/p&gt;
    
    </summary>
    
      <category term="Devops" scheme="http://tokyle.com/categories/Devops/"/>
    
    
      <category term="Centos7" scheme="http://tokyle.com/tags/Centos7/"/>
    
      <category term="testlink" scheme="http://tokyle.com/tags/testlink/"/>
    
  </entry>
  
  <entry>
    <title>adb进阶四 —— dumpsys</title>
    <link href="http://tokyle.com/2019/04/12/adb%E8%BF%9B%E9%98%B6%E5%9B%9B-%E2%80%94%E2%80%94-dumpsys/"/>
    <id>http://tokyle.com/2019/04/12/adb进阶四-——-dumpsys/</id>
    <published>2019-04-12T09:21:17.000Z</published>
    <updated>2019-04-12T09:22:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>adb进阶四 —— dumpsys</p><a id="more"></a><h3 id="dumpsys简介"><a href="#dumpsys简介" class="headerlink" title="dumpsys简介"></a>dumpsys简介</h3><p>Dumpsys用于系统诊断，并提供系统服务状态信息,命令格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys [system serbices]</span><br></pre></td></tr></table></figure></p><h4 id="系统服务查询"><a href="#系统服务查询" class="headerlink" title="系统服务查询"></a>系统服务查询</h4><p>直接运行<code>adb shell dumpsys</code>会输出很多很多信息，可以指定需要检查的服务</p><p>查看系统服务、：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell service list</span><br><span class="line">或者</span><br><span class="line">adb shell dumpsys -l</span><br></pre></td></tr></table></figure></p><p>可以看见<code>cpuinfo</code>，<code>meminfo</code>等服务，因此指定检查的服务示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; adb shell dumpsys cpuinfo</span><br><span class="line">Load: 6.04 / 6.17 / 6.21</span><br><span class="line">CPU usage from 364288ms to 62061ms ago (2019-04-12 16:20:56.605 to 2019-04-12 16:25:58.831):</span><br><span class="line">  99% 28771/com.tencent.tmgp.supercell.clashofclans: 99% user + 0% kernel / faults: 128 minor</span><br><span class="line">  2.4% 1641/system_server: 1.4% user + 0.9% kernel / faults: 5586 minor 1 major</span><br><span class="line">  1.3% 582/android.hardware.sensors@1.0-service: 0.5% user + 0.7% kernel</span><br><span class="line">  0.9% 441/ueventd: 0.6% user + 0.3% kernel</span><br><span class="line">  0.6% 4950/kworker/u16:2: 0% user + 0.6% kernel</span><br><span class="line">  0.5% 5727/kworker/u16:0: 0% user + 0.5% kernel</span><br><span class="line">  0.5% 5679/kworker/u16:5: 0% user + 0.5% kernel</span><br><span class="line">  </span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p><p>命令行参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-h：对于大多数的服务，可以添加-h看到文本的帮助</span><br><span class="line">-c：对于一些服务，可以添加-c查看数据会更友好</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; adb shell dumpsys usb -h</span><br><span class="line">Dump current USB state or issue command:</span><br><span class="line">  ports</span><br><span class="line">  set-port-roles &lt;id&gt; &lt;source|sink|no-power&gt; &lt;host|device|no-data&gt;</span><br><span class="line">  add-port &lt;id&gt; &lt;ufp|dfp|dual|none&gt;</span><br><span class="line">  connect-port &lt;id&gt; &lt;ufp|dfp&gt;&lt;?&gt; &lt;source|sink&gt;&lt;?&gt; &lt;host|device&gt;&lt;?&gt;</span><br><span class="line">    (add ? suffix if mode, power role, or data role can be changed)</span><br><span class="line">  disconnect-port &lt;id&gt;</span><br><span class="line">  remove-port &lt;id&gt;</span><br><span class="line">  reset</span><br></pre></td></tr></table></figure></p><h3 id="包服务查询"><a href="#包服务查询" class="headerlink" title="包服务查询"></a>包服务查询</h3><p>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package [-h] [-f] [—checkin] [cmd]…</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td>打印帮助信息</td></tr><tr><td>-f</td><td>打印intent filter的信息</td></tr><tr><td>–checkin</td><td>打印出已经登记的库、系统功能、安装包</td></tr><tr><td>cmd</td><td>子命令（可以在-h帮助文档中查看有哪些子命令）</td></tr></tbody></table><table><thead><tr><th>cmd子命令</th><th>说明</th></tr></thead><tbody><tr><td>prov[iders]</td><td>获取content providers</td></tr><tr><td>p[ackages]</td><td>获取安装包基本信息</td></tr><tr><td>s[hared-user]</td><td>获取共享用户ID的应用</td></tr><tr><td>m[essages]</td><td>打印运行时收集的信息</td></tr><tr><td>v[erifiers]</td><td>打印包校验信息</td></tr><tr><td>version</td><td>打印数据库版本信息</td></tr><tr><td>write</td><td>写当前位置</td></tr><tr><td>package.name</td><td>输出给定包的信息</td></tr><tr><td>installs</td><td>安装会话的详细信息</td></tr><tr><td>l[ibraries]</td><td>列出已知的共享库</td></tr><tr><td>f[ibraries]</td><td>列出手机的功能</td></tr><tr><td>k[eysets]</td><td>列出各个包的Signing KeySets</td></tr><tr><td>r[esolvers]</td><td>获取intent filter</td></tr><tr><td>perm[issions]</td><td>获取权限</td></tr><tr><td>pref[erred]</td><td>打印包首选项</td></tr><tr><td>preferred-xml [—full]</td><td>打印包首选项，xml格式打印</td></tr></tbody></table><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; adb shell dumpsys package com.kuaikan.comic </span><br><span class="line">Activity Resolver Table: </span><br><span class="line">  Schemes: </span><br><span class="line">      qwallet1104081998:  </span><br><span class="line">        2d32642 com.kuaikan.comic/com.kuaikan.pay.kkb.activity.RechargeCenterActivity filter ba2036f</span><br><span class="line">          Action: &quot;android.intent.action.VIEW&quot;</span><br><span class="line">          Category: &quot;android.intent.category.BROWSABLE&quot; </span><br><span class="line">          Category: &quot;android.intent.category.DEFAULT&quot; </span><br><span class="line">          Scheme: &quot;qwallet1104081998&quot; </span><br><span class="line">      commonqwallet20181030: </span><br><span class="line">        7efe8c0 com.kuaikan.comic/com.kuaikan.pay.cashPay.TranslucentPayActivity filter b5a1d49</span><br><span class="line">          Action: &quot;android.intent.action.VIEW&quot;   </span><br><span class="line">          Category: &quot;android.intent.category.BROWSABLE&quot;  </span><br><span class="line">          Category: &quot;android.intent.category.DEFAULT&quot; </span><br><span class="line">          Scheme: &quot;commonqwallet20181030&quot;   </span><br><span class="line">          Scheme: &quot;commonalipay20181030&quot;   </span><br><span class="line">          Scheme: &quot;commonwx20181030&quot;</span><br><span class="line">          Scheme: &quot;commonpay20181105&quot;</span><br><span class="line">      comicwx201804028:</span><br></pre></td></tr></table></figure></p><h3 id="activity信息查询"><a href="#activity信息查询" class="headerlink" title="activity信息查询"></a>activity信息查询</h3><p>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity [-a] [-c]…</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>包括所有可用的服务器状态</td></tr><tr><td>-c</td><td>包括客户端状态</td></tr><tr><td>-p</td><td>限制输出为给定的包，例如： adb shell dumpsys activity -p com.android.browser</td></tr><tr><td>-h</td><td>打印帮助信息</td></tr><tr><td>cmd</td><td>子命令</td></tr></tbody></table><table><thead><tr><th>cmd子命令</th><th>说明</th></tr></thead><tbody><tr><td>a[ctivities]</td><td>activity堆栈状态</td></tr><tr><td>r[recents]</td><td>最近activity的状态</td></tr><tr><td>b[rodacasts] [package_name] [histpry [-s]]</td><td>广播状态</td></tr><tr><td>i[ntents] [package_name]</td><td>挂起的intent状态</td></tr><tr><td>p[rocesses] [package_name]</td><td>进程状态</td></tr><tr><td>o[om]</td><td>oom管理</td></tr><tr><td>perm[issions]</td><td>url权限授权状态</td></tr><tr><td>prov[iders] [comp_spec…]</td><td>content provider状态</td></tr><tr><td>provider [comp_spec]</td><td>provider客户端状态</td></tr><tr><td>s[ervices] [comp_spec…]</td><td>服务状态</td></tr><tr><td>as[sociations]</td><td>跟踪应用程序的关联</td></tr><tr><td>service [comp_spec]</td><td>服务客户端状态</td></tr><tr><td>package [package_name]</td><td>给的包的所有状态</td></tr><tr><td>all</td><td>转储所有的activityes</td></tr><tr><td>top</td><td>转储栈顶的activity</td></tr><tr><td>write</td><td>写入所有挂起状态存储</td></tr><tr><td>track-associations</td><td>允许会话跟踪</td></tr><tr><td>untrack-associations</td><td>禁用和明确会话跟踪，命令参数可能也是一个comp_spec 转储的activity</td></tr></tbody></table><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取当前页面UI信息</span><br><span class="line">adb shell dumpsys activity top</span><br><span class="line"></span><br><span class="line"># 获取当前页面的Activity</span><br><span class="line">adb shell dumpsys activity top | findstr ACTIVITY</span><br></pre></td></tr></table></figure></p><h3 id="网络信息查询"><a href="#网络信息查询" class="headerlink" title="网络信息查询"></a>网络信息查询</h3><table><thead><tr><th>子命令</th><th>说明</th><th>命令格式</th></tr></thead><tbody><tr><td>connectivity</td><td>网络连接</td><td>adb shell dumpsys connectivity</td></tr><tr><td>netpolicy</td><td>网络策略</td><td>adb shell dumpsys netpolicy</td></tr><tr><td>netstats</td><td>网络状态</td><td>adb shell dumpsys netstats</td></tr><tr><td>network_management</td><td>网络管理</td><td>adb shell dumpsys network_management</td></tr></tbody></table><h3 id="其他常用服务信息查询"><a href="#其他常用服务信息查询" class="headerlink" title="其他常用服务信息查询"></a>其他常用服务信息查询</h3><table><thead><tr><th>子命令</th><th>说明</th><th>命令格式</th></tr></thead><tbody><tr><td>meminfo</td><td>内存</td><td>adb shell dumpsys meminfo</td></tr><tr><td>cpuinfo</td><td>CPU</td><td>adb shell dumpsys cpuinfo</td></tr><tr><td>gfxinfo</td><td>帧率</td><td>adb shell dumpsys gfxinfo</td></tr><tr><td>display</td><td>显示</td><td>adb shell dumpsys display</td></tr><tr><td>power</td><td>电源</td><td>adb shell dumpsys power</td></tr><tr><td>batterystats</td><td>电池状态</td><td>adb shell dumpsys batterystats</td></tr><tr><td>battery</td><td>电池</td><td>adb shell dumpsys battery</td></tr><tr><td>alarm</td><td>闹钟</td><td>adb shell dumpsys alarm</td></tr><tr><td>location</td><td>位置</td><td>adb shell dumpsys location</td></tr><tr><td>wifi</td><td>wifi</td><td>adb shell dumpsys wifi</td></tr><tr><td>power</td><td>电源</td><td>adb shell dumpsys power</td></tr><tr><td>notification</td><td>通知</td><td>adb shell dumpsys notification</td></tr></tbody></table><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 电池信息</span><br><span class="line">&#123;lamb&#125; adb shell dumpsys battery</span><br><span class="line">Current Battery Service state:</span><br><span class="line">  AC powered: false</span><br><span class="line">  USB powered: true</span><br><span class="line">  Wireless powered: false</span><br><span class="line">  Max charging current: 500000</span><br><span class="line">  Max charging voltage: 5000000</span><br><span class="line">  Charge counter: 3321815</span><br><span class="line">  status: 5 #电池状态</span><br><span class="line">  health: 2 </span><br><span class="line">  present: true</span><br><span class="line">  level: 100 #电量</span><br><span class="line">  scale: 100</span><br><span class="line">  voltage: 4369</span><br><span class="line">  temperature: 310  #电池温度</span><br><span class="line">  technology: Li-poly</span><br></pre></td></tr></table></figure></p><p>完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;adb进阶四 —— dumpsys&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://tokyle.com/tags/Android/"/>
    
      <category term="adb" scheme="http://tokyle.com/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>adb进阶三 —— Monkey (2)</title>
    <link href="http://tokyle.com/2019/04/11/adb%E8%BF%9B%E9%98%B6%E4%B8%89-%E2%80%94%E2%80%94-Monkey-2/"/>
    <id>http://tokyle.com/2019/04/11/adb进阶三-——-Monkey-2/</id>
    <published>2019-04-11T08:33:46.000Z</published>
    <updated>2019-04-24T05:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>adb进阶三 —— Monkey (2)</p><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为原生的monkey，是一系列的随机事件，很多时候事满足不了我们自定义场景需求的，比如只想验证APP的登录的稳定性，使用原生的<code>adb shell monkey</code>貌似做不到，这边就需要自定义脚本来实现</p><h3 id="Monkey-API"><a href="#Monkey-API" class="headerlink" title="Monkey API"></a>Monkey API</h3><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>LaunchActivity(pkg_name, cl_name)</td><td>启动应用的Activity。参数：包名和启动的Activity</td></tr><tr><td>Tap(x, y, tapDuration)</td><td>模拟一次手指单击事件。参数：x,y为控件坐标，tapDuration为点击的持续时间，此参数可省略</td></tr><tr><td>DispatchPress(keycode)</td><td>按键。参数： keycode</td></tr><tr><td>RotateScreen(rotationDegree, persist)</td><td>旋转屏幕。 参数：rotationDegree为旋转角度， e.g. 1代表90度；persist表示旋转之后是否固定，0表示旋转后恢复，非0则表示固定不变</td></tr><tr><td>DispatchFlip(true/false)</td><td>打开或者关闭软键盘</td></tr><tr><td>LongPress()</td><td>长按</td></tr><tr><td>PressAndHold(x, y, pressDuration)</td><td>模拟长按事件</td></tr><tr><td>DispatchString(input)</td><td>输入字符串</td></tr><tr><td>Drag(xStart, yStart, xEnd, yEnd, stepCount)</td><td>拖拽</td></tr><tr><td>PinchZoom(x1Start, y1Start, x1End, y1End, x2Start, y2Start, x2End, y2End, stepCount)</td><td>缩放</td></tr><tr><td>UserWait(sleepTime)</td><td>休眠</td></tr><tr><td>DeviceWakeUp()</td><td>唤醒屏幕</td></tr><tr><td>PowerLog(power_log_type, test_case_status)</td><td>模拟电池电量信息</td></tr><tr><td>WriteLog()</td><td>将电池信息写入sd卡</td></tr><tr><td>RunCmd(cmd)</td><td>运行shell命令</td></tr><tr><td>DispatchPointer(long downTime,  long eventTime, int action, loat x, float y, float pressure, float size, int metaState,  float xPrecision, float yPrecision, int device, int edgeFlags)</td><td>向指定位置，发送单个手势，点击事件</td></tr><tr><td>DispatchKey(long downTime, long eventTime, int action, int code, int repeat, int metaState, int device, int scancode)</td><td>发送键值</td></tr><tr><td>LaunchInstrumentation(test_name,runner_name)</td><td>运行一个instrumentation测试用例</td></tr><tr><td>DispatchTrackball(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int device, int edgeFlags)</td><td>模拟发送轨迹球事件</td></tr><tr><td>ProfileWait</td><td>等待5秒</td></tr><tr><td>StartCaptureFramerate()</td><td>获取帧率</td></tr><tr><td>EndCaptureFramerate(input)</td><td>结束获取帧率</td></tr></tbody></table><p>以<strong>点击事件</strong>为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DispatchPointer(long downTime,  long eventTime, int action, loat x, float y, float pressure, float size, int metaState,  float xPrecision, float yPrecision, int device, int edgeFlags)</span><br></pre></td></tr></table></figure></p><p>参数很多，只需要关注<code>action</code>，<code>x</code>，<code>y</code>，对于参数action值为0代表按下（KeyDown），1代表弹起（KeyUp）。如果使用这个方法实现点击事件，这个方法就应该成对出现，先0再1。</p><ul><li>long downTime：键最初被按下时间</li><li>long eventTime：事件发生时间</li><li>int action：动作ACTION_DOWN=0,ACTION_UP=1,ACTION_MULTIPLE=2</li><li>float x：x坐标</li><li>float y：y坐标</li><li>float pressure：当前事件的压力，值为0～1</li><li>float size：触摸的近似值，范围为0～1</li><li>int metaState：当前按下的meta键的标识</li><li>float xPrecision：x坐标精确值</li><li>float yPrecision：y坐标精确值</li><li>int device：事件来源，范围0～x，0表示不来自物理设备</li><li>int edgeFlags：坐标是否超出了屏幕范围</li></ul><blockquote><p><a href="http://tokyle.com/2018/01/17/appium%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/">Android键盘事件，keycode</a></p></blockquote><h3 id="Monkey脚本"><a href="#Monkey脚本" class="headerlink" title="Monkey脚本"></a>Monkey脚本</h3><p>和自动化测试时候差不多实现，<strong>打开首页-点击用户名-输入用户名-点击密码-输入密码-点击登录</strong>，相应的，也就是只需要获取用户名和密码以及确定按键的坐标，传到<code>DispatchPointer</code>即可，获取坐标可以使用<code>uiautomatorviewer.bat</code>挺简单的，直接上脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 头部</span><br><span class="line">type= user</span><br><span class="line">count= 1</span><br><span class="line">speed= 1.0</span><br><span class="line">UserWait(200)</span><br><span class="line">start data &gt;&gt;</span><br><span class="line"></span><br><span class="line"># 打开app登录页</span><br><span class="line">LaunchActivity(com.android.testapp,com.android.testapp.MainActivity)</span><br><span class="line"># 休眠</span><br><span class="line">UserWait(10000)</span><br><span class="line"># 点击用户名文本框（460,751）为坐标</span><br><span class="line">DispatchPointer(10,10,0,460,751,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,460,751,1,1,-1,1,1,0,0)</span><br><span class="line">UserWait(5000)</span><br><span class="line"># 输入用户名</span><br><span class="line">DispatchString(monkeytest)</span><br><span class="line">DispatchFlip(false)</span><br><span class="line">UserWait(2000)</span><br><span class="line"># 点击密码文本框（490,867）为坐标</span><br><span class="line">DispatchPointer(10,10,0,490,867,1,1,-1,1,1,0,0)</span><br><span class="line">DispatchPointer(10,10,1,490,867,1,1,-1,1,1,0,0)</span><br><span class="line">UserWait(5000)</span><br><span class="line"># 输入密码</span><br><span class="line">DispatchString(123456)</span><br><span class="line">DispatchFlip(false)</span><br><span class="line">UserWait(2000)</span><br><span class="line"># 点击确定</span><br><span class="line">Tap(541,1096)</span><br></pre></td></tr></table></figure></p><p>保存为monkey_test.txt文件，上传到android设备：<code>adb push monkey_test.txt /mnt/sdcard/</code><br>执行脚本：<code>adb shell monkey -f /mnt/sdcard/monkey_test.txt -v 1</code></p><p>完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;adb进阶三 —— Monkey (2)&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://tokyle.com/tags/Android/"/>
    
      <category term="adb" scheme="http://tokyle.com/tags/adb/"/>
    
      <category term="Monkey" scheme="http://tokyle.com/tags/Monkey/"/>
    
  </entry>
  
  <entry>
    <title>adb进阶二 —— Monkey (1)</title>
    <link href="http://tokyle.com/2019/04/11/adb%E8%BF%9B%E9%98%B6%E4%B8%80-%E2%80%94%E2%80%94-Monkey-1/"/>
    <id>http://tokyle.com/2019/04/11/adb进阶一-——-Monkey-1/</id>
    <published>2019-04-11T06:12:22.000Z</published>
    <updated>2019-04-24T05:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>adb进阶二 —— Monkey (1)</p><a id="more"></a><h3 id="Monkey简介"><a href="#Monkey简介" class="headerlink" title="Monkey简介"></a>Monkey简介</h3><p>Monkey是一个可运行在Android环境中的命令行工具，使用monkey尅发送一些伪随机事件（pseudo-random）的用户事件流，例如点击，触摸，手势等。通过monkey，我们可以注入随机事件流或者自定义特定事件来对应用进行健壮性、稳定性测试。</p><h4 id="Monkey用途"><a href="#Monkey用途" class="headerlink" title="Monkey用途"></a>Monkey用途</h4><p>通过使用monkey来对应用进行压力测试。</p><p>Monkey包含一系列选项，主要包括以下方面：</p><ol><li>基础配置项，比如设置注入事件的数量<code>adb shell monkey 500</code></li><li>备选限制，比如限制测试单个包<code>adb shell monkey -p com.android.camera  5000</code></li><li>事件类型和频率</li><li>调试选项</li></ol><h4 id="Monkey程序简介"><a href="#Monkey程序简介" class="headerlink" title="Monkey程序简介"></a>Monkey程序简介</h4><p>monkey在Android文件系统存放路径为：<code>/system/framework/monkey.jar</code><br>启动monkey.jar的shell脚本文件在Android文件系统存放路径为<code>system/bin/monkey</code><br>导到本地:<code>adb pull /system/bin/monkey E:\app_workstation\Android_files\MONKEY</code><br>可以看到monkey的shell内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Script to start &quot;monkey&quot; on the device, which has a very rudimentary</span><br><span class="line"># shell.</span><br><span class="line">#</span><br><span class="line">base=/system</span><br><span class="line">export CLASSPATH=$base/framework/monkey.jar</span><br><span class="line">trap &quot;&quot; HUP</span><br><span class="line">for a in &quot;$@&quot;; do</span><br><span class="line">    echo &quot;  bash arg:&quot; $a</span><br><span class="line">done</span><br><span class="line">exec app_process $base/bin com.android.commands.monkey.Monkey &quot;$@&quot;</span><br></pre></td></tr></table></figure></p><p>可以看到调用的是<code>com.android.commands.monkey.Monkey</code>包</p><h3 id="Monkey命令"><a href="#Monkey命令" class="headerlink" title="Monkey命令"></a>Monkey命令</h3><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p>基础语法：<code>adb shell monkey [option] &lt;event-count&gt;</code><br>当不指定任何选项时，monkey将默认静态模式，并且会向目标设备的所有包发送随机事件</p><p>基本使用：<code>adb shell monkey</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;lamb&#125; adb shell monkey                                                 </span><br><span class="line">args: []                                                                </span><br><span class="line">usage: monkey [-p ALLOWED_PACKAGE [-p ALLOWED_PACKAGE] ...]             </span><br><span class="line">              [-c MAIN_CATEGORY [-c MAIN_CATEGORY] ...]                 </span><br><span class="line">              [--ignore-crashes] [--ignore-timeouts]                    </span><br><span class="line">              [--ignore-security-exceptions]                            </span><br><span class="line">              [--monitor-native-crashes] [--ignore-native-crashes]      </span><br><span class="line">              [--kill-process-after-error] [--hprof]                    </span><br><span class="line">              [--match-description TEXT]                                </span><br><span class="line">              [--pct-touch PERCENT] [--pct-motion PERCENT]              </span><br><span class="line">              [--pct-trackball PERCENT] [--pct-syskeys PERCENT]         </span><br><span class="line">              [--pct-nav PERCENT] [--pct-majornav PERCENT]              </span><br><span class="line">              [--pct-appswitch PERCENT] [--pct-flip PERCENT]            </span><br><span class="line">              [--pct-anyevent PERCENT] [--pct-pinchzoom PERCENT]        </span><br><span class="line">              [--pct-permission PERCENT]                                </span><br><span class="line">              [--pkg-blacklist-file PACKAGE_BLACKLIST_FILE]             </span><br><span class="line">              [--pkg-whitelist-file PACKAGE_WHITELIST_FILE]             </span><br><span class="line">              [--wait-dbg] [--dbg-no-events]                            </span><br><span class="line">              [--setup scriptfile] [-f scriptfile [-f scriptfile] ...]  </span><br><span class="line">              [--port port]                                             </span><br><span class="line">              [-s SEED] [-v [-v] ...]                                   </span><br><span class="line">              [--throttle MILLISEC] [--randomize-throttle]              </span><br><span class="line">              [--profile-wait MILLISEC]                                 </span><br><span class="line">              [--device-sleep-time MILLISEC]                            </span><br><span class="line">              [--randomize-script]                                      </span><br><span class="line">              [--script-log]                                            </span><br><span class="line">              [--bugreport]                                             </span><br><span class="line">              [--periodic-bugreport]                                    </span><br><span class="line">              [--permission-target-system]                              </span><br><span class="line">              COUNT</span><br></pre></td></tr></table></figure></p><p>可以看见列出了所有monkey的usage，但是并没有启动，因为缺少事件数量，只要加上数量，即可<code>adb shell monkey 10000</code></p><h4 id="Monkey-Option"><a href="#Monkey-Option" class="headerlink" title="Monkey Option"></a>Monkey Option</h4><p>monkey的option可以根据实际需要进行选择，主要分为<strong>常规类</strong>、<strong>事件类</strong>、<strong>约束类</strong>和<strong>调试类</strong></p><h5 id="常规类"><a href="#常规类" class="headerlink" title="常规类"></a>常规类</h5><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>- - help</td><td>显示帮助信息，usage</td></tr><tr><td>-v</td><td>打印日志信息，每增加一个-v，日志显示的信息越详细，目前最多支持三个-v，即：-v -v -v;  L0:一个-v，除启动提示、测试完成和最终结果之外，提供较少信息；  L1：两个-v，-v -v，提供较详细的运行测试信息，如发送到Activity的事件； L2：三个-v，-v -v -v，提供更加详细的信息，如测试中被选中的或未选中的Activity</td></tr></tbody></table><h5 id="事件类"><a href="#事件类" class="headerlink" title="事件类"></a>事件类</h5><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-s</td><td>伪随机数生成器的seed值，如果用相同的seed值再次运行mnkey，会生成相同的事件序列(重复执行刚才的随机操作，复现问题好用)</td></tr><tr><td>- -throttle</td><td>后面接时间，单位毫秒，表示事件之间的固定延时（执行 每一个指令的间隔时间）</td></tr><tr><td>- -pct-touch</td><td>后接触摸事件百分比(触摸事件是一个down-up事件，它发生在屏幕上的某单一位置)，点击</td></tr><tr><td>- -pct-motion</td><td>后接动作事件百分比(动作事件由屏幕上某处的一个down事件、一系列的伪随机事件和一个up事件组成)，滑动</td></tr><tr><td>- -pct-trackball</td><td>后面接轨迹事件的百分比(轨迹事件由一个或几个随机的移动组成，有时还伴随有点击)</td></tr><tr><td>- -pct-syskeys</td><td>后面接“系统”按键事件的百分比(这些按键通常被保留，由系统使用，如Home、Back、StartCall、End Call及音量控制键)。</td></tr><tr><td>- -pct-nav</td><td>后面接“基本”导航事件百分比(导航事件主要来自方向输入设备的上，下，左，右事件)</td></tr><tr><td>- -pct-majornav</td><td>后面接“主要”导航事件的百分比(这些导航事件通常引发图形界面中的动作，如：键盘的中间按键、回退按键、菜单按键)</td></tr><tr><td>- -pct-appswitch</td><td>后面接启动Activity的百分比。在随机间隔里，Monkey将执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法。</td></tr><tr><td>- -pct-flip</td><td>键盘翻转事件</td></tr><tr><td>- -pct-anyevent</td><td>调整其他时间比例，比如很少使用的keypress等事件</td></tr><tr><td>- -pct-pinchzoom</td><td>缩放事件</td></tr><tr><td>- -pct-permission</td><td>未知</td></tr></tbody></table><h5 id="约束类"><a href="#约束类" class="headerlink" title="约束类"></a>约束类</h5><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-p</td><td>指定包，可一个可多个，多个包需要多个-p</td></tr><tr><td>-c</td><td>指定类，可一个可多个，多个需多个-c</td></tr></tbody></table><h5 id="调试类"><a href="#调试类" class="headerlink" title="调试类"></a>调试类</h5><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>- -hprof</td><td>设置此选项，将在Monkey事件序列之前和之后立即生成profiling报告。这将会在data/misc中生成大文件(~5Mb)，所以要小心使用它</td></tr><tr><td>- -ignore-crashes</td><td>当应用程序崩溃或发生任何失控异常时，Monkey将停止运行。如果设置此选项，Monkey将继续向系统发送事件，直到计数完成</td></tr><tr><td>- -ignore-timeouts</td><td>当应用程序发生任何超时错误(如“ApplicationNot Responding”对话框)时，Monkey将停止运行。如果设置此选项，Monkey将继续向系统发送事件，直到计数完成</td></tr><tr><td>- -ignore-security-exceptions</td><td>当应用程序发生任何权限错误（如启动一个需要某些权限的Activity)时，monkey将继续运行直到计数完成</td></tr><tr><td>- -ignore-native-crashes</td><td>当应用程序发生native code的崩溃事件时，monkey将继续运行直至计数完成</td></tr><tr><td>- -kill-process-after-error</td><td>设置此项后，当monkey因为应用程序发生错误而停止时，将会通知系统停止发生错误的进程</td></tr><tr><td>- -monitor-native-crashes</td><td>设置此项后，monkey运行时native code的崩溃事件将被监视并报告</td></tr></tbody></table><h4 id="常用monkey示例"><a href="#常用monkey示例" class="headerlink" title="常用monkey示例"></a>常用monkey示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell monkey -p com.android.camera --ignore-crashes --ignore-timeouts --ignore-security-exceptions  --ignore-native-crashes --pct-touch 70 --pct-motion 25 --pct-majornav 5 -v -v -v --throttle 300 100000 &gt; E:\app_workstation\Android_files\MONKEY\1.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>以上命令执行效果：忽略app崩溃，忽略超时，忽略权限异常，忽略应用程序发生崩溃的本地代码，触摸事件百分比70%，手势事件25%，主要导航事件5%；日志等级三级，事件间隔3s，执行100000次事件，输出和错误都打印进D盘1.log文件中</p><h5 id="补充标准输出知识"><a href="#补充标准输出知识" class="headerlink" title="补充标准输出知识"></a>补充标准输出知识</h5><p>linux中，标准输入<code>stdin</code>，标准输出<code>stdout</code>，标准错误<code>stderr</code>，分别使用0,1,2代替，所以就有了以下几种常用的重定向方式：</p><ol><li><code>sh test.sh &gt; 1.log</code>，标准错误输出到屏幕，标准输出打印到1.log文件中，1.log中没有错误内容</li><li><code>sh test.sh &gt; 2.log 2&gt;&amp;1</code>，标准输出和标准错误都打印到2.log文件中</li><li><code>sh test.sh &gt; 3.log 2 &gt;err.log</code>，标准输出打印到3.log文件，标准错误打印到err.log文件</li></ol><p>使用monkey生成日志之后，需要对日志进行筛查，看是否有APP崩溃记录或者无响应记录。</p><ul><li>崩溃记录查找”CRASH”</li><li>无响应记录查找”ANR”（Application No Responding）</li><li>内存泄露问题搜索”GC”（需进一步分析）</li><li>异常问题搜索“Exception”（如果出现空指针，NullPointerException，需格外重视）</li></ul><h4 id="停止Monkey"><a href="#停止Monkey" class="headerlink" title="停止Monkey"></a>停止Monkey</h4><p>既然是linux进程，想停，很简单，找出来，kill掉..<br><code>adb shell ps | grep monkey</code><br><code>adb shell kill -9 PID</code></p><p>完~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;adb进阶二 —— Monkey (1)&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://tokyle.com/tags/Android/"/>
    
      <category term="adb" scheme="http://tokyle.com/tags/adb/"/>
    
      <category term="Monkey" scheme="http://tokyle.com/tags/Monkey/"/>
    
  </entry>
  
  <entry>
    <title>adb进阶一 —— logcat</title>
    <link href="http://tokyle.com/2019/04/10/adb%E8%BF%9B%E9%98%B6%E4%B8%80-%E2%80%94%E2%80%94-logcat/"/>
    <id>http://tokyle.com/2019/04/10/adb进阶一-——-logcat/</id>
    <published>2019-04-10T08:18:18.000Z</published>
    <updated>2019-04-10T08:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>adb进阶一 —— logcat</p><a id="more"></a><h3 id="logcat-简介"><a href="#logcat-简介" class="headerlink" title="logcat 简介"></a>logcat 简介</h3><p>logcat是Android中的一个命令行工具，可以用于测试过程中获取程序的log<br>基本用法：<br>测试开始前，可以先清缓存:<code>adb logcat -c</code><br>获取日志：<code>adb logcat &gt; E:\app_workstation\Android_files\logs\1.log</code></p><p>语法格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[adb] logcat [&lt;option&gt;] … [&lt;filter – spec&gt;] …</span><br></pre></td></tr></table></figure></p><p>推荐搭配grep使用</p><h3 id="logcat-缓冲区"><a href="#logcat-缓冲区" class="headerlink" title="logcat 缓冲区"></a>logcat 缓冲区</h3><p>Android log输出量巨大， 特别是通信类log，好在Android降log放在不同的缓冲区内，可用于指定缓冲区输出log，目前有四个缓冲区：</p><table><thead><tr><th>缓冲区名称</th><th>用途</th></tr></thead><tbody><tr><td>Radio</td><td>输出通信系统的log</td></tr><tr><td>System</td><td>输出系统组件的log</td></tr><tr><td>Event</td><td>输出event模块的log</td></tr><tr><td>Main</td><td>所有java层的log，以及不属于上面三层的log</td></tr></tbody></table><p>缓冲区主要是给系统组件使用的，一般的应用不需要考虑，应用的log都在<strong>main</strong>缓冲区中<br>默认log输出（不指定缓冲区的情况下）是输出<code>System</code>和<code>Main</code>缓冲区的log</p><p>获取缓冲区命令：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-b <buffer></buffer></td><td>加载一个可使用的日志缓冲区提供查看，默认是main</td></tr></tbody></table><p>实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">adb logcat –b radio</span><br><span class="line"></span><br><span class="line">adb logcat –b system</span><br><span class="line"></span><br><span class="line">adb logcat –b events</span><br><span class="line"></span><br><span class="line">adb logcat –b main</span><br></pre></td></tr></table></figure></p><h3 id="logcat-参数"><a href="#logcat-参数" class="headerlink" title="logcat 参数"></a>logcat 参数</h3><h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><p>由低到高</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>V</td><td>Verbose（最低优先级）明细</td></tr><tr><td>D</td><td>Debug调试</td></tr><tr><td>I</td><td>Info    信息</td></tr><tr><td>W</td><td>Warning警告</td></tr><tr><td>E</td><td>Error    错误</td></tr><tr><td>F</td><td>Fatal    严重错误</td></tr><tr><td>S</td><td>Silent（Super all output）</td></tr></tbody></table><p>日志过滤器格式：<code>tag: priority</code></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 仅输出标记为“ActivityManager”且优先级大于等于“Info”和 标记为“PowerManagerService”并且优先级大于等于“Debug”的日志</span><br><span class="line"></span><br><span class="line">adb logcat ActivityManager:I PowerManagerService:D *:S</span><br><span class="line"></span><br><span class="line"># 显示所有优先级大于等于“warning”的日志</span><br><span class="line"></span><br><span class="line">adb logcat *:W</span><br><span class="line"></span><br><span class="line"># 显示PowerManagerService的日志信息</span><br><span class="line"></span><br><span class="line">adb logcat -s PowerManagerService</span><br></pre></td></tr></table></figure></p><p>tips：<code>*:S</code>设置所有日志级别高于S的日志，由于没有这样级别，所以加上该过滤器可以确保只会输出符合条件的日志</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-b</td><td>加载一个可使用的日志缓冲区供查看，默认值为main</td></tr><tr><td>-c</td><td>清除缓冲区中的全部日志并退出（清除完成后可使用-g 查看）</td></tr><tr><td>-g</td><td>打印日志缓冲区的大小并退出</td></tr><tr><td>-d</td><td>将缓冲区的log转存到屏幕中然后退出</td></tr><tr><td>-f</td><td>将log输出到制定的文件中&lt;文件名&gt;，默认为标准输出（stdout）</td></tr><tr><td>-n</td><td>设置日志的最大数目，默认值为4，需要和-r选项一起使用</td></tr><tr><td>-r</td><td>按照每千字节输出日志，默认值为16，需要和-f一起使用</td></tr><tr><td>-s</td><td>设置过滤器</td></tr><tr><td>-v</td><td>设置输出格式的日志消息</td></tr></tbody></table><p>一般长时间输出log的话建议-f -n -r三个参数连用，这样当一个文件日志输出满了之后可以马上在另一个中进行输出（输出多个指定大小的日志文件）<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -f /data/local/tmp/log.txt -n 2 -r 3</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -b radio -v time &gt; /tmp/event.log</span><br></pre></td></tr></table></figure><p>tips:<code>-v time</code>表示在log中加入每条log发生的时间</p><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><p>-v更多格式：</p><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>brief</td><td>显示优先级/标记和过程的PID发出的消息（默认格式）</td></tr><tr><td>process</td><td>仅显示进程PID</td></tr><tr><td>tag</td><td>仅显示优先级/标记</td></tr><tr><td>thread</td><td>仅显示进程：线程和优先级/标记</td></tr><tr><td>raw</td><td>显示原始的日志信息，没有其他的元数据字段</td></tr><tr><td>time</td><td>显示日期，调用时间，优先级/标记，PID</td></tr><tr><td>long</td><td>显示所有的元数据字段并且用空行分隔消息内容</td></tr></tbody></table><p>示例：<code>adb logcat -v thread</code></p><p>以上，完~</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><blockquote><p><a href="https://www.cnblogs.com/bydzhangxiaowei/p/8168598.html" target="_blank" rel="noopener">ADB logcat 过滤方法(抓取日志)</a><br><a href="https://www.cnblogs.com/JianXu/p/5468839.html" target="_blank" rel="noopener">Android logcat命令详解</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;adb进阶一 —— logcat&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://tokyle.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Android" scheme="http://tokyle.com/tags/Android/"/>
    
      <category term="adb" scheme="http://tokyle.com/tags/adb/"/>
    
  </entry>
  
</feed>
