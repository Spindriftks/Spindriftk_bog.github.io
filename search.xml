<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker简单使用（四）]]></title>
    <url>%2F2019%2F06%2F13%2Fdocker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[docker简单使用（四） Docker容器操作 容器启动新建并启动构建完镜像之后，启动容器例如：docker run -it ubintu:16.04 bash，启ubuntu，并开启交互终端 重启容器容器已经关闭，可以使用docker container start containerID(或name)启动示例：123456[root@localhost myuser2]# docker run --name web1 -d -p 8088:80 nginx73a5c1a3ac2300f6e2317ae39c9571b84be07e44beb92fcb98b41ee68aa6672a[root@localhost myuser2]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES73a5c1a3ac23 nginx &quot;nginx -g &apos;daemon of…&quot; 14 seconds ago Up 4 seconds 0.0.0.0:8088-&gt;80/tcp web1 关掉容器123456[root@localhost myuser2]# docker kill 73a5c1a3ac2373a5c1a3ac23[root@localhost myuser2]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES73a5c1a3ac23 nginx &quot;nginx -g &apos;daemon of…&quot; About a minute ago Exited (137) 14 seconds ago web1 重新启动123456[root@localhost myuser2]# docker container start 73a5c1a3ac2373a5c1a3ac23[root@localhost myuser2]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES73a5c1a3ac23 nginx &quot;nginx -g &apos;daemon of…&quot; About a minute ago Up 9 seconds 0.0.0.0:8088-&gt;80/tcp web1 docker container start -i 5879098886bf以交互模式重启 进入容器推荐docker exec，交互模式：docker exec -it container 停止容器可以docker container stop containerid(name)也可以暴力的dokcer kill containerid 删除容器docker rm containerid 删除镜像：docker rmi imageid]]></content>
      <categories>
        <category>容器化</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker简单使用（三）]]></title>
    <url>%2F2019%2F06%2F12%2Fdocker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[docker简单使用（三） Dockerfile简介二简单介绍Dockerfile的一些指令 COPYCOPY，复制文件指令，格式：1COPY &lt;源路径&gt; &lt;目标路径&gt; 另一种格式类似函数调用：COPY [&quot;&lt;源路径&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;] COPY指令作用是从构建上下文目录中&lt;源路径&gt;（相对于上下文的路径）下的文件复制到镜像中的目标路径 示例：1COPY test1.txt /usr/local/test/ 将当前上下文目录下的test1.txt复制到新镜像的/usr/local/test/文件夹下&lt;目标路径&gt;可以是容器内的绝对路径，也可以是相对于WOKDIR的相对路径 ADD不实用的命令，有拷贝的功能，同时，可以拷贝url，但是使用ADD url时，docker会先将url的文件下载下来，如果是个压缩包，还需要自己添加一层RUN进行解压，剔除不需要的文件，再复制；所以不如直接RUN wget，然后解压缩，剔除文件复制 ADD命令在有一种情况下很有用，源路径是一个gzip，bzip2以及xz的压缩包，ADD会自动解压压缩包到目标路径。 在《docker practice》中指出，在COPY和ADD指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用COPY指令，仅在需要自动解压缩场合使用ADD CMD首先要理解，容器是进程，不是虚拟机，在正常linux中，运行进程一般都伴随有启动参数，类似的，容器也有，CMD就是用于指定默认的容器主进程的启动命令的 格式：shell格式：CMD &lt;命令&gt;exec格式：CMD [&quot;可执行文件&quot;， &quot;参数1&quot;, &quot;参数2&quot;...] 在运行时，可以使用CMD来指定新的命令来替代镜像中设置的默认命令，例如，ubuntu镜像的默认CMD是/bin/bash，如果我们直接docker run -it ubuntu:16.04会直接进入bash；也可以指定别的命令，例如输出系统版本：docker run -it ubuntu:16.04 cat /etc/os-rlease 在指令格式上，推荐使用CMD [&quot;可执行文件&quot;， &quot;参数1&quot;, &quot;参数2&quot;...]，这类格式会被解析成JSON，因此一定要是用双引号&quot;如果使用shell格式，例如CMD echo $JAVA_HOME在实际执行中会变更为CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;echo $JAVA_HOME&quot;]，实际会被包装成sh -c的参数形式。（这也是shell中可以直接使用环境变量的原因） 前面说过，容器其实就是进程，本身就是进程，所以就不存在什么进程里面的程序有后台执行的说法了，容器中的应用，都是在前台执行的，不存在systemctl这样的操作，不会像虚拟机中有systemctl start mysqld这样的操作，如果使用CMD写成这样的：CMD systemctl start nginx，会发现容器执行后立刻退出。 这是因为，docker容器，默认会把容器内部第一个进程，也就是pid=1的程序作为docker容器正在运行的依据，如果容器中pid=1的程序挂了，那docker容器就会直接退出；在执行CMD systemctl start nginx时候，实际执行的是CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;systemctl start nginx&quot;]，起初pid=1的程序是bash，但是后面接上了systemctl start nginx（后台守护模式daemon启动nginx），使得systemctl start nginx进程启动后，sh也结束了（CMD会更改默认命令），当pid=1的程序结束，容器就退出了。所以只要运行程序时候，在非守护模式下，容器就不会退出，因此，容器内启动nginx可以：CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off&quot;] ENTRYPOINT和CMD类似，不同的是，CMD会被docker run覆盖，而ENTERPOINT不会，例如以下一个最简单的镜像：12FROM ubuntu:16.04CMD [&quot;/bin/echo&quot;, &quot;test&quot;] 构建镜像：docker build -t echotest .，运行容器：12[root@localhost myip]# docker run echotest test 但是既然容器是进程，那如果像其他进程一样，加参数，效果如何：123[root@localhost myip]# docker run echotest -idocker: Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused &quot;exec: \&quot;-i\&quot;: executable file not found in $PATH&quot;: unknown.ERRO[0001] error waiting for container: context canceled 直接就报错了。。这是因为跟在镜像名之后的执行，会替换调CMD的默认值，但是-i又不是个指令，所以就报错了。 ENTRYPOINT在这点上就可以做到带参数，例如：12FROM ubuntu:16.04ENTRYPOINT [&quot;/bin/echo&quot;, &quot;test&quot;] 构建：docker build -t echotest2 .，运行容器：12[root@localhost echotest]# docker run echotest2 -itest -i 可以看到，-i可以带进去。 ENV顾名思义，设置环境变量ENV JAVA_VERSION 1.8.0_191 ARG和ENV类似，都是设置环境变量。区别在于：123The ARG instruction defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg &lt;varname&gt;=&lt;value&gt; flag.ARG指令定义了用户可以在编译时或者运行时传递的变量，如使用如下命令：--build-arg &lt;varname&gt;=&lt;value&gt;The ENV instruction sets the environment variable &lt;key&gt; to the value &lt;value&gt;. The environment variables set using ENV will persist when a container is run from the resulting image.ENV指令是在dockerfile里面设置环境变量，不能在编译时或运行时传递。 例如，在Dockerfile中定义：12ARG a_key1ARG a_key2 = a_value2 ARG指令定义的参数，在docker build命令中可以通过–build-arg a_key1=avalue1来覆盖 VOLUME创建一个可以从本地主机或其他容器挂载的挂在点，格式：VOLUME [&quot;/data&quot;]对于数据库类需要保存动态数据的应用，数据库文件应该保存在卷（volume）。为了防止运行时用户忘记将动态文件所保存的目录挂在为卷，在写Dockerfile时，就可以事先指定某些目录挂载为匿名卷，这样运行时如果用户不挂载，应用也可以正常运行，不会向容器存储层写大量数据 VOLUME [&quot;/data&quot;],这里的/data目录就会在运行时自动挂载为匿名卷，任何向/data中写入的信息都不会记录进容器存储层。当然，docker run时候也可以覆盖这个设置：1docker run -d -v mydata:/data/tmp mysql EXPOSE声明端口，格式：EXPOSE &lt;port1&gt; &lt;port2&gt;用来指定要映射出去的端口，例如，容器内部开启了nginx,就需要将80（或者指定的端口）暴露出去：EXPOSE 80。这个需要-P（大写）配合，启动容器是，加上-P，让它自动分配。如果想指定具体端口，使用-p(小写) WORKDIR指定工作目录，格式：WORKDIR &lt;工作目录路径&gt;，作用就是为后续的RUN、COPY等指定工作目录在Dockerfile中，每个RUN，都会启一个容器，都是一个启动容器、执行命令、提交存储层文件变更的操作。示例，如果Dockerfile这么写：12345FROM ubuntu:16.04RUN cd /home \ &amp;&amp; mkdir myapp \ &amp;&amp; cd myappRUN echo &quot;docker practice&quot; &gt; test1.txt 然后构建镜像：1234567891011121314[root@localhost myworkfile]# docker build -t workfile1 .Sending build context to Docker daemon 2.048kBStep 1/3 : FROM ubuntu:16.04 ---&gt; 2a697363a870Step 2/3 : RUN cd /home &amp;&amp; mkdir myapp &amp;&amp; cd myapp ---&gt; Running in a33b48c39597Removing intermediate container a33b48c39597 ---&gt; daebc80cbf9dStep 3/3 : RUN echo &quot;docker practice&quot; &gt; test1.txt ---&gt; Running in 500473ff3363Removing intermediate container 500473ff3363 ---&gt; 4a1668a9a53cSuccessfully built 4a1668a9a53cSuccessfully tagged workfile1:latest 可以看到，构建过程中，出现了两个中间容器a33b48c39597和500473ff3363，所以这两个RUN，其实运行的是不一样的容器，最终结果，启动容器后在/home/myapp下可能就找不到test1.txt，验证：1234567[root@localhost myworkfile]# docker run -it workfile1 bashroot@3a7bbb6da9a2:/# cd /home/root@3a7bbb6da9a2:/home# lsmyapproot@3a7bbb6da9a2:/home# cd myapp/root@3a7bbb6da9a2:/home/myapp# lsroot@3a7bbb6da9a2:/home/myapp# 没有找到test1.txt 使用WORKDIR:123FROM ubuntu:16.04WORKDIR /home/myappRUN echo &quot;docker practice&quot; &gt; test2.txt 构建镜像，运行容器，查看：1234567891011121314[root@localhost myworkfile2]# docker build -t workfile2 .Sending build context to Docker daemon 2.048kBStep 1/3 : FROM ubuntu:16.04 ---&gt; 2a697363a870Step 2/3 : WORKDIR /home/myapp ---&gt; Running in a64c73b81fcbRemoving intermediate container a64c73b81fcb ---&gt; c7868d92cec6Step 3/3 : RUN echo &quot;docker practice&quot; &gt; test2.txt ---&gt; Running in f18afb589feeRemoving intermediate container f18afb589fee ---&gt; 8733481c9491Successfully built 8733481c9491Successfully tagged workfile2:latest 12345[root@localhost myworkfile2]# docker run -it workfile2 bashroot@8bc345cf4fe7:/home/myapp# lstest2.txtroot@8bc345cf4fe7:/home/myapp# cat test2.txt docker practic 看到在/home/myapp下有test2.txt，并且内容是我们指定的。 Ps 在Dockerfile中，这边只使用WORKDIR /home/myapp并没有创建该目录，但是，后面执行就是在该目录下，这是因为WORKDIR会帮你建立目录 USER和WORKDIR类似，指定之后执行RUN、COPY等命令的用户； 示例一：123FROM ubuntu:16.04USER kyleRUN echo &quot;Hello world&quot; 构建镜像:1234567891011[root@localhost myuser2]# docker build -t myuser2 .Sending build context to Docker daemon 2.048kBStep 1/3 : FROM ubuntu:16.04 ---&gt; 2a697363a870Step 2/3 : USER kyle ---&gt; Running in b9af960d2702Removing intermediate container b9af960d2702 ---&gt; ba5592dfdba1Step 3/3 : RUN echo &quot;Hello world&quot; ---&gt; Running in d93f1b59934cunable to find user kyle: no matching entries in passwd file 发现报错，kyle该用户不存在，镜像myuser2构建不成功 示例二：12345[root@localhost myuser1]# cat Dockerfile FROM ubuntu:16.04RUN groupadd -r tests &amp;&amp; useradd -r -g tests kyleUSER kyleRUN echo &quot;Hello World&quot; 构建镜像，运行容器：12345678910111213141516171819[root@localhost myuser1]# docker build -t myuser1 .Sending build context to Docker daemon 2.048kBStep 1/4 : FROM ubuntu:16.04 ---&gt; 2a697363a870Step 2/4 : RUN groupadd -r tests &amp;&amp; useradd -r -g tests kyle ---&gt; Running in 95030508e783Removing intermediate container 95030508e783 ---&gt; 8910cd5c0ee0Step 3/4 : USER kyle ---&gt; Running in 5ca75c068a8bRemoving intermediate container 5ca75c068a8b ---&gt; 17e120181a8aStep 4/4 : RUN echo &quot;Hello World&quot; ---&gt; Running in 022b81376556Hello WorldRemoving intermediate container 022b81376556 ---&gt; 73527faf6379Successfully built 73527faf6379Successfully tagged myuser1:latest 123[root@localhost myuser1]# docker run -it myuser1 bashkyle@55b05690325a:/$ whoamikyle 成功构建镜像，切换用户。 这两个示例可以看出，使用USER之前，必须创建好用户，也就是USER不会帮你建用户，只是切换用户 MAINTAINER指定制作作者信息，格式：MAINTAINER &lt;name&gt;，例如MAINTAINER kyle kyle@xxx.com 以上，就是Dockerfile一些常用的指令，基本是借鉴的《docker practice》…]]></content>
      <categories>
        <category>容器化</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客配置https]]></title>
    <url>%2F2019%2F06%2F11%2Fhexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AEhttps%2F</url>
    <content type="text"><![CDATA[hexo博客配置https 整天被chrome提醒不安全，简直了，实在忍不下去了，给博客加个s 方法很简单，到CloudFlare解析域名，开启CDN强制http转https，修改DNS即可 原DNS123dns23.hichina.comdns24.hichina.com 修改后：123cortney.ns.cloudflare.comlloyd.ns.cloudflare.com CloudFlare注册以后配置很简单，基本输入自己域名（tokyle.com）下一步下一步就结束了 就最后有一步配置DNS:DNS Manage your Domain Name System (DNS) settings时候，CNAME配置自己的域名，然后到对应的域名提供商（阿里云）去修改DNS解析 成功之后，CloudFlare会邮件给你，就可以愉快的https了： https://tokyle.com]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker简单使用（二）]]></title>
    <url>%2F2019%2F06%2F11%2Fdocker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[docker简单使用（二） Dockerfile简介一 DockerfileDockerfile是一个包含一条条指令的文本文件，其中每一条指令都构建一层（每一条指令的内存，就是描述该层应当如何构建）（docker镜像采用联合文件系统） 1联合文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。 Dockerfile使用示例，建立一个空白文件夹，进去文件夹，创建Dockerfile，编辑Dockerfile，编写指令12345mkdir nginxtestcd nginxtestvim Dockerfile Dockerfile内容：123FROM nginxRUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html 在当前文件夹，构建镜像：12345678910[root@localhost nginxtest]# docker build -t nginx:v3 .Sending build context to Docker daemon 2.048kBStep 1/2 : FROM nginx ---&gt; 62c261073ecfStep 2/2 : RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html ---&gt; Running in c20926fff810Removing intermediate container c20926fff810 ---&gt; 6ee9e7b88db2Successfully built 6ee9e7b88db2Successfully tagged nginx:v3 注意docker build最后有个.表示镜像构建的上下文（Context） 镜像构建上下文（Context）说实话，网上全是抄的一模一样的，全部来去《docker practice》，我也说不好自己理解的是对是错。。 首先，我也抄一下，docker其实是C/S架构，在执行docker build的时候，其实是有和server端（Docker引擎，服务端守护进程）进行交互。Docker运行时，Docker引擎提供一组REST API，docker命令这样的客户端，就是通过这组API与Docker引擎交互，从而完成各种功能。因此，在进行docker build的时候，看起来像是在本地进行构建，实际上，是先将上下文定义的路径下构建需要的包上传到Docker引擎，在Docker引擎处（服务端）完成构建。之前进行构建示例时候，有一行可以看出，和server进行了交互：1Sending build context to Docker daemon 2.048kB 在Dockerfile中经常会需要用到COPY，服务器在执行构建的时候，就需要知道copy的文件的地址，也就是上下文路径，需要注意的是，Docker的镜像构建上下文，即不是docker build执行的路径，也不是Dockerfile当前所在的目录。默认情况下，是建议创建一个空文件夹，然后将构建需要的文件和Dockerfile都放在该文件夹下，这样理所当然的Dockerfile所在路径就是上下文路径。（说实话，这个上下文，有点晕，不是很理解，我只能理解成是构建需要的文件所在的路径为上下文；也就是为什么要创建一个空文件夹，将构建需要的文件和Dockerfile放进该文件夹的原因）一定要记住，千万不要把Dockerfile放在根目录，不然会打包整个硬盘 一些Dockerfile指令示例：12COPY ./package.json /etc/COPY pachage.json /etc/ 上述两句效果是一样的，都是讲上下文下的package.json拷贝到镜像里面的/etc/下 1COPY /usr/local/nginx/nginx.conf /etc/nginx/ 上面这条，会无法工作，因为/usr/local/nginx/nginx.conf已经超出了上下文范文，服务端无法获取该文件1docker build -f /usr/kyle/dockertest/a/Dockerfile . 当Dockerfile不在构建上下文的根目录下，可以-f指定该文件位置（当前执行docker build在构建上下文下，可以理解为，当前有个空文件夹，里面是构建需要的文件，但是Dockerfile不在当前文件夹下，可以通过-f指定） .dockerignore现在上下文中有不想上传到服务端的文件，就需要使用.dockerignore，例如当前文件夹下有：123456789[root@localhost mynginx]# ls -al总用量 20drwxr-xr-x 2 root root 96 6月 11 15:23 .drwxr-xr-x. 6 root root 147 6月 11 11:07 ..-rw-r--r-- 1 root root 99 6月 11 15:22 Dockerfile-rw-r--r-- 1 root root 10 6月 11 15:23 .dockerignore-rw-r--r-- 1 root root 33 6月 11 15:20 text1.txt-rw-r--r-- 1 root root 37 6月 11 15:20 text2.txt-rw-r--r-- 1 root root 19 6月 11 15:22 text3.txt 不想把text3.txt上传到server，其中Dockerfile内容为：123FROM nginxCOPY text* /home/RUN echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.html 这样，只需要编辑.dockerignore，将text3.txt添加进去，然后构建镜像即可可以起容器，进去验证：1234567[root@localhost mynginx]# docker run --name web2 -d -p 8070:80 nginx:v476527bd2b0f601e4fa844b9ed3afc4f29da65ee1d202fca6ee6c81380591ad0a[root@localhost mynginx]# [root@localhost mynginx]# docker exec -it web2 bashroot@76527bd2b0f6:/# cd /homeroot@76527bd2b0f6:/home# lstext1.txt text2.txt 可以看到，已经忽略了text3.txt tips：删除镜像：docker rmi imageid123456[root@localhost mynginx]# docker rmi a59be9875db4Untagged: nginx:v4Deleted: sha256:a59be9875db4025dcdab5a26c239302eec9bea47427b04eaa02e2111a800d2ecDeleted: sha256:7cc4283ef786efa1f9e2885533d3c3eb815a273548f5e7bbfda777726173a7b9Deleted: sha256:9e87263adf6572244788519ce5c9338c3e70b6e62cc6f1092e9b257a487ecb3cDeleted: sha256:79b76358156ea32a59800f6d4600a8ce79cc3798cd0ddfcad3362a014f96b397]]></content>
      <categories>
        <category>容器化</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker简单使用（一）]]></title>
    <url>%2F2019%2F06%2F10%2Fdocker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[docker简单使用（一） 镜像操作获取镜像docker获取镜像很简单，docker pull image:tag即可，不加tag默认获取最新latest例如，获取Ubuntu和nginx：12345docker pull ubuntu #获取latestdocker pull ubuntu:16.04 #获取16.04版本ubuntudocker pull nginx #获取latest版nginx 运行镜像获取完镜像之后，可以通过dokcer images来查看：1234567[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEnginx latest 62c261073ecf 5 days ago 109MBubuntu 16.04 2a697363a870 3 weeks ago 119MBubuntu latest 7698f282e524 3 weeks ago 69.9MBhello-world latest fce289e99eb9 5 months ago 1.84kBngrinder/controller latest e7f8d86685cd 3 years ago 246MB 镜像的运行，以ubuntu:16.04为例1docker run -it ubuntu:16.04 可以通过docker ps -a来查看当前运行的镜像：123[root@localhost docker]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES385364730b09 ubuntu:16.04 &quot;/bin/bash&quot; 18 seconds ago Up 16 seconds nervous_jones 其中-it表示以交互式方式运行镜像，这样，就可以进入交互式终端（ubuntu），来进行一些操作，例如查看当前系统：123456789101112root@385364730b09:/# cat /etc/os-releaseNAME=&quot;Ubuntu&quot;VERSION=&quot;16.04.6 LTS (Xenial Xerus)&quot;ID=ubuntuID_LIKE=debianPRETTY_NAME=&quot;Ubuntu 16.04.6 LTS&quot;VERSION_ID=&quot;16.04&quot;HOME_URL=&quot;http://www.ubuntu.com/&quot;SUPPORT_URL=&quot;http://help.ubuntu.com/&quot;BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot;VERSION_CODENAME=xenialUBUNTU_CODENAME=xenial 使用exit退出容器 查看当前容器状态：123[root@localhost ~]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES385364730b09 ubuntu:16.04 &quot;/bin/bash&quot; 2 minutes ago Exited (0) 4 seconds ago nervous_jones 可以看见当前STATUS状态从Up xxx变成了Exited，容器以及被关闭，如果该容器只是用来调试错误，在关闭之后可以进行删除操作：docker rm 385364730b09(Container id) 或者在启动镜像时候就直接指定关闭即删除容器：1docker run -it --rm ubuntu:16.04 运行webserver像类似nginx这样的webserver，运行时候，需要指定端口，可以这样：1docker run --name web1 -d -p 8088:80 nginx 以nginx镜像启动名为web1的容器，端口从80映射到8088，这样，在浏览器中可以使用http://ip:8088打开nginx欢迎页面。 commit保存新镜像前面已经启动了nginx的镜像，并且以8088端口运行，现在，修改nginx的欢迎页面来生成一个新的镜像：1docker exec -it web1 bash 进入容器之后，修改默认页：123echo &apos;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&apos; &gt; /usr/share/nginx/html/index.htmlexit 刷新浏览器页面即可，当前欢迎页已被修改修改了容器的文件，也就是改动了容器的存储层，可以通过docker diff web1来查看具体改动 以上已经完成了修改nginx默认页，现在需要将修改保存成新的镜像，这样后面就可以直接使用123456[root@localhost ~]# docker commit \&gt; --author &quot;kyle&quot; \&gt; --message &quot;change the default page&quot; \&gt; web1 \&gt; nginx:v2sha256:f531cfc896d61fd557748ddabb1ce2233e57f4e88e6cf49502e4c3e03de77eff 然后使用docker images查看：12345678[root@localhost ~]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEnginx v2 f531cfc896d6 12 minutes ago 109MBnginx latest 62c261073ecf 6 days ago 109MBubuntu 16.04 2a697363a870 3 weeks ago 119MBubuntu latest 7698f282e524 3 weeks ago 69.9MBhello-world latest fce289e99eb9 5 months ago 1.84kBngrinder/controller latest e7f8d86685cd 3 years ago 246MB 通过docker history查看镜像的历史记录：1234567891011121314[root@localhost ~]# docker history nginx:v2IMAGE CREATED CREATED BY SIZE COMMENTf531cfc896d6 15 minutes ago nginx -g daemon off; 106B change the default page62c261073ecf 6 days ago /bin/sh -c #(nop) CMD [&quot;nginx&quot; &quot;-g&quot; &quot;daemon… 0B &lt;missing&gt; 6 days ago /bin/sh -c #(nop) STOPSIGNAL SIGTERM 0B &lt;missing&gt; 6 days ago /bin/sh -c #(nop) EXPOSE 80 0B &lt;missing&gt; 6 days ago /bin/sh -c ln -sf /dev/stdout /var/log/nginx… 22B &lt;missing&gt; 6 days ago /bin/sh -c set -x &amp;&amp; addgroup --system -… 54MB &lt;missing&gt; 6 days ago /bin/sh -c #(nop) ENV PKG_RELEASE=1~stretch 0B &lt;missing&gt; 6 days ago /bin/sh -c #(nop) ENV NJS_VERSION=0.3.2 0B &lt;missing&gt; 6 days ago /bin/sh -c #(nop) ENV NGINX_VERSION=1.17.0 0B &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) LABEL maintainer=NGINX Do… 0B &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) CMD [&quot;bash&quot;] 0B &lt;missing&gt; 4 weeks ago /bin/sh -c #(nop) ADD file:fcb9328ea4c115670… 55.3MB 备注： docker commit要慎用，该操作，即使是简单的修改一个默认页面，也会同时添加或改动很多文件，如果是安装软件包、编译构建，那会有大量无关内容被添加进来，不小心清理会导致镜像极为臃肿；并且，docker commit除了制作镜像的人，其他没有人知道执行过什么命令，无法保证下一次可以生成一个一模一样的镜像（以上，来自docker practice） 关于docker镜像的制作，最优良的方式是写dockerfile 这个后面再说]]></content>
      <categories>
        <category>容器化</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个测试问题思考]]></title>
    <url>%2F2019%2F05%2F29%2F%E5%87%A0%E4%B8%AA%E6%B5%8B%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[几个测试问题思考 翻到了关于测试职业生涯的文章，里面有提到几个问题，自己想了想，挺震撼的，之前真没仔细考虑过 如果测试时间不够，怎么办或者可以延伸为，如果测试时间不够，肯定不能够全部覆盖的进行测试，是否可以只测试客户关心的，比较常用的功能？ 想了挺久，结合网友的讨论，我给出的答案是：作为测试，碰到时间紧张，测试资源欠缺，我们所唯一能做的就是上报公司，让公司协调人工和资源做延期处理。这样做，公司可能会因为不能如期交付而受到一定的经济损失，但交付一个合格的产品给客户，绝对不会有信誉上的损失（即使做了常用功能的测试，也不能保障产品就已经达到的交付标准，实在是中彩票的事情），从长远来看，会有更多的收益； 作为测试，我们没有任何权利自己做风险处理，“测客户关心的，测主要功能”都是错误的测试行为； 作为测试，坚守自己的职业道德底线，只做职责范围内和力所能及的事情； 最后，一个大话，作为测试，不仅需要对支付你工资的老板负责，也请为你手中的产品负责，为客户支付的金钱负责。 如果让你测试一个完全不熟悉的系统，怎么办前提当然是可能没有需求说明书，甚至没有产品架构图看到testerhome上一个回答，很有启发性没有标准答案，参考如下： 先去直接操作和观察被测物。（比直接奔向需求要加分很多，想一下，你实际工作中，快速理解一个东西靠的是什么？肯定不是先读文档，且不说这些文档是不是能够正确的描述被测物） 其他信息来源：同类产品，说明书，直接操作、观察被测物，原有版本，找产品经理，找开发，找销售，运维，客服，找用户，公司知识库，历史邮件，会议纪要，原来的各种文档，代码，google，相关法规，行业标准。。。 如果项目进度很赶，会先上手操作，参考能找到的一切文档及信息源，通过迭代，一边学一边加深理解，一边给出质量反馈； 思考是什么原因造成这样的局面：没有需求文档，没有架构图，开发很赶没空搭理。怎么解决：推动知识库建设和必要的文档输出，也是很重要的。 怎么优化测试工作开发提测质量不高。测试的头几天，很多主流程都走不通，导致测试总是在等待，或者是跟着开发一起联调。而这段时间，已经被习惯性的认为是测试时间了，因为：提测了 项目抱怨，测试时间过长，如何缩短测试时间 先分析测试时间过长的原因，可能是： 测试环境不可用，测试环境被占用 开发提测质量不高，主流程都走不通 解决办法：关于环境问题，可能可以实施： 监控环境使用率，可用率（时间占比）； 规范部署，部署时间，操作人，checklist； 制定规则，权限分明，操作环境的人员，分工； 确定部署人员，backup人员，完整可行的部署手册 环境分组，分版本操作（更新devops技能，docker容器化进行环境隔离） 等等… 关于提测质量 测试可以： 有明确的测试计划，并让所有干系人都有明确的预期 测试依据风险测试，最大的风险得到最快的cover，科学分配时间，明显缩短bug反馈时间弧 bug严格管理，所有重要bug都及时修复 良好的沟通和汇报机制，每天让团队主要干系人清晰的知道，距离发布还差多远 外部资源联调非常早的进行，不会让它在测试后期成为测试blocker。 要求开发可以： 根据测试提供冒烟用例，开发必须完成一定程度的自测才能提测。 测试和开发做自动化同期共建，在开发过程中，核心功能就被自动化用例保护起来了。 开发切分feature提测，而不是攒一个大招一下子提一坨 代码Codereview变成团队常规活动，QA在早期跟进核心代码，把问题坑杀在萌芽阶段 结合新的理念，测试左移：提前参与；测试右移：生产监控体系；全面保障产品质量，并且提高测试效率。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[闲谈测试理论]]></title>
    <url>%2F2019%2F05%2F28%2F%E9%97%B2%E8%B0%88%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[闲谈测试理论 测试理念也是个人的测试坚持吧，有很多，最在意的几条 不为进度牺牲质量 软件测试，绝对不存在随便点点 测试人员要全力关注的是测试设计 测试工程师，是产品的第一批用户，关注用户满意度 测试工作从需求出发软件产品的设计、研发、测试、投产，一定是为了满足一定的需求，PRD（产品需求文档）所描述的产品需求，是切研发、测试开展的基础。或许现在很多公司号称敏捷开发， 没有PRD，那也一定会在类似wiki上有相应的记载，如果这个也没有，那产品最终的质量是很值得怀疑的，毕竟一点需求痕迹都没有，那测试人员的测试根据，就只是开发实现了，比起PO的需求，已经产生了很大的偏差。 测试人员进行软件测试必须从需求出发。首先要全面了解需求，包括其背景、关联性、用户特点等；其次要深入挖掘隐含的需求和关联，包括某个需求隐含了 对于系统现有功能的修改等等。 我们只有在全面、深入了解需求的基础上，才能设计全面、有效的测试用例来进行测试，以满足对于软件产品满足需求的基本质量保证。 测试设计测试活动，最应该关注的是测试设计，而不是最后冷冰冰的执行了多少多少用例，提交了多少多少bug。 测试设计的基础是对于需求的全面理解，并且在需求的基础上，对于需求实现的设计进行一定的了解；很多测试人员进行测试活动的依据都是需求文档，而忽略了开发的逻辑设计这一块；如果可以进行一定的开发设计分析的话，可以帮助我们测试人员更加全面的进行质量验证（有些时候，开发是可以实现需求，但是会出现数组溢出等问题，这样的问题，在其他地方可能就会引起重大的bug） 个人觉得，关注测试设计，才是关注了软件测试之道 测试目标需要明确的是，软件测试，是在生命周期的接近最末端，单单靠测试，是无法保证软件质量的，测试人员，是软件质量的验证者，并不是保障，软件质量需要整个生命周期，整个团队一起努力。 软件测试并不能保证测试活动结束之后，产品没有bug，这是不现实的，没有一个软件产品可以号称自己没有bug，同样，这也不是测试的目标。 引用网上看到的一句话：测试活动-是一个运用测试的思维和各种测试理论及方法，将所测试的软件产品的每一个功能都改变成一组特定的输入和一组特定的输出一一确定对应的形式，形成测试用例，然后待开发人员提交测试后，在测试环境部署被测程序，根据测试用例进行主动测试的过程。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[所谓测试新时代]]></title>
    <url>%2F2019%2F05%2F27%2F%E6%89%80%E8%B0%93%E6%B5%8B%E8%AF%95%E6%96%B0%E6%97%B6%E4%BB%A3%2F</url>
    <content type="text"><![CDATA[所谓测试新时代 2019 软件测试翻到了World Quality Report 2018-19看了好几项，也看了testerhome，软件质量报告等优秀公众号的文章，世界的确在变。 2019甚至之后很多年，国内的软件测试和质量保障人员的职责，已经不是单纯的找bug，现在我们需要做的，是客户满意度和业务成果的推动者。刚入行时候，就一直挂在嘴边的一句话，软件测试，是要站在客户角度看问题，但是随着节奏越来越快，“涉世”越来越深，逐渐的，也就成了，找到个bug，提交各jira，结束，曾几何时，我们就迷失了自己；现在World Quality Report 2018-19再次提出了，客户满意度这个词，也是对我们已经迷茫的测试人员一个警醒。 2019软件测试的趋势AI在质量保障和测试中的作用随着过去一年甚至几年的AI大潮，AI技术在软件测试中越来越有应用市场，对于自动化的保障、对本身的AI产品的测试、使用AI进行质量预测等等，说实话，是个新技术，也是未来的一个趋势，但是目前该方案还没有那么的普及，很多公司，自身都没有响应的人工智能开发，所以，至少对我来说，是个值得参考的方向，但当前阶段，我不会去过多关注。 敏捷以及devops这个，至少在我现在在的公司，是大谈特谈，从最高层开始，大力推行所谓敏捷开发，敏捷团队，说实话，一个小而优的团队，进行快速迭代对于产品来说，肯定是好的，同时配以devops，辅助CI\CD，全自动化回滚，测试等，可以想象，这样的团队，日常开发、测试、发布的效率有多高。但是实际上呢，从我现在公司的状况来看，一味的牺牲质量去追求速度，为了敏捷实施敏捷，到头来是留下了一堆祸根，客户生产问题接踵而至，整个产线疲于应付客户问题，无心关注新的功能点的设计，质量控制，继续往后，新的功能点进行快速迭代上线，缺乏有效的测试，更加增加了祸根数量，为后续的生产问题集中爆发写下了引言，整个，已经形成了恶性循环。 同时，敏捷团队和devops的转型，已经打乱了原来的QA团队，所有人分配到了不同的产线，这样使得跨项目的合作共享变成尤其困难。这点值得吐槽的更多，算了，不说了。 自动化这个已经不是新鲜事了，几乎所有公司都在追求自动化。也用现在的公司来举例子吧，当前实现的自动化 产品重构多，自动化脚本几乎每次都会随着产品新迭代进行更新，没有一个可以适应多版本的自动化方案； 自动化测试环境以及自动化测试数据，准备异常繁琐，大多时间是消耗在环境排查及数据准备上； 自动化技术及理念不推陈出新，并没有思考过怎么样进行更高效的自动化覆盖，一味的沉溺于维护当前脚本； 测试环境和成本关于测试环境和测试数据，很多公司做法不一样，但是同样的，对于测试来说，很多时候，问题是出现在测试环境上，很多时间是消耗在准备测试数据上，如何进行快速的测试环境部署，以及如何保障测试数据复用真的是衡量一个企业测试团队成熟度的一项指标。 应对策略以智能的、分阶段的方式提升基础自动化和智能测试自动化水平未来，自动化肯定是测试的必备技能，团队的自动化测试水平，很直接的会影响到后续一系列开展，是真的可以决定团队是否能真正开展敏捷的关键。 World Quality Report 2018-19给的建议如下：1231, 优化测试2，实施基础的自动化测试3，采用智能的、自适应的测试自动化方案让自动化变得更加“智能” 以非孤立的方式实施测试数据和测试环境的管理企业要开始生命周期的自动化，把测试自动化和数据、环境的准备工作一起开展，不要分离开来。另外，要采用更加智能的方式来管理测试环境和数据。 构建超出测试开发（SDET）之外的质量工程技能这项，原谅才疏学浅，暂时get不到，抄录一下。。1234567891011敏捷、DevOps、云、IoT、区块链和AI这些新趋势的发展，以及更加自动的、集成的质量保障方法的需求，企业需要关注新的质量技能。推荐以下方式做好质量保障能力建设：1、第一优先级是吸引敏捷测试专家，需要具备功能自动化技能和领域测试技能，自动化测试将是每个质量保障人员的必备技能；2、第二优先级是吸引 SDET ，他们的必备技能要求有高级自动化测试、白盒测试、开发和平台构建能力，同时最好还有 AI 应用的基础算法应用能力和自然语言处理技能；3、第三优先级是吸引拥有一些特定 QA 技能集的人员，比如安全等非功能测试、测试环境和数据的管理技能等；4、第四优先级是吸引高级 QA 专家，需要有AI架构技能，以构建能够执行重复、智能任务的“智能资产”，这些技能由深度机器学习概念和算法组成，比如决策树、分类器、神经网络、高级统计学和数据优化技能。 小结1，未来，我们需要更加关注客户满意度，追求速度，忽视客户满意度，迟早药丸；2，低水平的自动化测试，测试数据及测试环境的管理已经影响到整个敏捷的实施；加强自动化培训，更加规范科学的进行测试数据及环境的管理，才能更好保障QA实施；3，测试人员，需要更多的必备技能，来应对未来的挑战；这点上，个人还是坚持，测试人员需要明了并坚定自己的测试理念。以此为根基，进行测试技术的扩展，才是可行的路。 参考文章 2019 软件测试行业 5 大关键趋势与应对策略]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试 有惑]]></title>
    <url>%2F2019%2F05%2F27%2F%E6%B5%8B%E8%AF%95-%E6%9C%89%E6%83%91%2F</url>
    <content type="text"><![CDATA[测试有惑 最近因为一些事情，一度要转devops，一个我们这样的小互联网环境下还比较不常用的词汇；同时也遇上要手工造200多个excel这样的无语需求，烦躁之际，看到几篇文章，静下来好好想想，我现在的软件测试，是不是已经迷茫了。 测试有惑最近挺长时间，身边充斥着新兴技术，“大数据”、“容器化”、“微服务”、“service mesh”、“AI”等等，很长一段时间，我也像绝大多数人一样，追在后面，无尽的翻阅着“大数据下如何进行软件测试”、“如何测试分布式系统”、“容器化时代的测试技术”等等诸如此类的文章，渐渐的，从一个测试，学了python，关注了docker，k8s，到如今的servicemesh，istio；渐渐的，也感觉越来越无力，越来越迷茫，我的所作，是不是已经完成偏成了追求工具，追求新鲜，对于软件测试最基本的理论，是不是已经忘记的差不多了。 看到一篇博客，作者写了一句话，我也问了自己，发现，有点悲哀。 面对被测对象，你的测试理念是什么，是否清楚，为何而战。 技术，永远处于不断重构中，而自己的测试理念，信念，才是作为测试从业者的根基，互联网的世界里，技术上的推陈出新永远比你的学习速度要快，一味的去追求技术，是不是需要担心，有一天，作为没有坚实测试理念的我们，会被技术革了命。 越来越迷茫，默然做着自己都不知道为什么的测试的我们，是不是可以稍微等一等，停下来重新寻找，或许已经丢失了的，我们的软件测试之道。]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[excel随机函数]]></title>
    <url>%2F2019%2F05%2F23%2Fexcel%E9%9A%8F%E6%9C%BA%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[excel随机函数 前言需要给客户一份性能报告，然后有些数据需要稍微修饰下，服务器资源部分，采用的是之前nmon生成的报告，nmon的报告可以通过修改数据，自动生成图像，然后我们就需要在一个数值区间内生成几千个数据，来尽量真实点（o(╥﹏╥)o）（好没下限的感觉） 例如，现在需要出一个CPU使用率的监控图像，采用nmon和nmon_analyser生成了图像之后，找到cpu sheet页，通过更改User%，Sys%，Wait%以及Idle%来生成需要的数据的监控图像 现在需要生成一个CPU使用率在76%左右的图像，也就是需要User%的值大约在[74%, 78%]这个区间内，然后需要的是1000个这个区间的随机数，生成随机数的方法很多，这边介绍的excel的函数 RAND()直接上用法 如果要生成[0, 10]，单元格内输入=RAND()*10，回车即可，按F9刷新 如果要生成[0.50]，单元格内输入=RAND()*50，回车即可，按F9刷新 然后，如果要生成[1, 8]，单元格内输入=RAND()*7+1，回车即可，按F9刷新 因此，我们的需求可以在单元格内写=RAND()*4+74，回车即可，按F9刷新（1000条数据，直接往下拖即可） 纯粹是个无聊小技能。。 以上，完~]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[appium使用uiautomator2无法启动app问题]]></title>
    <url>%2F2019%2F05%2F22%2Fappium%E4%BD%BF%E7%94%A8uiautomator2%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8app%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[appium使用uiautomator2无法启动app问题 之前有遇到过Android 7之后，使用appium登录进去之后，拿不到元素，page_source获取也超时，找了资料，都说是android 7的原因，解决办法很简单，appium起的时候，加个参数就行了,改成下面这样：12345678910desired_caps = &#123;&#125;desired_caps[&apos;platformName&apos;] = &apos;Android&apos;desired_caps[&apos;platformVersion&apos;] = &apos;8.1.0&apos;desired_caps[&apos;deviceName&apos;] = &apos;yanfyang&apos;desired_caps[&apos;appPackage&apos;] = &apos;com.kuaikan.comic&apos;desired_caps[&apos;appActivity&apos;] = &apos;com.kuaikan.comic.ui.LaunchActivity&apos;desired_caps[&apos;automationName&apos;] = &apos;uiautomator2&apos;desired_caps[&apos;noReset&apos;] = Truedriver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, desired_caps) 增加了一个：desired_caps[&#39;automationName&#39;] = &#39;uiautomator2&#39; 这样直接启动，会有点问题 Message: An unknown server-side error occurred while processing the command. Original error: Could not sign with default certificate.后面还有更有价值的报错，完整的不记得了，大概是这样1C:\Program Files (x86)\Appium\resources\app\node_modules\appium-uiautomator2-server\apks\appium-uiautomator2-server-v3.1.1.apk Access denied 看到Access denied，首先就检查了下，因为当前电脑是域账号登录的，不是管理员，对那个报错的文件夹，权限只有读，没有写的权限，看样子问题是权限的 解决办法：打开appium时候，右键使用管理员权限打开，这样就可以了 命令行方式管理员运行appiumlinux或者mac好解决，sudo 即可，windows下，查了点资料，有个命令：1runas /user:Administrator Appium.exe 需要进入appium目录下执行 执行这条命令，会让输入一个administrator的密码，这个密码，可以更改，方法：1右击我的电脑——管理——本地用户和组——点击用户——选择administrator——右击设置密码 1327: 用户帐户限制阻止了此用户进行登录。例如：不允许使用空密码，登录次数的限制，或强制实施的某个策略限制。输入密码之后，还是会报错上述错误，这个，是由于没有解禁用户造成的，解禁办法：1右击我的电脑——管理——本地用户和组——点击用户——选择administrator——右击——选择属性——取消勾选 账户已禁用 以上，完~]]></content>
      <categories>
        <category>appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>uiautomator2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jumpserver简单使用]]></title>
    <url>%2F2019%2F05%2F21%2Fjumpserver%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[jumpserver简单使用 Jumpserver搭建完成之后，就可以通过堡垒机跳转到制定的机器了，登录jumpserver： 要么直接是命令行(xshell 客户端)：1ssh username@192.168.0.1 2222 回车再输入密码即可（192.168.0.1是jumpserver搭建的服务器的ip） 使用xshell客户端秘钥进行登录，jumpserver服务器创建登录用户，设置密码，生成公钥和私钥，xshell使用该用户进行登录（具体设置后面会说明） jumpserver登录web页面有几块：仪表盘、用户管理、资产管理、权限管理、会话管理、作业中心、日志审计、系统设置简单介绍一下基本的一些用法 系统设置系统设置里面有几个，基本设置、邮件设置、LDAP设置、终端设置、安全设置 基本设置很简单，配置下当前jumpserver web端的url即可，Email主题前缀就是发送的邮件主题前缀，可以自定，没啥好说的; 1# 修改 url 的&quot;localhost&quot;为你的实际 url 地址, 否则邮件收到的地址将为&quot;localhost&quot; 也无法创建新用户 邮件设置，根据实际的邮件配置即可，使用SSL，端口为465，设置完成之后，可以点击“测试连接”试试看能不能成功；1234# 点击页面上边的&quot;邮件设置&quot;, 进入邮件设置页面# 默认使用 25 端口, 不勾选 SSL 和 TLS; 如果需要勾选 SSL, 端口需要修改成 465; 如果需要勾选 TLS, 端口需要改成 587# 不可以同时勾选 SSL 和 TLS# 配置邮件服务后, 点击页面的&quot;测试连接&quot;按钮, 如果配置正确, Jumpserver 会发送一条测试邮件到您的 SMTP 账号邮箱里面, 确定收到测试邮件后点击保存即可使用 LDAP设置，统一用户认证，看你需不需要使用域账号了，具体怎么配置可以咨询IT；1234# 如果不需要使用&quot;ldap&quot;用户登陆 jumpserver, 可以直接跳过, 不需要设置# 先&quot;测试&quot;通过才能保存# DN 和 OU 一定要完整(如 &quot;DN:cn=Manage,ou=Jumpserver,dc=jumpserver,ou=org&quot;)# 注：可借用第三方 gui 工具查看 ldap 用户的属性, 新版本已经支持中文名登录, 即cn=中文也可正常使用 终端设置，按需勾选，密码认证，密钥认证等；123456# &quot;密码认证&quot;和&quot;密钥认证&quot;是 SSH 连接跳板机时所使用的认证方式(都不选会造成无法使用 SSH 方式连接登录跳板机, 不影响 web 登录)# &quot;Telnet成功正则表达式&quot; telnet设备登陆失败需要设置# &quot;命令存储&quot;&quot;录像存储&quot;位置设置# &quot;命令存储&quot;&quot;录像存储&quot;修改后, 需要在Jumpserver 会话管理-终端管理 修改terminal的配置 录像存储 命令记录, 然后重启 Jumpserver 服务# 设置后重启 Coco 才能生效 安全设置，也是按需勾选；1234# &quot;MAF二次认证&quot;勾选会开启全局强制&quot;MFA&quot;, 所有 jumpserver 用户必须使用动态口令进行认证登录(即时生效)# &quot;限制登录失败&quot;和&quot;限制登录时间&quot;设置需要重启 jumpserver 才能生效# &quot;SSH最大空闲时间&quot;设置需要重启 coco 才能生效# &quot;密码校验规则&quot;设置立即生效 用户管理用户管理分用户列表和用户组，顾名思义，jumpserver的用户和组；根据实际需要创建对应的用户，和组，用户分到对应的组即可；1234567# 点击页面左侧&quot;用户列表&quot;菜单下的&quot;用户列表&quot;, 进入用户列表页面# 点击页面左上角&quot;创建用户&quot;按钮, 进入创建用户页面, (也可以通过右上角导入模版进行用户导入)# 其中, 用户名即 Jumpserver 登录账号(具有唯一性, 不能重名)。名称为页面右上角用户标识(可重复)# 成功提交用户信息后, Jumpserver 会发送一条设置&quot;用户密码&quot;的邮件到您填写的用户邮箱# 点击邮件中的设置密码链接, 设置好密码后, 您就可以用户名和密码登录 Jumpserver 了。# 用户首次登录 Jumpserver, 会被要求完善用户信息, 按照向导操作即可。注：MFA 即 Google Authenticator, 使用此软件需要APP时间与浏览器时间同步 关于创建用户及完善用户信息，为了方便后续使用xshell客户端可以使用密钥登录，需要一点注意： 首先，在jumpserver服务器上创建登录的账号，设置密码，生成公钥和私钥(root账号)： 12345678#新增用户useradd kyle# 设置新密码passwd kyle# 生成公钥及私钥（记得过程中输入密钥的密码，后面会用到）ssh-keygen 在用户的家目录下（/home/kyle），会有.ssh文件夹（ls -al），里面是生成的公钥和私钥（cd /home/kyle/.ssh &amp;&amp; ls -al），这边用id_rsa_1和id_rsa_1.pub表示，便于识别 在jumpserver服务器上创建完账号kyle之后，在jumpserver web界面创建用户，用户名使用kyle，邮件自填，点击保存，等着收邮件，邮件会提示改密码，更改了密码之后，会进行完善用户信息，最主要的就是一个密钥，将之前生生成的公钥（id_rsa_1.pub）内容填进去即可(cat，复制) 资产管理资产管理顾名思义就是管理设备的地方 资产列表管理资产的节点，左边是资产树，右击可以进行增删改操作，右侧是该节点下的资产，界面挺简单 网域列表这个功能没用过，看官方文档介绍的，12网域功能是为了解决部分环境（如：混合云）无法直接连接而新增的功能，原理是通过网关服务器进行跳转登录。 JMS =&gt; 网域网关 =&gt; 目标资产 管理用户jumpserver的管理用户，可以理解为资产上的root用户，或者是具备all sudo权限的用户；页面直接点创建管理用户，填写资产机器的root账号信息，或者用all sudo权限的账号信息即可（有个添加秘钥的选项，这个可以设置，root在目标机器上生成公钥和私钥，再引过来即可） 系统用户官方解释：1系统用户是 Jumpserver跳转登录资产时使用的用户，可以理解为登录资产用户，如 web, sa, dba(`ssh web@some-host`), 而不是使用某个用户的用户名跳转登录服务器(`ssh kyle@some-host`); 简单来说是 用户使用自己的用户名登录Jumpserver, Jumpserver使用系统用户登录资产。 系统用户创建时，如果选择了自动推送 Jumpserver会使用ansible自动推送系统用户到资产中，如果资产(交换机、windows)不支持ansible, 请手动填写账号密码。 以下为官方文档的注意事项：1234567891011121314151617181920# &quot;系统用户&quot;是 Jumpserver 跳转登录资产时使用的用户, 用户使用该用户登录资产# &quot;自动生成密码&quot;、&quot;自动推送&quot;、&quot;Sudo&quot;等功能需要对应资产的&quot;管理用户&quot;是且有root权限, 否则自动推送失败# ssh 协议的 &quot;Sudo&quot; 栏设定用户的 sudo 权限,# ssh 协议如果创建的&quot;系统用户&quot;已在资产上面存在, &quot;推送&quot;将会覆盖掉原用户的&quot;home&quot;目录权限(注: 替换成700权限)# ssh 协议的 &quot;ssh私钥&quot; 如果私钥有密码, 请把key的密码填在密码栏上, 目前仅支持 RSA DSA 格式私钥# 这里简单举几个 &quot;sudo&quot; 设置例子Sudo /bin/su # 当前系统用户可以免sudo密码执行sudo su命令Sudo /usr/bin/git, /usr/bin/php, /bin/cat, /bin/more, /bin/less, /usr/bin/tail# 当前系统用户可以免sudo密码执行git php cat more less tailSudo !/usr/bin/yum # 当前系统用户不可以执行sudo yum命令# 此处的权限应该根据使用用户的需求汇总后定制, 原则上给予最小权限即可# &quot;系统用户&quot;创建时, 如果选择了&quot;自动推送&quot; Jumpserver 会使用&quot;Ansible&quot;自动推送系统用户到资产中, &quot;root&quot;用户不支持推送# 如果资产(交换机、Windows)不支持&quot;Ansible&quot;, 请去掉&quot;自动生成密钥&quot;、&quot;自动推送&quot;勾选。手动填写资产上已有的账号及账号密码# 如果想让用户登录资产时自己输入密码, 可以在创建系统用户时选择&quot;手动登录&quot; 权限管理权限管理下，主要就是资产授权，可以创建授权规则，选择用户或者组12345# &quot;名称&quot;, 授权的名称, 不能重复# &quot;用户&quot;和&quot;用户组&quot;二选一, 不推荐即选择用户又选择用户组# &quot;资产&quot;和&quot;节点&quot;二选一, 选择节点会包含节点下面的所有资产# &quot;系统用户&quot;, 及所选的用户或用户组下的用户能通过该系统用户使用所选节点或者节点下的资产# 用户(组), 资产(节点), 系统用户是一对一的关系, 所以当拥有 Linux、Windows 不同类型资产时, 应该分别给 Linux 资产和 Windows 资产创建授权规则 Jumpserver一些名词解释用户管理 用户组多个用户可以组合成用户组，为了方便进行授权，可以将一个部门或者几个用户组成用户组，在授权中使用组授权，该组中的用户拥有所有授权的主机权限 用户用户是授权和登陆的主体，将来为每个员工简历一个账户，用来登录跳板机，将资产授权给改用户 资产管理 资产资产通常是我们的服务器、网络设备等，将资产授权给用户，用户则会有权限登录资产，执行命令等 管理账号添加资产时需要一个管理账号，该账号是该资产上已有的有管理权限的用户，如root，或者是有NOPASSWD:ALL sudo权限的用户，改管理账号用来向资产推送系统用户，为系统用户添加sudo，获取资产的一些信息 授权管理 系统用户系统用户是服务器上建立的一些真实存在的可以ssh登陆的用户，如dev,sa,dba等，系统用户可以使用jumpserver推送到服务器上，也可以利用自己公司的工具进行推送，授权时将用户、资产、系统用户关联起来，则表明用户有权限登陆该资产的这个系统用户，例如：用户小明以dev系统用户登录192.168.0.2资产，简单理解就是，将某个资产上的某个系统用户映射给这个用户登录 用户作用：123456789登录web（使用用户）登陆跳板机（使用用户）跳转登陆Client端（使用系统用户）系统用户 关联sudo（就是sudo授权），该系统用户就拥有sudo权限推送系统用户（使用管理用户，管理用户是Client端上已有的用户并且有sudo权限） 以上，完~ 参考文档 官方指导文档优秀指导文档]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Jumpserver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装jumpserver堡垒机]]></title>
    <url>%2F2019%2F05%2F20%2Fcentos7%E5%AE%89%E8%A3%85jumpserver%E5%A0%A1%E5%9E%92%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[centos7安装jumpserver堡垒机 Jumpserverjumpserver是一款常用的开源堡垒机方案，基于python+django，适合上手，安装需要确保python3环境 centos7下python2和python3共存 安装jumpserver克隆项目123cd /optgit clone --depth=1 https://github.com/jumpserver/jumpserver.git 安装RPM包123cd /opt/jumpserver/requirementsyum -y install `cat rpm_requirements.txt` 安装python库依赖tip: 安装pip，实际可以使用pip3安装依赖安装pip12345678# 安装epel扩展源yum -y install epel-release# 安装pipyum -y install python-pip# 清楚cacheyum clean all 安装依赖1pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ 安装redis使用redis作为cache和celery broke12345yum -y install redissystemctl enable redissystemctl start redis 配置数据库这边使用的是MySQL，安装教程就不写了，很简单，创建jumpserver库和用户：12345678create database jumpserver character set utf8;create user jumpserver@&apos;%&apos; identified by &apos;pwd&apos;;GRANT ALL PRIVILEGES ON *.* TO &apos;jumpserver&apos;@&apos;%&apos; IDENTIFIED BY &apos;pwd&apos; WITH GRANT OPTION;flush privileges;exit; 修改jumpserver配置文件123cd /opt/jumpservercp config_example.yml config.yml 123456789# 生成随机SECRET_KEYSECRET_KEY=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 50`echo &quot;SECRET_KEY=$SECRET_KEY&quot; &gt;&gt; ~/.bashrc# 生成随机BOOTSTRAP_TOKENBOOTSTRAP_TOKEN=`cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16`echo &quot;BOOTSTRAP_TOKEN=$BOOTSTRAP_TOKEN&quot; &gt;&gt; ~/.bashrc 1234567891011sed -i &quot;s/SECRET_KEY:/SECRET_KEY: $SECRET_KEY/g&quot; /opt/jumpserver/config.ymlsed -i &quot;s/BOOTSTRAP_TOKEN:/BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN/g&quot; /opt/jumpserver/config.ymlsed -i &quot;s/# DEBUG: true/DEBUG: false/g&quot; /opt/jumpserver/config.ymlsed -i &quot;s/# LOG_LEVEL: DEBUG/LOG_LEVEL: ERROR/g&quot; /opt/jumpserver/config.ymlsed -i &quot;s/# SESSION_EXPIRE_AT_BROWSER_CLOSE: false/SESSION_EXPIRE_AT_BROWSER_CLOSE: true/g&quot; /opt/jumpserver/config.ymlsed -i &quot;s/DB_PASSWORD: /DB_PASSWORD: $DB_PASSWORD/g&quot; /opt/jumpserver/config.yml 查看SECRET_KEY和BOOTSTRAP_TOKEN123456cat ~/.bashrc或者echo -e &quot;\033[31m 你的SECRET_KEY是 $SECRET_KEY \033[0m&quot;echo -e &quot;\033[31m 你的BOOTSTRAP_TOKEN是 $BOOTSTRAP_TOKEN \033[0m&quot; 人工确认修改没有问题：vim /opt/jumpserver/config.yml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# SECURITY WARNING: keep the secret key used in production secret!# 加密秘钥 生产环境中请修改为随机字符串，请勿外泄, 可使用命令生成 # $ cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 49;echoSECRET_KEY: # SECURITY WARNING: keep the bootstrap token used in production secret!# 预共享Token coco和guacamole用来注册服务账号，不在使用原来的注册接受机制BOOTSTRAP_TOKEN: # Development env open this, when error occur display the full process track, Production disable it# DEBUG 模式 开启DEBUG后遇到错误时可以看到更多日志DEBUG: false# DEBUG, INFO, WARNING, ERROR, CRITICAL can set. See https://docs.djangoproject.com/en/1.10/topics/logging/# 日志级别LOG_LEVEL: ERROR# LOG_DIR: # Session expiration setting, Default 24 hour, Also set expired on on browser close# 浏览器Session过期时间，默认24小时, 也可以设置浏览器关闭则过期# SESSION_COOKIE_AGE: 86400SESSION_EXPIRE_AT_BROWSER_CLOSE: true# Database setting, Support sqlite3, mysql, postgres ....# 数据库设置# See https://docs.djangoproject.com/en/1.10/ref/settings/#databases# SQLite setting:# 使用单文件sqlite数据库# DB_ENGINE: sqlite3# DB_NAME: # MySQL or postgres setting like:# 使用Mysql作为数据库DB_ENGINE: mysqlDB_HOST: 127.0.0.1DB_PORT: 3306DB_USER: jumpserverDB_PASSWORD: DB_NAME: jumpserver# When Django start it will bind this host and port# ./manage.py runserver 127.0.0.1:8080# 运行时绑定端口HTTP_BIND_HOST: 0.0.0.0HTTP_LISTEN_PORT: 8080# Use Redis as broker for celery and web socket# Redis配置REDIS_HOST: 127.0.0.1REDIS_PORT: 6379# REDIS_PASSWORD: # REDIS_DB_CELERY: 3# REDIS_DB_CACHE: 4# Use OpenID authorization# 使用OpenID 来进行认证设置# BASE_SITE_URL: http://localhost:8080# AUTH_OPENID: false # True or False# AUTH_OPENID_SERVER_URL: https://openid-auth-server.com/# AUTH_OPENID_REALM_NAME: realm-name# AUTH_OPENID_CLIENT_ID: client-id# AUTH_OPENID_CLIENT_SECRET: client-secret## Use Radius authorization# 使用Radius来认证# AUTH_RADIUS: false# RADIUS_SERVER: localhost# RADIUS_PORT: 1812# RADIUS_SECRET: # OTP settings# OTP/MFA 配置# OTP_VALID_WINDOW: 0# OTP_ISSUER_NAME: Jumpserver 运行Jumpserver1234567cd /opt/jumpserver# 后台运行./jms start all -d# 其他命令./jms start|stop|status all 安装SSH Server和 WebSocket Server：Cococlone项目1git clone --depth=1 https://github.com/jumpserver/coco.git 安装依赖12345cd /opt/coco/requirementsyum -y install $(cat rpm_requirements.txt)pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/ 修改配置1234567cd /opt/coco/cp config_example.yml config.ymlsed -i &quot;s/BOOTSTRAP_TOKEN: &lt;PleasgeChangeSameWithJumpserver&gt;/BOOTSTRAP_TOKEN: $BOOTSTRAP_TOKEN/g&quot; /opt/coco/config.ymlsed -i &quot;s/# LOG_LEVEL: INFO/LOG_LEVEL: ERROR/g&quot; /opt/coco/config.yml vim /opt/coco/config.yml 启coco12345# 后台启动./cocod start -d# 更多命令./cocod start|stop|statu 安装Web Terminal 前端: Luna直接下载解压12345678cd /optwget https://github.com/jumpserver/luna/releases/download/1.4.10/luna.tar.gz#如果网络有问题导致下载无法完成可以使用下面地址wget https://demo.jumpserver.org/download/luna/1.4.10/luna.tar.gztar -zxvf luna.tar.gzchown -R root:root luna nginx配置安装nginx1234yum install yum-utils# 配置nginx yum源vim /etc/yum.repos.d/nginx.repo 内容：123456[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.key 安装：12345678yum makecache fastyum install -y nginxmv default.conf default.conf_20190520.bak# 修改配置vim /etc/nginx/conf.d/jumpserver.conf 修改如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859server &#123; listen 80; # 代理端口, 以后将通过此端口进行访问, 不再通过8080端口 # server_name demo.jumpserver.org; # 修改成你的域名或者注释掉 client_max_body_size 100m; # 录像及文件上传大小限制 location /luna/ &#123; try_files $uri / /index.html; alias /opt/luna/; # luna 路径, 如果修改安装目录, 此处需要修改 &#125; location /media/ &#123; add_header Content-Encoding gzip; root /opt/jumpserver/data/; # 录像位置, 如果修改安装目录, 此处需要修改 &#125; location /static/ &#123; root /opt/jumpserver/data/; # 静态资源, 如果修改安装目录, 此处需要修改 &#125; location /socket.io/ &#123; proxy_pass http://localhost:5000/socket.io/; # 如果coco安装在别的服务器, 请填写它的ip proxy_buffering off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; access_log off; &#125; location /coco/ &#123; proxy_pass http://localhost:5000/coco/; # 如果coco安装在别的服务器, 请填写它的ip proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; access_log off; &#125; location /guacamole/ &#123; proxy_pass http://localhost:8081/; # 如果guacamole安装在别的服务器, 请填写它的ip proxy_buffering off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; access_log off; &#125; location / &#123; proxy_pass http://localhost:8080; # 如果jumpserver安装在别的服务器, 请填写它的ip proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125;&#125; 启动nginx123systemctl enable nginxsystemctl start nginx 访问jumpservernginx启动后，浏览器访问http:ip:nginx配置的端口即可访问，默认账密admin/admin 测试连接如果登录客户端是 macOS 或 Linux, 登录语法如下$ ssh -p2222 admin@192.168.244.144$ sftp -P2222 admin@192.168.244.144密码: admin 如果登录客户端是 Windows, Xshell Terminal 登录语法如下$ ssh admin@192.168.244.144 2222$ sftp admin@192.168.244.144 2222密码: admin如果能登陆代表部署成功 以上，完~ 官方文档 官方安装指导]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Jumpserver</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个linux命令小技巧]]></title>
    <url>%2F2019%2F05%2F15%2F%E5%87%A0%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%E5%B0%8F%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[一些Linux技巧型命令 可能不是太常用，算是可以提高效率的一点点方式，简单实践了一下。 光标类不同于vi/vim下的h、j、k、l上下左右移动，这边介绍的是普通模式下的光标移动。 删除从行开头到光标处的命令ctrl + u示例：1[root@localhost ~]# cd /home/;ll光标处 按下ctrl+u，会将cd /home/;ll该行删除 删除从光标到结尾处的命令ctrl + k示例：1[root@localhost ~]# cd /home/;光标处ll 按下ctrl+k，会将ll删除 删除一个词（空格隔开的字符串）ctrl + w示例：1[root@localhost ~]# ls -al光标处 按下ctrl w，会将-al删除 资源查看各目录子目录占用空间大小tips: -h参数会将结果展示为人类可读的方式，所以结果会加上M、G这样的单位 查看当前磁盘占用情况，这个都知道df -h查看目录各子目录占用空间大小，例如查看/home下各子目录空间大小1234[root@localhost ~]# du -h --max-depth=1 /home/91M /home/ngrinder0 /home/docker143M /home/ 查看内存情况：free -h 进程操作获取pid很多时候，我们需要查看运行进行的PID，无论是进行分析还是杀进程。。以前的常用做法是:1ps -ef | grep zabbix_server 这样，拿到zabbix_server这个进程的PID，同时会输出一堆信息，如果我们只想要一个pid，也有办法：12345pgrep zabbix_server或者pidof zabbix_server 杀进程之前杀进程，比较常用的就是ps -ef|grep XX拿到pid，然后kill掉，或者写的复杂点：1kill -9 `ps -ef | grep zabbix | grep -v grep | awk &apos;&#123;print $2&#125;&apos;` 现在有比较简单的方式：1pkill zabbix 文件操作清空文件内容之前清空日志文件的内容，一直很头疼，文件太大根本进不去，sed和awk又没那么熟练，现在找到个比较快捷的方式：1&gt;zabbix_server.log 完成清空效果展示：清空前：123[root@localhost zabbix]# lltotal 108-rw-rw-r-- 1 zabbix zabbix 50071 May 16 08:55 zabbix_server.log 清空：12345[root@localhost zabbix]# &gt;zabbix_server.log[root@localhost zabbix]# lltotal 56-rw-rw-r-- 1 zabbix zabbix 0 May 16 08:57 zabbix_server.log linux是个非常有意思的系统啊，有事没事多多研究grep、sed、awk以及vi/vim啊！ 以上，完~]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7安装docker]]></title>
    <url>%2F2019%2F05%2F14%2Fcentos7%E5%AE%89%E8%A3%85docker%2F</url>
    <content type="text"><![CDATA[Centos7安装docker 容器化大潮，微服务最后一里路，至少掌握docker的基本使用 安装查看内核版本，大于3.10才能安装 1uname -r 更新yum源 1yum update 卸载旧版本 1yum remove docker docker-common docker-selinux docker-engine -y 安装需要的安装包 1yum install -y yum-utils device-mapper-persistent-data lvm2 配置yum源（防止万里长城，配置阿里yum源） 1yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 查看可选择版本 1yum list docker-ce --showduplicates | sort -r 安装最新稳定版（repo中默认开启了stable仓库） 1yum install docker-ce 或者指定版本 1yum install docker-ce-18.06.3.ce 启动并加自启动 12systemctl start dockersystemctl enable docker 验证12345678910111213141516171819[root@localhost docker]# docker versionClient: Version: 18.09.6 API version: 1.39 Go version: go1.10.8 Git commit: 481bc77156 Built: Sat May 4 02:34:58 2019 OS/Arch: linux/amd64 Experimental: falseServer: Docker Engine - Community Engine: Version: 18.09.6 API version: 1.39 (minimum version 1.12) Go version: go1.10.8 Git commit: 481bc77 Built: Sat May 4 02:02:43 2019 OS/Arch: linux/amd64 Experimental: false 有client和server表示安装成功 本篇算是容器化的第一篇，计划后续好好折腾折腾docker和K8S，去年欠下的，要补回来了。]]></content>
      <categories>
        <category>容器化</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改Linux时间]]></title>
    <url>%2F2019%2F04%2F28%2F%E4%BF%AE%E6%94%B9Linux%E6%97%B6%E9%97%B4%2F</url>
    <content type="text"><![CDATA[linux修改系统时间 手动修改1date -s 04/28/19 修改日期为：2019/04/28 1date -s 11:28:00 修改时间为11:28:00 或者一次：1date -s &quot;2019-04-28 11:28:00&quot; 1hwclock -w 将时间写入bios避免重启失效 同步网络时间1yum install ntp ntp常用服务器：123456中国国家授时中心：210.72.145.44NTP服务器(上海) ：ntp.api.bz美国：time.nist.gov 复旦：ntp.fudan.edu.cn 微软公司授时主机(美国) ：time.windows.com 台警大授时中心(台湾)：asia.pool.ntp.org 同步时间：1ntpdate -dv ntp.api.bz 同步完成之后，发现时间有点不对，12h误差12[root@localhost ~]# dateSun Apr 28 01:20:14 EDT 2019 查了下，EDT是美国东部时间，需要改成北京时间 时区修改12345mv /etc/localtime /etc/localtime.bak ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime date 完成~]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jmeter调用python完成HmacSHA256加密处理]]></title>
    <url>%2F2019%2F04%2F23%2FJmeter%E8%B0%83%E7%94%A8python%E5%AE%8C%E6%88%90HmacSHA256%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[Jmeter调用python完成HmacSHA256加密处理 前言同事有个需求，一个获取人员信息的接口，请求头里面需要有一个sign参数，这个参数是几个实时获取的参数最后进行Hmachash256加密之后生成的，具体示例：获取用户接口：1GET http://192.168.0.1/api/user?userName=20190101&amp;tenant=testtenant 请求头： key value Authorization Bearer ${token} content-type application/json tenant testtenant timestamp 当前时间戳 randoms 随机数 sign 签名 其中签名生成规则如下：tenanttesttenantuserName20190101tenanttesttenanttimestamp当前时间戳randoms随机数这一长串再使用指定密码，进行HmacSHA256加密，生成的密文即为sign 加密工具 jmeter方案因为后期接口要进行性能测试，所以还是选了jmeter进行性能测试，按照接口描述的先排序再加密，在jmeter中，首先想到的就是通过beanshell外部实现，然后生成对应jar包，在jmeter中引用，然后就有个问题，我java太菜了。。。没办法，折腾python。 jmeter中使用python脚本在jmeter中使用python脚本，搜了下，找到三种方式：1. 使用Jython包 下载地址下载 Download Jython 2.7.0 - Standalone Jar 包，放到jmeter/lib/目录下，重启jmeter，就能在sampler中找到JSR223 Sampler，里面就有python，但是，是python2.7，所以，对我没啥用 2. jmeter-functions-execute-python-script-1.0.jar，网上有个这个包，可以从函数助手那边进去执行python脚本，试了下失败了，就不介绍了，有兴趣可以百度下咋弄 3. OS Process Sampler，使用这个组件可以执行脚本，后面着重介绍这个，使用了下，很强的组件，理论上，只要你脚本能力强，可以获得各种想要的（终于看到摆脱java的希望了。。） OS Process Sampler这个组件可以用来启动一个可执行程序，由于是通过命令行方式启动，所以我们可以用任何语言编写一个测试用的可执行程序(比如Linux的sh脚本)。在该可执行程序中调用我们的接口，并把返回的原始数据输出而交由JMeter做后续解析判断。 位置：/sampler/OS Process Sampler这个组件有几栏：1234command: 可执行文件（windows系统建议放.bat脚本或exe文件，linux系统放shell；干过windows下放了shell直接报非可执行文件。。）working directory：工作目录，默认是jmeterbin 目录，可指定command parameters：参数，如果脚本需要传参，可在这边传 既然这个组件可以执行bat文件，那我们在bat文件里面再调python文件不就实现了嘛~ 加密实现前面说了，思路就是使用OS Process Sampler来调用.bat文件，然后在.bat文件中再调python文件，实现加密，脚本如下： jmeterOS Process Sampler中：1234command: oss.bat路径working directory：默认command parameters：secret，userName，tenant（三个传参，方便参数化） 同时，在OS Process Sampler后追加三个正则表达式提取器，分别获取时间戳，随机数，签名 正则表达式提取器：1234引用名称：sign正则表达式：sign:(.+?)&lt;&gt;模板：$1$匹配数字: 1 时间戳和随机数相同方式获取 oss.batoss.bat:123456@echo offset secret = %1set userName = %2set tenant = %3python E:\py_workspace\hashtest\JmeterSSTest.py %* Windows批处理文件，首先获取传进去的三个参数，再将这三个参数作为入参传给python脚本 JmeterSSTest.py12345678910111213141516171819202122232425262728293031323334353637#!/usr/bin/env python3# -*-coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2019/4/23 12:44&quot;&quot;&quot;import hashlibimport hmacimport timeimport randomimport sys# 定义传参，按顺序，secret,userName,tenantsecret = sys.argv[1]userName = sys.argv[2]tenant = sys.argv[3]# 获取当前时间戳timestamp = int(time.time())# 获取随机数randoms = random.randint(0, 999999999)# 获取signstrsign = str(u&apos;tenant&apos; + str(tenant) + u&apos;userName&apos; + str(userName) + u&apos;tenant&apos; + str(tenant) + u&apos;timestamp&apos; + str(timestamp) + u&apos;randoms&apos; + str(randoms))# hmacsha256加密intsign = hmac.new(bytes(str(secret), encoding=&apos;utf-8&apos;), bytes(str(strsign), encoding=&apos;utf-8&apos;), digestmod=hashlib.sha256).digest()# 二进制转义sign = intsign.hex()print(u&apos;timestamp&apos; + &apos;:&apos; + str(timestamp) + &apos;&lt;&gt;&apos;)print(u&apos;randoms&apos; + &apos;:&apos; + str(randoms) + &apos;&lt;&gt;&apos;)print(u&apos;sign&apos; + &apos;:&apos; + str(sign) + &apos;&lt;&gt;&apos;) 脚本就不解释了，不难 完整jmeter结构12345678910111213141516-- 获取token接口（简单控制器） -- http信息头管理器 -- http请求 -- 响应断言 --查看结果树 -- JSON Extractor-- 加密sign -- OS Process Sampler -- 正则提取 timestamp -- 正则提取 randoms -- 正则提取 sign-- 获取用户接口 -- http信息头管理器 -- http请求 -- 查看结果树 -- 响应断言 以上，完~]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
        <tag>python3</tag>
        <tag>HmacSHA256</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android性能测试——内存]]></title>
    <url>%2F2019%2F04%2F18%2FAndroid%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E5%86%85%E5%AD%98%2F</url>
    <content type="text"><![CDATA[Android性能测试——内存 内存通常情况下我们说的内存都是指手机的RAM，RAM主要包括： 寄存器：速度最快的存储 栈（stack）：在jvm中栈用来存储一些对象的引用、局部变量以及计算过程的中间数据，在方法退出后那么这些变量也会被销毁。它的存储比堆快得多，只比CPU里的寄存器慢 堆（Heap）：用来存储程序中的一些对象，比如你用new关键字创建的对象，它就会被存储在堆内存中，但是这个对象在堆内存中的首地址会存储在栈中；堆中分配的内存，由java虚拟机自动垃圾回收器（GC）来管理。关于GC的，记得之前稍微记过点JVM内存性能问题定位 … … Dalvik和JVMDavlik虚拟机（DVM）是Android系统在java虚拟机（JVM）基础上优化得到的，DVM是基于寄存器的，而JVM是基于栈的，由于寄存器更高效，DVM性能相比JVM要好一点。 Android中进程的堆内存RAM作为进程运行不可或缺的资源，对Android系统性能和稳定性有着决定性影响，RAM的一部分被操作系统留作他用，比如显存等等，当然这个程序员无法干预，我们也不必过多地关注它。进程空间中的heap空间是我们需要重点关注的。heap空间完全由程序员控制，我们使用的C++ new和java new所申请的空间都是heap空间， C/C++申请的内存空间在native heap中，而java申请的内存空间则在dalvik heap中。 Android的java程序为什么容易OOM这个是因为Android系统对dalvik的vmheapsize作了硬性限制，当java进程申请的java空间超过阈值时，就会抛出OOM异常（这个阈值可以是48M、24M、16M等，视机型而定），可以通过adb shell getprop | grep dalvik.vm.heapgrowthlimit查看此值。也就是说，程序发生OMM并不表示RAM不足，而是因为程序申请的java heap对象超过了dalvik vmheapgrowthlimit。也就是说，在RAM充足的情况下，也可能发生OOM。 这样的设计似乎有些不合理，但是Google为什么这样做呢？这样设计的目的是为了让Android系统能同时让比较多的进程常驻内存，这样程序启动时就不用每次都重新加载到内存，能够给用户更快的响应。迫使每个应用程序使用较小的内存，移动设备非常有限的RAM就能使比较多的app常驻其中。但是有一些大型应用程序是无法忍受vmheapgrowthlimit的限制的 实际上dalvik.vm.heapgrowthlimit和dalvik.vm.heapsize都是java虚拟机的最大内存限制，应用如果不想在dalvikheap达到heapgrowthlimit限制的时候出现OOM，需要在Manifest中的application标签中声明android:largeHeap=“true”，声明后应用dalvik heap达到heapsize的时候才会出现OOM 12345&#123;lamb&#125; adb shell getprop | grep dalvik.vm.heapgrowthlimit[dalvik.vm.heapgrowthlimit]: [192m]&#123;lamb&#125; adb shell getprop | grep dalvik.vm.heapsize[dalvik.vm.heapsize]: [512m] Android内存采集dumpsys 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&#123;lamb&#125; adb shell dumpsys meminfo com.kuaikan.comic Applications Memory Usage (in Kilobytes): Uptime: 467997959 Realtime: 2137774428 ** MEMINFO in pid 15956 [com.kuaikan.comic] ** Pss Private Private SwapPss Heap Heap Heap Total Dirty Clean Dirty Size Alloc Free ------ ------ ------ ------ ------ ------ ------ Native Heap 98778 98668 64 406 127872 120081 7790 Dalvik Heap 8247 8204 24 52 20111 7823 12288 Dalvik Other 2505 2496 4 2 Stack 2464 2464 0 0 Ashmem 258 256 0 0 Gfx dev 24048 23372 676 0 Other dev 45 8 28 0 .so mmap 4157 2036 716 26 .jar mmap 8 8 0 0 .apk mmap 9900 9676 160 0 .dex mmap 20863 17524 2380 0 .oat mmap 2731 0 384 0 .art mmap 8290 6736 148 12 Other mmap 29 4 0 0 EGL mtrack 38636 38636 0 0 GL mtrack 5480 5480 0 0 Unknown 6031 6016 0 3 TOTAL 232971 221584 4584 501 147983 127904 20078 App Summary Pss(KB) ------ Java Heap: 15088 Native Heap: 98668 Code: 32884 Stack: 2464 Graphics: 68164 Private Other: 8900 System: 6803 TOTAL: 232971 TOTAL SWAP PSS: 501 Objects Views: 927 ViewRootImpl: 2 AppContexts: 11 Activities: 1 Assets: 8 AssetManagers: 5 Local Binders: 89 Proxy Binders: 42 Parcel memory: 56 Parcel count: 226 Death Recipients: 5 OpenSSL Sockets: 10 WebViews: 0 SQL MEMORY_USED: 3886 PAGECACHE_OVERFLOW: 1026 MALLOC_SIZE: 309 DATABASES pgsz dbsz Lookaside(b) cache Dbname 4 52 109 54/31/17 /data/user/0/com.kuaikan.comic/databases/bugly_db_ 4 100 76 83/57/9 /data/user/0/com.kuaikan.comic/databases/kkmh-room.db 4 12 0/0/0 (attached) temp 4 100 109 147/26/14 /data/user/0/com.kuaikan.comic/databases/kkmh-room.db (1) 4 20 24 1/16/2 /data/user/0/com.kuaikan.comic/databases/ThrowalbeLog.db 4 564 88 52/43/25 /data/user/0/com.kuaikan.comic/databases/kkmh.db 4 20 109 185/24/10 /data/user/0/com.kuaikan.comic/databases/btechainh.db 4 20 45 6/19/5 /data/user/0/com.kuaikan.comic/databases/sharesdk.db 4 20 52 23/24/6 /data/user/0/com.kuaikan.comic/databases/aa_in_techain.db 4 36 92 106/41/25 /data/user/0/com.kuaikan.comic/databases/techain_d.db 4 52 47 2/17/3 /data/user/0/com.kuaikan.comic/databases/volcano_ac_techain.db 4 20 29 1/16/2 /data/user/0/com.kuaikan.comic/databases/tracker.db 4 60 97 3/21/5 /data/user/0/com.kuaikan.comic/databases/tes_db 4 16 52 12/17/5 /storage/emulated/0/Mob/comm/dbs/.dh 4 20 65 16/19/5 /data/user/0/com.kuaikan.comic/databases/x24_techain_typhoon.db 4 76 38 54/17/3 /data/user/0/com.kuaikan.comic/databases/com.kuaikan.comic 4 28 50 5/18/4 /data/user/0/com.kuaikan.comic/databases/tcyrtsdb.db 4 44 80 10/21/7 /data/user/0/com.kuaikan.comic/databases/beacon_tbs_db 4 20 26 1/16/2 /data/user/0/com.kuaikan.comic/databases/kk-push Asset Allocations zip:/data/user/0/com.tencent.mm/app_tbs/core_share/res.apk:/resources.arsc: 97K 字段含义 私有内存(Dirty and Clean)进程独占内存。也就是进程销毁时可以回收的内存容量。通常private Dirty内存是最重要的部分，因为只被自己进程使用。Dirty内存是已经被修改的内存页，因此必须常驻内存（因为没有swap）；Clean内存是已经映射持久文件使用的内存页（例如正在被执行的代码），因此一段时间不使用的话就可以置换出去。 实际使用内存(PSS)将跨进程共享页也加入进来， 进行按比例计算PSS。这样能够比较准确的表示进程占用的实际物理内存 Native Heap AllocJNI层的内存分配 Dalvik Heap AllocJava层的内存分配 这两个值一直增长，应用程序可能出现了内存泄漏 测试Android内存1. monkey压力测试 1adb shell monkey -p com.kuaikan.comic --ignore-crashes --ignore-timeouts --ignore-security-exceptions --ignore-native-crashes --pct-touch 70 --pct-motion 25 --pct-majornav 5 -v -v -v --throttle 300 100000 2. adb shell dumpsys meminfo监控内存 1adb shell dumpsys meminfo com.kuaikan.comic 如发现内存过大，保存HPROF文件1adb shell am dumpheap com.kuaikan.comic /data/local/tmp/1.hprof 3. 格式化D:\dev\android\android-sdk-windows\platform-tools下有个hprof-conv.exe工具1hprof-conv 1.hprof 2.hprof 4. 用MAT分析MAT度娘盘地址（提取码：jidc） 扩展知识Android沙盒由于Android是建立在Linux系统之上的，所以Android系统继承了Linux的 类Unix继承进程隔离机制与最小权限原则，并且在原有Linux的进程管理基础上对UID的使用做了改进，形成了Android应用的”沙箱“机制。 普通的Linux中启动的应用通常和登陆用户相关联，同一用户的UID相同。但是Android中给不同的应用都赋予了不同的UID，这样不同的应用将不能相互访问资源。对应用而言，这样会更加封闭，安全。 在Android系统中，应用（通常）都在一个独立的沙箱中运行，即每一个Android应用程序都在它自己的进程中运行，都拥有一个独立的Dalvik虚拟机实例。Dalvik经过优化，允许在有限的内存中同时高效地运行多个虚拟机的实例，并且每一个Dalvik应用作为一个独立的Linux进程执行。Android这种基于Linux的进程“沙箱”机制，是整个安全设计的基础之一。 简单点说就是在Android的世界中每一个应用相当与一个Linux中的用户，他们相互独立，不能相互共享与访问，（这也就解释了Android系统中为什么需要进程间通信），正是由于沙盒机制的存在最大程度的保护了应用之间的安全，但是也带来了每一个应用所分配的内存大小是有限制的问题。 获取当前页面activity通过adb shell dumpsys window |findstr mCurrent，捕获当前页面的activity通过adb shell dumpsys activity|findstr &quot;realActivity&quot;, 捕获到当前页面的activity 频繁GC的可能原因 Memory Churn（内存抖动），内存抖动是因为大量的对象被创建又在短时间内马上被释放 瞬间产生大量的对象会严重占用Young Generation的内存区域，当达到阀值，剩余空间不够的时候，也会触发GC。即使每次分配的对象占用了很少的内存，但是他们叠加在一起会增加 Heap的压力，从而触发更多其他类型的GC。这个操作有可能会影响到帧率，并使得用户感知到性能问题。 优秀Android博客 Android性能优化-详解内存优化来龙去脉Android性能优化&amp;内存篇一份详细&amp;全面内存优化指南 以上，完~]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次Linux磁盘清理]]></title>
    <url>%2F2019%2F04%2F18%2F%E8%AE%B0%E4%B8%80%E6%AC%A1Linux%E7%A3%81%E7%9B%98%E6%B8%85%E7%90%86%2F</url>
    <content type="text"><![CDATA[记一次Linux清磁盘 最近发现有台机器磁盘满了，搜了下，nohub.out占完了 然后果断的rm -rf nohub.out，以为结束了，然而df -h看了下，一点都没释放。。。 因为被删除的文件在删除的时侯还是进程在操作(打开、访问等)的缘故，rm只完成了在磁盘上文件实体的释放，而类似free list结构中相应的文件系统因进程的操作相应的inode并未释放。 解决的方法：这样的问题解决起来也很简单，找到操作的进程，kill掉就可以了 当然，闲得无聊，你重启机器，也没话说(最后，别忘了重启你的程序) 在网上发现两个可以不用停止服务就可清空nohup.out的命令。第一种：cp /dev/null nohup.out第二种：cat /dev/null &gt; nohup.out 以上，完~]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7搭建testlink]]></title>
    <url>%2F2019%2F04%2F16%2Fcentos7%E6%90%AD%E5%BB%BAtestlink%2F</url>
    <content type="text"><![CDATA[centos 7搭建testlink 帮忙搭建了个testlink，说实话，不习惯用这个 系统版本搭建版本testlink: 1.9.19MySQL：5.7.25 （mysql -V）PHP：5.6 (php -v)Linux：Centos 7.6.1810 (Core) （cat /etc/redhat-release） 前置操作升级yum：yum update 关闭防火墙：systemctl stop firewalld.service防火墙禁止自启动：systemctl disable firewalld.service 关闭selinux：sudo sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config 安装MySQL下载源包：1wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装MySQL源：1yum localinstall mysql57-community-release-el7-8.noarch.rpm 检查可选包：1yum repolist enabled | grep &quot;mysql.*-community.*&quot; 123mysql-connectors-community/x86_64 MySQL Connectors Community 51mysql-tools-community/x86_64 MySQL Tools Community 63mysql57-community/x86_64 MySQL 5.7 Community Server 267 可修改配置：/etc/yum.repos.d/mysql-community.repo选择想要安装的版本，将对应enable改为1 安装1yum install mysql-community-server 启动服务：systemctl start mysqld查看服务状态：systemctl status mysqld 配置开机启动：12systemctl enable mysqldsystemctl daemon-reload 安装后配置修改root密码查看原始密码：grep &#39;temporary password&#39; /var/log/mysqld.log 进入控制台mysql -uroot -p，修改密码1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;yourpwd&apos;; 修改权限：1GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;yourpwd&apos; WITH GRANT OPTION; 创建testlink库123456789CREATE DATABASE testlink;CREATE USER ‘testlinkuser‘@‘localhost‘ IDENTIFIED BY ‘yourpwd‘;GRANT ALL PRIVILEGES ON testlink.* TO ‘testlinkuser‘@‘localhost‘ IDENTIFIED BY ‘yourpwd‘ WITH GRANT OPTION;FLUSH PRIVILEGES;EXIT; 安装Apache1yum install httpd 配置：123sed -i ‘s/^/#&amp;/g‘ /etc/httpd/conf.d/welcome.confsed -i &quot;s/Options Indexes FollowSymLinks/Options FollowSymLinks/&quot; /etc/httpd/conf/httpd.conf 启动：123systemctl start httpd.servicesystemctl enable httpd.service 安装php直接用yum install php安装的，默认是5.4版本，然而testlink要求至少是5.5（这点坑的我，zabbix直接不能和它装一台机器） 配置yum源：123yum install epel-releaserpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm 安装php5.6 1yum install php56 php56-php php56-php-mysqlnd php56-php-gd php56-php-mcrypt php56-php-mbstring php56-php-xml php56-php-cli php56-php-ldap 修改参数：123sed -i &quot;s/session.gc_maxlifetime = 1440/session.gc_maxlifetime = 2880/&quot; /opt/remi/php56/root/etc/php.inised -i &quot;s/max_execution_time = 30/max_execution_time = 120/&quot; /opt/remi/php56/root/etc/php.ini 安装testlink 官网下载地址 下载完成后传到linux下（rz…），解压缩到/var/www/html目录下1tar -zxvf testlink-1.9.19.tar.gz -C /var/www/html 重命名：mv testlink-1.9.19 testlink 创建upload_area：mkdir /var/www/html/upload_area 修改项目属主以及日志文件权限：123chown -R apache:apache /var/www/html/testlinkchmod -R 755 /var/www/html/testlink/logs 编辑配置文件首先是创建（直接把示例文件备份重命名）：1cp /var/www/html/testlink/custom_config.inc.php.example/var/www/html/testlink/custom_config.inc.php 修改配置(日志路径等)可直接vim进入之后查找?log_path：123456// $tlCfg-&gt;log_path = ‘/var/testlink-ga-testlink-code/logs/‘; /* unix example */// $g_repositoryPath = ‘/var/testlink-ga-testlink-code/upload_area/‘; /* unix example */$tlCfg-&gt;log_path = ‘/var/www/html/testlink/logs/‘;$g_repositoryPath = ‘/var/www/html/testlink/upload_area/‘;$tlCfg-&gt;config_check_warning_mode = ‘SILENT‘; 重启Apache1systemctl restart httpd.service 启动testlink浏览器输入http://IP/testlink进入安装页面，依次new installation-&gt;agree license-&gt;continue开始一堆校验，继续continue，进入数据库配置页面，依次填写：1234567Database name：testlink（testlink库名）Database admin login：rootDatabase admin password：yourpwd（你MySQL的root密码）Testlink DB login：testlinkuser（testlink数据库用户名）Testlink DB password：yourpwd（你testlink库密码） 填写完成，点击Process Testlink Setup结束！ 登录testlinkhttp://IP/testlink默认账密：admin/admin 以上，完~]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>testlink</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb进阶四 —— dumpsys]]></title>
    <url>%2F2019%2F04%2F12%2Fadb%E8%BF%9B%E9%98%B6%E5%9B%9B-%E2%80%94%E2%80%94-dumpsys%2F</url>
    <content type="text"><![CDATA[adb进阶四 —— dumpsys dumpsys简介Dumpsys用于系统诊断，并提供系统服务状态信息,命令格式：1adb shell dumpsys [system serbices] 系统服务查询直接运行adb shell dumpsys会输出很多很多信息，可以指定需要检查的服务 查看系统服务、：123adb shell service list或者adb shell dumpsys -l 可以看见cpuinfo，meminfo等服务，因此指定检查的服务示例：123456789101112&#123;lamb&#125; adb shell dumpsys cpuinfoLoad: 6.04 / 6.17 / 6.21CPU usage from 364288ms to 62061ms ago (2019-04-12 16:20:56.605 to 2019-04-12 16:25:58.831): 99% 28771/com.tencent.tmgp.supercell.clashofclans: 99% user + 0% kernel / faults: 128 minor 2.4% 1641/system_server: 1.4% user + 0.9% kernel / faults: 5586 minor 1 major 1.3% 582/android.hardware.sensors@1.0-service: 0.5% user + 0.7% kernel 0.9% 441/ueventd: 0.6% user + 0.3% kernel 0.6% 4950/kworker/u16:2: 0% user + 0.6% kernel 0.5% 5727/kworker/u16:0: 0% user + 0.5% kernel 0.5% 5679/kworker/u16:5: 0% user + 0.5% kernel ... ... 命令行参数：12-h：对于大多数的服务，可以添加-h看到文本的帮助-c：对于一些服务，可以添加-c查看数据会更友好 例如：12345678910&#123;lamb&#125; adb shell dumpsys usb -hDump current USB state or issue command: ports set-port-roles &lt;id&gt; &lt;source|sink|no-power&gt; &lt;host|device|no-data&gt; add-port &lt;id&gt; &lt;ufp|dfp|dual|none&gt; connect-port &lt;id&gt; &lt;ufp|dfp&gt;&lt;?&gt; &lt;source|sink&gt;&lt;?&gt; &lt;host|device&gt;&lt;?&gt; (add ? suffix if mode, power role, or data role can be changed) disconnect-port &lt;id&gt; remove-port &lt;id&gt; reset 包服务查询格式：1adb shell dumpsys package [-h] [-f] [—checkin] [cmd]… 参数 说明 -h 打印帮助信息 -f 打印intent filter的信息 –checkin 打印出已经登记的库、系统功能、安装包 cmd 子命令（可以在-h帮助文档中查看有哪些子命令） cmd子命令 说明 prov[iders] 获取content providers p[ackages] 获取安装包基本信息 s[hared-user] 获取共享用户ID的应用 m[essages] 打印运行时收集的信息 v[erifiers] 打印包校验信息 version 打印数据库版本信息 write 写当前位置 package.name 输出给定包的信息 installs 安装会话的详细信息 l[ibraries] 列出已知的共享库 f[ibraries] 列出手机的功能 k[eysets] 列出各个包的Signing KeySets r[esolvers] 获取intent filter perm[issions] 获取权限 pref[erred] 打印包首选项 preferred-xml [—full] 打印包首选项，xml格式打印 示例：12345678910111213141516171819&#123;lamb&#125; adb shell dumpsys package com.kuaikan.comic Activity Resolver Table: Schemes: qwallet1104081998: 2d32642 com.kuaikan.comic/com.kuaikan.pay.kkb.activity.RechargeCenterActivity filter ba2036f Action: &quot;android.intent.action.VIEW&quot; Category: &quot;android.intent.category.BROWSABLE&quot; Category: &quot;android.intent.category.DEFAULT&quot; Scheme: &quot;qwallet1104081998&quot; commonqwallet20181030: 7efe8c0 com.kuaikan.comic/com.kuaikan.pay.cashPay.TranslucentPayActivity filter b5a1d49 Action: &quot;android.intent.action.VIEW&quot; Category: &quot;android.intent.category.BROWSABLE&quot; Category: &quot;android.intent.category.DEFAULT&quot; Scheme: &quot;commonqwallet20181030&quot; Scheme: &quot;commonalipay20181030&quot; Scheme: &quot;commonwx20181030&quot; Scheme: &quot;commonpay20181105&quot; comicwx201804028: activity信息查询格式：1adb shell dumpsys activity [-a] [-c]… 参数 说明 -a 包括所有可用的服务器状态 -c 包括客户端状态 -p 限制输出为给定的包，例如： adb shell dumpsys activity -p com.android.browser -h 打印帮助信息 cmd 子命令 cmd子命令 说明 a[ctivities] activity堆栈状态 r[recents] 最近activity的状态 b[rodacasts] [package_name] [histpry [-s]] 广播状态 i[ntents] [package_name] 挂起的intent状态 p[rocesses] [package_name] 进程状态 o[om] oom管理 perm[issions] url权限授权状态 prov[iders] [comp_spec…] content provider状态 provider [comp_spec] provider客户端状态 s[ervices] [comp_spec…] 服务状态 as[sociations] 跟踪应用程序的关联 service [comp_spec] 服务客户端状态 package [package_name] 给的包的所有状态 all 转储所有的activityes top 转储栈顶的activity write 写入所有挂起状态存储 track-associations 允许会话跟踪 untrack-associations 禁用和明确会话跟踪，命令参数可能也是一个comp_spec 转储的activity 示例：12345# 获取当前页面UI信息adb shell dumpsys activity top# 获取当前页面的Activityadb shell dumpsys activity top | findstr ACTIVITY 网络信息查询 子命令 说明 命令格式 connectivity 网络连接 adb shell dumpsys connectivity netpolicy 网络策略 adb shell dumpsys netpolicy netstats 网络状态 adb shell dumpsys netstats network_management 网络管理 adb shell dumpsys network_management 其他常用服务信息查询 子命令 说明 命令格式 meminfo 内存 adb shell dumpsys meminfo cpuinfo CPU adb shell dumpsys cpuinfo gfxinfo 帧率 adb shell dumpsys gfxinfo display 显示 adb shell dumpsys display power 电源 adb shell dumpsys power batterystats 电池状态 adb shell dumpsys batterystats battery 电池 adb shell dumpsys battery alarm 闹钟 adb shell dumpsys alarm location 位置 adb shell dumpsys location wifi wifi adb shell dumpsys wifi power 电源 adb shell dumpsys power notification 通知 adb shell dumpsys notification 示例：1234567891011121314151617# 电池信息&#123;lamb&#125; adb shell dumpsys batteryCurrent Battery Service state: AC powered: false USB powered: true Wireless powered: false Max charging current: 500000 Max charging voltage: 5000000 Charge counter: 3321815 status: 5 #电池状态 health: 2 present: true level: 100 #电量 scale: 100 voltage: 4369 temperature: 310 #电池温度 technology: Li-poly 完~]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb进阶三 —— Monkey (2)]]></title>
    <url>%2F2019%2F04%2F11%2Fadb%E8%BF%9B%E9%98%B6%E4%B8%89-%E2%80%94%E2%80%94-Monkey-2%2F</url>
    <content type="text"><![CDATA[adb进阶三 —— Monkey (2) 前言因为原生的monkey，是一系列的随机事件，很多时候事满足不了我们自定义场景需求的，比如只想验证APP的登录的稳定性，使用原生的adb shell monkey貌似做不到，这边就需要自定义脚本来实现 Monkey API API 描述 LaunchActivity(pkg_name, cl_name) 启动应用的Activity。参数：包名和启动的Activity Tap(x, y, tapDuration) 模拟一次手指单击事件。参数：x,y为控件坐标，tapDuration为点击的持续时间，此参数可省略 DispatchPress(keycode) 按键。参数： keycode RotateScreen(rotationDegree, persist) 旋转屏幕。 参数：rotationDegree为旋转角度， e.g. 1代表90度；persist表示旋转之后是否固定，0表示旋转后恢复，非0则表示固定不变 DispatchFlip(true/false) 打开或者关闭软键盘 LongPress() 长按 PressAndHold(x, y, pressDuration) 模拟长按事件 DispatchString(input) 输入字符串 Drag(xStart, yStart, xEnd, yEnd, stepCount) 拖拽 PinchZoom(x1Start, y1Start, x1End, y1End, x2Start, y2Start, x2End, y2End, stepCount) 缩放 UserWait(sleepTime) 休眠 DeviceWakeUp() 唤醒屏幕 PowerLog(power_log_type, test_case_status) 模拟电池电量信息 WriteLog() 将电池信息写入sd卡 RunCmd(cmd) 运行shell命令 DispatchPointer(long downTime, long eventTime, int action, loat x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int device, int edgeFlags) 向指定位置，发送单个手势，点击事件 DispatchKey(long downTime, long eventTime, int action, int code, int repeat, int metaState, int device, int scancode) 发送键值 LaunchInstrumentation(test_name,runner_name) 运行一个instrumentation测试用例 DispatchTrackball(long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int device, int edgeFlags) 模拟发送轨迹球事件 ProfileWait 等待5秒 StartCaptureFramerate() 获取帧率 EndCaptureFramerate(input) 结束获取帧率 以点击事件为例：1DispatchPointer(long downTime, long eventTime, int action, loat x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int device, int edgeFlags) 参数很多，只需要关注action，x，y，对于参数action值为0代表按下（KeyDown），1代表弹起（KeyUp）。如果使用这个方法实现点击事件，这个方法就应该成对出现，先0再1。 long downTime：键最初被按下时间 long eventTime：事件发生时间 int action：动作ACTION_DOWN=0,ACTION_UP=1,ACTION_MULTIPLE=2 float x：x坐标 float y：y坐标 float pressure：当前事件的压力，值为0～1 float size：触摸的近似值，范围为0～1 int metaState：当前按下的meta键的标识 float xPrecision：x坐标精确值 float yPrecision：y坐标精确值 int device：事件来源，范围0～x，0表示不来自物理设备 int edgeFlags：坐标是否超出了屏幕范围 Android键盘事件，keycode Monkey脚本和自动化测试时候差不多实现，打开首页-点击用户名-输入用户名-点击密码-输入密码-点击登录，相应的，也就是只需要获取用户名和密码以及确定按键的坐标，传到DispatchPointer即可，获取坐标可以使用uiautomatorviewer.bat挺简单的，直接上脚本1234567891011121314151617181920212223242526272829# 头部type= usercount= 1speed= 1.0UserWait(200)start data &gt;&gt;# 打开app登录页LaunchActivity(com.android.testapp,com.android.testapp.MainActivity)# 休眠UserWait(10000)# 点击用户名文本框（460,751）为坐标DispatchPointer(10,10,0,460,751,1,1,-1,1,1,0,0)DispatchPointer(10,10,1,460,751,1,1,-1,1,1,0,0)UserWait(5000)# 输入用户名DispatchString(monkeytest)DispatchFlip(false)UserWait(2000)# 点击密码文本框（490,867）为坐标DispatchPointer(10,10,0,490,867,1,1,-1,1,1,0,0)DispatchPointer(10,10,1,490,867,1,1,-1,1,1,0,0)UserWait(5000)# 输入密码DispatchString(123456)DispatchFlip(false)UserWait(2000)# 点击确定Tap(541,1096) 保存为monkey_test.txt文件，上传到android设备：adb push monkey_test.txt /mnt/sdcard/执行脚本：adb shell monkey -f /mnt/sdcard/monkey_test.txt -v 1 完~]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
        <tag>Monkey</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb进阶二 —— Monkey (1)]]></title>
    <url>%2F2019%2F04%2F11%2Fadb%E8%BF%9B%E9%98%B6%E4%B8%80-%E2%80%94%E2%80%94-Monkey-1%2F</url>
    <content type="text"><![CDATA[adb进阶二 —— Monkey (1) Monkey简介Monkey是一个可运行在Android环境中的命令行工具，使用monkey尅发送一些伪随机事件（pseudo-random）的用户事件流，例如点击，触摸，手势等。通过monkey，我们可以注入随机事件流或者自定义特定事件来对应用进行健壮性、稳定性测试。 Monkey用途通过使用monkey来对应用进行压力测试。 Monkey包含一系列选项，主要包括以下方面： 基础配置项，比如设置注入事件的数量adb shell monkey 500 备选限制，比如限制测试单个包adb shell monkey -p com.android.camera 5000 事件类型和频率 调试选项 Monkey程序简介monkey在Android文件系统存放路径为：/system/framework/monkey.jar启动monkey.jar的shell脚本文件在Android文件系统存放路径为system/bin/monkey导到本地:adb pull /system/bin/monkey E:\app_workstation\Android_files\MONKEY可以看到monkey的shell内容：12345678910# Script to start &quot;monkey&quot; on the device, which has a very rudimentary# shell.#base=/systemexport CLASSPATH=$base/framework/monkey.jartrap &quot;&quot; HUPfor a in &quot;$@&quot;; do echo &quot; bash arg:&quot; $adoneexec app_process $base/bin com.android.commands.monkey.Monkey &quot;$@&quot; 可以看到调用的是com.android.commands.monkey.Monkey包 Monkey命令基本命令基础语法：adb shell monkey [option] &lt;event-count&gt;当不指定任何选项时，monkey将默认静态模式，并且会向目标设备的所有包发送随机事件 基本使用：adb shell monkey123456789101112131415161718192021222324252627282930&#123;lamb&#125; adb shell monkey args: [] usage: monkey [-p ALLOWED_PACKAGE [-p ALLOWED_PACKAGE] ...] [-c MAIN_CATEGORY [-c MAIN_CATEGORY] ...] [--ignore-crashes] [--ignore-timeouts] [--ignore-security-exceptions] [--monitor-native-crashes] [--ignore-native-crashes] [--kill-process-after-error] [--hprof] [--match-description TEXT] [--pct-touch PERCENT] [--pct-motion PERCENT] [--pct-trackball PERCENT] [--pct-syskeys PERCENT] [--pct-nav PERCENT] [--pct-majornav PERCENT] [--pct-appswitch PERCENT] [--pct-flip PERCENT] [--pct-anyevent PERCENT] [--pct-pinchzoom PERCENT] [--pct-permission PERCENT] [--pkg-blacklist-file PACKAGE_BLACKLIST_FILE] [--pkg-whitelist-file PACKAGE_WHITELIST_FILE] [--wait-dbg] [--dbg-no-events] [--setup scriptfile] [-f scriptfile [-f scriptfile] ...] [--port port] [-s SEED] [-v [-v] ...] [--throttle MILLISEC] [--randomize-throttle] [--profile-wait MILLISEC] [--device-sleep-time MILLISEC] [--randomize-script] [--script-log] [--bugreport] [--periodic-bugreport] [--permission-target-system] COUNT 可以看见列出了所有monkey的usage，但是并没有启动，因为缺少事件数量，只要加上数量，即可adb shell monkey 10000 Monkey Optionmonkey的option可以根据实际需要进行选择，主要分为常规类、事件类、约束类和调试类 常规类 选项 描述 - - help 显示帮助信息，usage -v 打印日志信息，每增加一个-v，日志显示的信息越详细，目前最多支持三个-v，即：-v -v -v; L0:一个-v，除启动提示、测试完成和最终结果之外，提供较少信息； L1：两个-v，-v -v，提供较详细的运行测试信息，如发送到Activity的事件； L2：三个-v，-v -v -v，提供更加详细的信息，如测试中被选中的或未选中的Activity 事件类 选项 描述 -s 伪随机数生成器的seed值，如果用相同的seed值再次运行mnkey，会生成相同的事件序列(重复执行刚才的随机操作，复现问题好用) - -throttle 后面接时间，单位毫秒，表示事件之间的固定延时（执行 每一个指令的间隔时间） - -pct-touch 后接触摸事件百分比(触摸事件是一个down-up事件，它发生在屏幕上的某单一位置)，点击 - -pct-motion 后接动作事件百分比(动作事件由屏幕上某处的一个down事件、一系列的伪随机事件和一个up事件组成)，滑动 - -pct-trackball 后面接轨迹事件的百分比(轨迹事件由一个或几个随机的移动组成，有时还伴随有点击) - -pct-syskeys 后面接“系统”按键事件的百分比(这些按键通常被保留，由系统使用，如Home、Back、StartCall、End Call及音量控制键)。 - -pct-nav 后面接“基本”导航事件百分比(导航事件主要来自方向输入设备的上，下，左，右事件) - -pct-majornav 后面接“主要”导航事件的百分比(这些导航事件通常引发图形界面中的动作，如：键盘的中间按键、回退按键、菜单按键) - -pct-appswitch 后面接启动Activity的百分比。在随机间隔里，Monkey将执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法。 - -pct-flip 键盘翻转事件 - -pct-anyevent 调整其他时间比例，比如很少使用的keypress等事件 - -pct-pinchzoom 缩放事件 - -pct-permission 未知 约束类 选项 描述 -p 指定包，可一个可多个，多个包需要多个-p -c 指定类，可一个可多个，多个需多个-c 调试类 选项 描述 - -hprof 设置此选项，将在Monkey事件序列之前和之后立即生成profiling报告。这将会在data/misc中生成大文件(~5Mb)，所以要小心使用它 - -ignore-crashes 当应用程序崩溃或发生任何失控异常时，Monkey将停止运行。如果设置此选项，Monkey将继续向系统发送事件，直到计数完成 - -ignore-timeouts 当应用程序发生任何超时错误(如“ApplicationNot Responding”对话框)时，Monkey将停止运行。如果设置此选项，Monkey将继续向系统发送事件，直到计数完成 - -ignore-security-exceptions 当应用程序发生任何权限错误（如启动一个需要某些权限的Activity)时，monkey将继续运行直到计数完成 - -ignore-native-crashes 当应用程序发生native code的崩溃事件时，monkey将继续运行直至计数完成 - -kill-process-after-error 设置此项后，当monkey因为应用程序发生错误而停止时，将会通知系统停止发生错误的进程 - -monitor-native-crashes 设置此项后，monkey运行时native code的崩溃事件将被监视并报告 常用monkey示例1adb shell monkey -p com.android.camera --ignore-crashes --ignore-timeouts --ignore-security-exceptions --ignore-native-crashes --pct-touch 70 --pct-motion 25 --pct-majornav 5 -v -v -v --throttle 300 100000 &gt; E:\app_workstation\Android_files\MONKEY\1.log 2&gt;&amp;1 以上命令执行效果：忽略app崩溃，忽略超时，忽略权限异常，忽略应用程序发生崩溃的本地代码，触摸事件百分比70%，手势事件25%，主要导航事件5%；日志等级三级，事件间隔3s，执行100000次事件，输出和错误都打印进D盘1.log文件中 补充标准输出知识linux中，标准输入stdin，标准输出stdout，标准错误stderr，分别使用0,1,2代替，所以就有了以下几种常用的重定向方式： sh test.sh &gt; 1.log，标准错误输出到屏幕，标准输出打印到1.log文件中，1.log中没有错误内容 sh test.sh &gt; 2.log 2&gt;&amp;1，标准输出和标准错误都打印到2.log文件中 sh test.sh &gt; 3.log 2 &gt;err.log，标准输出打印到3.log文件，标准错误打印到err.log文件 使用monkey生成日志之后，需要对日志进行筛查，看是否有APP崩溃记录或者无响应记录。 崩溃记录查找”CRASH” 无响应记录查找”ANR”（Application No Responding） 内存泄露问题搜索”GC”（需进一步分析） 异常问题搜索“Exception”（如果出现空指针，NullPointerException，需格外重视） 停止Monkey既然是linux进程，想停，很简单，找出来，kill掉..adb shell ps | grep monkeyadb shell kill -9 PID 完~]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
        <tag>Monkey</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[adb进阶一 —— logcat]]></title>
    <url>%2F2019%2F04%2F10%2Fadb%E8%BF%9B%E9%98%B6%E4%B8%80-%E2%80%94%E2%80%94-logcat%2F</url>
    <content type="text"><![CDATA[adb进阶一 —— logcat logcat 简介logcat是Android中的一个命令行工具，可以用于测试过程中获取程序的log基本用法：测试开始前，可以先清缓存:adb logcat -c获取日志：adb logcat &gt; E:\app_workstation\Android_files\logs\1.log 语法格式：1[adb] logcat [&lt;option&gt;] … [&lt;filter – spec&gt;] … 推荐搭配grep使用 logcat 缓冲区Android log输出量巨大， 特别是通信类log，好在Android降log放在不同的缓冲区内，可用于指定缓冲区输出log，目前有四个缓冲区： 缓冲区名称 用途 Radio 输出通信系统的log System 输出系统组件的log Event 输出event模块的log Main 所有java层的log，以及不属于上面三层的log 缓冲区主要是给系统组件使用的，一般的应用不需要考虑，应用的log都在main缓冲区中默认log输出（不指定缓冲区的情况下）是输出System和Main缓冲区的log 获取缓冲区命令： 参数 描述 -b 加载一个可使用的日志缓冲区提供查看，默认是main 实例：1234567adb logcat –b radioadb logcat –b systemadb logcat –b eventsadb logcat –b main logcat 参数日志级别由低到高 参数 含义 V Verbose（最低优先级）明细 D Debug调试 I Info 信息 W Warning警告 E Error 错误 F Fatal 严重错误 S Silent（Super all output） 日志过滤器格式：tag: priority 示例：1234567891011# 仅输出标记为“ActivityManager”且优先级大于等于“Info”和 标记为“PowerManagerService”并且优先级大于等于“Debug”的日志adb logcat ActivityManager:I PowerManagerService:D *:S# 显示所有优先级大于等于“warning”的日志adb logcat *:W# 显示PowerManagerService的日志信息adb logcat -s PowerManagerService tips：*:S设置所有日志级别高于S的日志，由于没有这样级别，所以加上该过滤器可以确保只会输出符合条件的日志 参数 参数 描述 -b 加载一个可使用的日志缓冲区供查看，默认值为main -c 清除缓冲区中的全部日志并退出（清除完成后可使用-g 查看） -g 打印日志缓冲区的大小并退出 -d 将缓冲区的log转存到屏幕中然后退出 -f 将log输出到制定的文件中&lt;文件名&gt;，默认为标准输出（stdout） -n 设置日志的最大数目，默认值为4，需要和-r选项一起使用 -r 按照每千字节输出日志，默认值为16，需要和-f一起使用 -s 设置过滤器 -v 设置输出格式的日志消息 一般长时间输出log的话建议-f -n -r三个参数连用，这样当一个文件日志输出满了之后可以马上在另一个中进行输出（输出多个指定大小的日志文件）示例：1adb logcat -f /data/local/tmp/log.txt -n 2 -r 3 1adb logcat -b radio -v time &gt; /tmp/event.log tips:-v time表示在log中加入每条log发生的时间 格式化输出-v更多格式： 格式 说明 brief 显示优先级/标记和过程的PID发出的消息（默认格式） process 仅显示进程PID tag 仅显示优先级/标记 thread 仅显示进程：线程和优先级/标记 raw 显示原始的日志信息，没有其他的元数据字段 time 显示日期，调用时间，优先级/标记，PID long 显示所有的元数据字段并且用空行分隔消息内容 示例：adb logcat -v thread 以上，完~ 参考文章 ADB logcat 过滤方法(抓取日志)Android logcat命令详解]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android调试工具adb简介]]></title>
    <url>%2F2019%2F04%2F10%2FAndroid%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7adb%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Android调试工具adb简介 对于Android测试和开发，adb使用应该算是一个基本技能，正好最近需要用到这个，结合网上前人经验稍微总结一下。 adbadb全称Android Debug BridgeAndroid的调试桥，其实就是一个C/S架构的命令行工具。adb有三个部分： 运行在PC端（Windows，linux，Mac os）的client，功能是可以进行Android应用的安装，卸载，调试。 运行在PC端的service，作用是管理客户端到Android设备上adb后台进程的连接（adb服务启动后，在Windows资源管理器中可以查看adb.exe是启动状态） 运行在Android设备上的adb后台进程（adb shell ps | grep adb可见，占用端口5037） 常用abd命令 安装应用（apk文件在PC本地）命令行进入apk文件所在路径，执行adb install kuaikan.apk 卸载应用（应用已安装在Android设备）区别与安装应用是试用apk文件，卸载应用试用的是包名，类似：com.android.camera连接上设备，执行adb uninstall com.kuaikan.comic(关于获取包名，可以问开发，也可以反编译apk文件，从AndroidManifest.xml文件中获取，反编译方法：推荐使用apktool,直接命令行执行java -jar 路径\apktool.jar d 、路径yourApkFile.apk即可，包名在AndroidManifest.xml中的package项可获取，顺便activity也可以在此获取activity) apktool下载地址 文件互传Android设备和PC之间的文件互传adb pull 文件 目录文件从Android设备推送到本地PCadb push 文件 目录文件从本地PC上传到Android设备 设备连接adb devices 获取设备列表及设备状态adb get-state 获取设备状态（device表示连接正常；offline表示连接异常，设备无响应；unknown表示为止设备） 日志操作adb logcat打印Android系统日志，类似的bugreport、dumpsys、dumpstate，建议重定向到本地：adb bugreport &gt; D:\applogs\bugreport.log adb shelladb shell其实就是调用Android系统中的命令，应该都知道，Android底层其实是linux，adb shell个人理解，和进入linux敲命令差不多，只是敲的是封装好的Android命令，因此，可以直接先执行adb shell进入shell模式：12345E:\app_workstation &#123;git&#125;&#123;lamb&#125; adb shellsakura:/ $2|sakura:/ $ cd /data/sakura:/data $ 另外，adb shell的命令，都是执行的/system/bin目录下的执行文件，如果设备是root过的，可以尝试把这个目录导出来，看看命令：1adb pull /system/bin/ E:\app_workstation\BIN 导出之后，可以看一下am命令：123456789#!/system/bin/shif [ &quot;$1&quot; != &quot;instrument&quot; ] ; then cmd activity &quot;$@&quot;else base=/system export CLASSPATH=$base/framework/am.jar exec app_process $base/bin com.android.commands.am.Am &quot;$@&quot;fi 其实就是shell脚本 服务启停停：adb kill-server启：adb start-server一般设备连接异常时，adb devices未显示设备，可以先停再重启服务 pm 列出安装在设备上的应用adb shell pm list package 列出系统应用adb shell pm list package -s 列出第三方应用adb shell pm list package -3 列出包名及对应的apk名和存放路径adb shell pm list package -f 组合查找，过滤(查找相机包名及安装路径)adb shell pm list package -f -i camera 列出对应包名的.apk位置adb shell pm path com.android.camera 列出对应包名的dump信息（可重定向到本地）adb shell pm dump com.android.camera &gt; E:\app_workstation\android_files\camera.dump am 启动activityadb shell am start -n package/activity例如：adb shell am start -n com.android.camera/.Camera 12&#123;lamb&#125; adb shell am start -n com.android.camera/.CameraStarting: Intent &#123; cmp=com.android.camera/.Camera &#125; 先停止应用再启动adb shell am start -S com.android.camera/.Camera 123&#123;lamb&#125; adb shell am start -S com.android.camera/.CameraStopping: com.android.cameraStarting: Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.android.camera/.Camera &#125; 启动默认浏览器并打开网页adb shell am start -a android.intent.action.VIEW -d https://www.baidu.com 12&#123;lamb&#125; adb shell am start -a android.intent.action.VIEW -d https://www.baidu.comStarting: Intent &#123; act=android.intent.action.VIEW dat=https://www.baidu.com/... &#125; 停止应用adb shell am force-stop package 1&#123;lamb&#125; adb shell am force-stop com.android.camera 其他 截图adb shell screencap -p /sdcard/screen.png 录制adb shell screenrecord sdcard/record.mp4 查看设备信息（如Android版本号）adb shell getprop示例：获取sdk版本：adb shell getprop ro.build.version.sdk 查看分辨率adb shell wm size 查看屏幕密度adb shell wm density 当设备root后，其实能获取的就更多了，例如MAC 地址啥的 获取当前页面activity用于手上没有apk反编译，也没开发可以问，直接手机打开app，adb shell获取activity 通过adb shell dumpsys window |findstr mCurrent，捕获当前页面的activity通过adb shell dumpsys activity|findstr realActivity, 捕获到当前页面的activity 以上，完~]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记cmder/git一个报错解决]]></title>
    <url>%2F2019%2F04%2F09%2F%E8%AE%B0cmder-git%E4%B8%80%E4%B8%AA%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[记cmder/git一个报错解决 Couldn’t reserve space for cygwin’s heap, Win32 error 0早上开机想试试adb工具，由于是在Windows机器，第一个想到的还是用cmder来命令行操作，然后不知道是昨天系统自动更新强制杀了昨天的cmder进程造成文件损坏还是什么鬼，ls直接报错（普通用户打开cmder就可以执行ls，用管理员打开，就不行），具体报错信息：1234&#123;lamb&#125; ls 0 [main] us 0 init_cheap: VirtualAlloc pointer is null, Win32 error 487AllocationBase 0x0, BaseAddress 0x68570000, RegionSize 0x450000, State 0x10000D:\dev\cmder\vendor\msysgit\bin\ls.exe: *** Couldn&apos;t reserve space for cygwin&apos;s heap, Win32 error 0 同样的报错也可能出现在使用git时候：12345C:\Program Files\Git\bin\git.exe pull --progress &quot;origin&quot; Done 0 [main] us 0 init_cheap: VirtualAlloc pointer is null, Win32 error 487AllocationBase 0x0, BaseAddress 0x68560000, RegionSize 0x390000, State 0x10000C:\Program Files\Git\bin\sh.exe: *** Couldn&apos;t reserve space for cygwin&apos;s heap, Win32 error 0 解决重装cmder首先以为是昨天系统自动升级时候强制杀了cmder进程造成文件损坏，就尝试重装了次，为了避免注册表问题，还选了其他的地址，安装完毕之后管理员打开cmder，ls还是报那个错，失败 rebase.exe -b这个办法，原理不知道。。。在stackoverflow翻到的，不过是真解决了 首先是进路径\msysgit\bin查看是否有rebase.exe该程序 命令行进入路径\msysgit\bin目录，执行rebase.exe -b 0x50000000 msys-1.0.dll即可，正常情况下执行该命令没任何响应，重启cmder或者git即解决 Tips rebase.exe文件所在路径不固定，可能在路径\msysgit\bin下，也可能在C:\Program Files (x86)\Git\bin下 在执行rebase之前，需要确保msys-1.0.dll不是运行状态， 查看方法，启动命令行，执行tasklist /m msys-1.0.dll 养成好习惯，在执行rebase之前，先备份：copy msys-1.0.dll msys-1.0.dll.bak，如果执行失败ReBaseImage (msys-1.0.dll) failed with last error = 6考虑按以下步骤： 把dll文件拷贝到其他的目录下 重新复制生成备份文件 用副本替换原文件另外，考虑用管理员身份运行 以上，完~ 参考文章 初始解决：jakobstackoverflow问题解决]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>cmder</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站性能杂货]]></title>
    <url>%2F2019%2F04%2F08%2F%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%9D%82%E8%B4%A7%2F</url>
    <content type="text"><![CDATA[页面性能优化参考 性能指标很多时候，会打开chrome F12的network栏，查看页面信息，页面底部会有三个时间：DOMContentLoaded,Load,Finish DOMContentLoaded 和 LoadDOMContentLoaded 和 Load 分别对应 页面 DOMContentLoaded 和 Load 事件触发的时间点，即： DOMContentLoaded：DOM树构建完成。即HTML页面由上向下解析HTML结构到末尾封闭标签 。 Load:页面加载完毕。 DOM树构建完成后，继续加载html/css 中的图片资源等外部资源，加载完成后视为页面加载完毕。 DOMContentLoaded 会比 Load 时间小，两者时间差大致等于外部资源加载的时间。 FinishFinish 时间是页面上所有 http 请求发送到响应完成的时间，HTTP1.0/1.1 协议限定，单个域名的请求并发量是 6 个，即Finish是所有请求（不只是XHR请求，还包括DOC，img，js，css等资源的请求）在并发量为6的限制下完成的时间。 优化实践Make fewer HTTP requests （最大限度地减少HTTP请求）终端用户响应的时间中，有80%用于下载各项内容。这部分时间包括下载页面中的图像、样式表、脚本、Flash等。通过减少页面中的元素可以减少HTTP请求的次数。这是提高网页速度的关键步骤。 减少页面组件的方法其实就是简化页面设计。那么有没有一种方法既能保持页面内容的丰富性又能达到加快响应时间的目的呢？这里有几条减少HTTP请求次数同时又可能保持页面内容丰富的技术。 合并文件是通过把所有的脚本放到一个文件中来减少HTTP请求的方法，如可以简单地把所有的CSS文件都放入一个样式表中。当脚本或者样式表在不同页面中使用时需要做不同的修改，这可能会相对麻烦点，但即便如此也要把这个方法作为改善页面性能的重要一步。 CSS Sprites是减少图像请求的有效方法。把所有的背景图像都放到一个图片文件中，然后通过CSS的background-image和background-position属性来显示图片的不同部分； 图片地图是把多张图片整合到一张图片中。虽然文件的总体大小不会改变，但是可以减少HTTP请求次数。图片地图只有在图片的所有组成部分在页面中是 紧挨在一起的时候才能使用，如导航栏。确定图片的坐标和可能会比较繁琐且容易出错，同时使用图片地图导航也不具有可读性，因此不推荐这种方法； 内联图像是使用data:URL scheme的方法把图像数据加载页面中。这可能会增加页面的大小。把内联图像放到样式表（可缓存）中可以减少HTTP请求同时又避免增加页面文件的大小。但是内联图像现在还没有得到主流浏览器的支持。 Use a Content Delivery Network (CDN)（使用内容分发网络）用户与你网站服务器的接近程度会影响响应时间的长短。把你的网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。但是首先我们应该做些什么呢？ 按地域布置网站内容的第一步并不是要尝试重新架构你的网站让他们在分发服务器上正常运行。根据应用的需求来改变网站结构，这可能会包括一些比较复杂的任 务，如在服务器间同步Session状态和合并数据库更新等。要想缩短用户和内容服务器的距离，这些架构步骤可能是不可避免的。 要记住，在终端用户的响应时间中有80%到90%的响应时间用于下载图像、样式表、脚本、Flash等页面内容。这就是网站性能黄金守则。和重新设计你的 应用程序架构这样比较困难的任务相比，首先来分布静态内容会更好一点。这不仅会缩短响应时间，而且对于内容分发网络来说它更容易实现。 内容分发网络（Content Delivery Network，CDN）是由一系列分散到各个不同地理位置上的Web服务器组成的，它提高了网站内容的传输速度。用于向用户传输内容的服务器主要是根据 和用户在网络上的靠近程度来指定的。例如，拥有最少网络跳数（network hops）和响应速度最快的服务器会被选定。 一些大型的网络公司拥有自己的CDN，但是使用像Akamai Technologies，Mirror Image Internet， 或者Limelight Networks这样的CDN服务成本却非常高。对于刚刚起步的企业和个人网站来说，可能没有使用CDN的成本预算，但是随着目标用户群的不断扩大和更加 全球化，CDN就是实现快速响应所必需的了。以Yahoo来说，他们转移到CDN上的网站程序静态内容节省了终端用户20%以上的响应时间。使用CDN是 一个只需要相对简单地修改代码实现显著改善网站访问速度的方法。 Add Expires headers添加一个Expires或Cache-Control头这条守则包括两方面的内容：对于静态内容：设置文件头过期时间Expires的值为“Never expire”（永不过期）对于动态内容：使用恰当的Cache-Control文件头来帮助浏览器进行有条件的请求 网页内容设计现在越来越丰富，这就意味着页面中要包含更多的脚本、样式表、图片和Flash。第一次访问你页面的用户就意味着进行多次的HTTP请求，但 是通过使用Expires文件头就可以使这样内容具有缓存性。它避免了接下来的页面访问中不必要的HTTP请求。Expires文件头经常用于图像文件， 但是应该在所有的内容都使用他，包括脚本、样式表和Flash等。 浏览器（和代理）使用缓存来减少HTTP请求的大小和次数以加快页面访问速度。Web服务器在HTTP响应中使用Expires文件头来告诉客户端内容需 要缓存多长时间。 Compress components with gzip 用gzip的压缩内容网络传输中的HTTP请求和应答时间可以通过前端机制得到显著改善。的确，终端用户的带宽、互联网提供者、与对等交换点的靠近程度等都不是网站开发者所能决定的。但是还有其他因素影响着响应时间。通过减小HTTP响应的大小可以节省HTTP响应时间。 从HTTP/1.1开始，web客户端都默认支持HTTP请求中有Accept-Encoding文件头的压缩格式 Accept-Encoding: gzip, deflate 如果web服务器在请求的文件头中检测到上面的代码，就会以客户端列出的方式压缩响应内容。Web服务器把压缩方式通过响应文件头中的Content-Encoding来返回给浏览器 Content-Encoding: gzip Gzip是目前最流行也是最有效的压缩方式。这是由GNU项目开发并通过RFC 1952来标准化的。另外仅有的一个压缩格式是deflate，但是它的使用范围有限效果也稍稍逊色。 Reduce DNS lookups（减少DNS查找）域名系统（DNS）提供了域名和IP的对应关系，就像电话本中人名和他们的电话号码的关系一样。当你在浏览器地址栏中输入www.dudo.org时，DNS解析服务器就会返回这个域名对应的IP地址。DNS解析的过程同样也是需要时间的。一般情况下返回给定域名对应的IP地址会花费20到120毫秒的时间。而且在这个过程中浏览器什么都不会做直到DNS查找完毕。 缓存DNS查找可以改善页面性能。这种缓存需要一个特定的缓存服务器，这种服务器一般属于用户的ISP提供商或者本地局域网控制，但是它同样会在用户使用 的计算机上产生缓存。DNS信息会保留在操作系统的DNS缓存中（微软Windows系统中DNS Client Service）。大多数浏览器有独立于操作系统以外的自己的缓存。由于浏览器有自己的缓存记录，因此在一次请求中它不会受到操作系统的影响。 Internet Explorer默认情况下对DNS查找记录的缓存时间为30分钟，它在注册表中的键值为DnsCacheTimeout。Firefox对DNS的查找 记录缓存时间为1分钟，它在配置文件中的选项为network.dnsCacheExpiration（Fasterfox把这个选项改为了1小时） 当客户端中的DNS缓存都为空时（浏览器和操作系统都为空），DNS查找的次数和页面中主机名的数量相同。这其中包括页面中URL、图片、脚本文件、样式表、Flash对象等包含的主机名。减少主机名的数量可以减少DNS查找次数。 减少主机名的数量还可以减少页面中并行下载的数量。减少DNS查找次数可以节省响应时间，但是减少并行下载却会增加响应时间。我的指导原则是把这些页面中 的内容分割成至少两部分但不超过四部分。这种结果就是在减少DNS查找次数和保持较高程度并行下载两者之间的权衡了 Reduce the number of DOM elements（减少DOM元素的数量）一个复杂的页面意味着需要下载更多数据，同时也意味着JavaScript遍历DOM的效率越慢。比如当你增加一个事件句柄时在500和5000个DOM元素中循环效果肯定是不一样的。 大量的DOM元素的存在意味着页面中有可以不用移除内容只需要替换元素标签就可以精简的部分。你在页面布局中使用表格了吗？你有没有仅仅为了布局而引入更多的元素呢？也许会存在一个适合或者在语意是更贴切的标签可以供你使用。 DOM元素数量很容易计算出来，只需要在Firebug的控制台内输入：document.getElementsByTagName(‘*’).length Reduce cookie size （减少Cookie的大小）HTTP coockie可以用于权限验证和个性化身份等多种用途。coockie内的有关信息是通过HTTP文件头来在web服务器和浏览器之间进行交流的。因此保持coockie尽可能的小以减少用户的响应时间十分重要。 有关更多信息可以查看Tenni Theurer和Patty Chi的文章“When the Cookie Crumbles”。这们研究中主要包括：去除不必要的coockie使coockie体积尽量小以减少对用户响应的影响注意在适应级别的域名上设置coockie以便使子域名不受影响设置合理的过期时间。较早地Expire时间和不要过早去清除coockie，都会改善用户的响应时间。 Use cookie-free domains使用无Cookie的域名当浏览器在请求中同时请求一张静态的图片和发送coockie时，服务器对于这些coockie不会做任何地使用。因此他们只是因为某些负面因素而创建的 网络传输。所有你应该确定对于静态内容的请求是无coockie的请求。创建一个子域名并用他来存放所有静态内容 如果你的域名是www.example.org，你可以在static.example.org上存在静态内容。但是，如果你不是在www.example.org上 而是在顶级域名example.org设置了coockie，那么所有对于static.example.org的请求都包含coockie。在这种情况 下，你可以再重新购买一个新的域名来存在静态内容，并且要保持这个域名是无coockie的。Yahoo!使用的是ymig.com，YouTube使用 的是ytimg.com，Amazon使用的是images-anazon.com等等。 使用无coockie域名存在静态内容的另外一个好处就是一些代理（服务器）可能会拒绝对coockie的内容请求进行缓存。一个相关的建议就是，如果你想确定应该使用example.org还是www.example.org作 为你的一主页，你要考虑到coockie带来的影响。忽略掉www会使你除了把coockie设置到.example.org（是泛域名解析，代表了 所有子域名译者dudo注）外没有其它选择，因此出于性能方面的考虑最好是使用带有www的子域名并且在它上面设置coockie。 … …参考文章 加快您的网站的最佳实践（Best Practices for Speeding Up Your Web Site）英文原文]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[伪·influxdb删除数据]]></title>
    <url>%2F2019%2F04%2F08%2F%E4%BC%AA%C2%B7influxdb%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[伪 influxdb删除数据 前言大早上的，一大佬跟我说grafan登不上了，让帮忙看看啥情况，登录服务器一通乱看，磁盘满了，因为那台服务器还装了个influxdb，估计也就是数据写的，没空间了。 influxdb作为时序数据库的一种，是不提供类似mysql的delete操作，也就是，原则上，你删不了数据，除非删库。 但是，influxdb提供了数据保留策略policies，通过对policies操作，可以达到删除数据的效果 数据保存策略（Retention Policies）influxdb的数据保存策略policies主要是用于指定数据的保留时间，超过指定时间，就会删除这部分数据。 查询策略1234&gt; show retention policies on exceptionless;name duration shardGroupDuration replicaN default---- -------- ------------------ -------- -------autogen 0s 168h0m0s 1 true name: 策略名称 duration： 保留时间，0s表示永久保存 shardGroupDuration：shardGroup的存储时间，shardGroup是InfluxDB的一个基本储存结构，个人理解为时间分区 replicaN：全称是REPLICATION，副本个数 default：是否是默认策略 新建策略语法如下：1234CREATE RETENTION POLICY ON &lt;retention_policy_name&gt; ON &lt;database_name&gt; DURATION &lt;duration&gt; REPLICATION &lt;n&gt; [SHARD DURATION &lt;duration&gt; ] [DEFAULT] 示例1CREATE RETENTION POLICY &quot;3_day&quot; ON &quot;exceptionless&quot; DURATION 3d REPLICATION 1 SHARD DURATION 3h DEFAULT; 为库exceptionless创建了一个名称为3_day的策略，其中数据保存时间为3天，SHARDDURATION为3h。 ShardGroupshardgroup是InfluxDB中一个重要的逻辑概念，它负责指定时间跨度的数据存储，这个时间跨度在创建RP时指定。如果没有指定，系统将通过RP的数据保留时间来计算： Retention Policy‘s DURATION Shard Group Duration &lt; 2days 1h &gt;= 2days and &lt;= 6months 24h &gt; 6months 168h 不同shardgroup的时间跨度不会重叠。shardgroup实现了数据按时间分区，这样的设计可以： 一定程度上缓解数据写入热点问题 加快数据删除效率(将数据按照时间分割成小的粒度会使得数据过期实现非常简单，InfluxDB中数据过期删除的执行粒度就是Shard Group，系统会对每一个Shard Group判断是否过期，而不是一条一条记录判断。InfluxDB没有提供删除和更新数据的接口，数据只能通过RP进行删除) 加快数据按时间维度查找的效率(实现了将数据按照时间分区的特性。将时序数据按照时间分区是时序数据库一个非常重要的特性，基本上所有时序数据查询操作都会带有时间的过滤条件，比如查询最近一小时或最近一天，数据分区可以有效根据时间维度选择部分目标分区，淘汰部分分区) 修改及删除策略12345# 修改策略alter retention policy &quot;autogen&quot; on &quot;exceptionless&quot; duration 72h0m0s default;# 删除策略drop retention POLICY &quot;2_hours&quot; ON &quot;exceptionless&quot; 后序说回大佬的问题，连接进influxdb：influx -host ip:port -precision rfc3339之后，查看当前库的存储策略：1234&gt; show retention policies on exceptionless;name duration shardGroupDuration replicaN default---- -------- ------------------ -------- -------autogen 0s 168h0m0s 1 true 嗯，保存时间是永久。。再新建一个7天的策略，把原策略删除即可。 以上，完~]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>influxdb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux垃圾清理]]></title>
    <url>%2F2019%2F02%2F27%2FLinux%E5%9E%83%E5%9C%BE%E6%B8%85%E7%90%86%2F</url>
    <content type="text"><![CDATA[linux垃圾清理 起因是阿里云上面一台很穷的机器，大早上来看了下，搭在那服务器上面的grafana直接就登不上了，登服务器看了下日志，磁盘满了，因为就50G的空间，上面还有个influxdb占了大头，在重新申请扩充磁盘空间之前，只能先看看能删啥了。 Linux垃圾坊间有句话：Linux不像windows，Linux没有垃圾。对这句话，只能笑笑。。 首先df -h看一下哪个分区满了：12345678[root@izuf633r5fhkmlfxl47zbkz log]# df -hFilesystem Size Used Avail Use% Mounted on/dev/vda1 50G 43G 28M 100% /devtmpfs 3.9G 0 3.9G 0% /devtmpfs 3.9G 0 3.9G 0% /dev/shmtmpfs 3.9G 500K 3.9G 1% /runtmpfs 3.9G 0 3.9G 0% /sys/fs/cgrouptmpfs 783M 0 783M 0% /run/user/1002 可以看到/dev/vda1分区基本已经使用100%了，这个分区是挂载在/目录下，所以，需要清理的也就是/目录下的垃圾。 进根目录，一层一层的看文件大小并按文件大小倒序排列：123cd /du -sh * | sort -h 找到最大的文件夹/文件，进入对应的文件夹，一层一层的筛选基本上可以找到/var/log这个文件夹，这个文件夹中有很大的日志文件，尤其是/var/log/messages文件以及/var/log/journal文件夹，这两个都是系统操作日志的记录，尤其是journal文件夹，里面存的大量的日志，这台服务器的日志有4G，需要清理的就是这个文件夹了。 journalctllinux继承unix，也有类似syslog的记录，linux有个journald的日志解决方案，说实话，我对linux底层不是非常了解，所以这个日志系统当前也没多少时间去深究，只能停留在使用上。journald日志系统有个读取日志的工具：journalctl，这个工具应该算是经常用到的一个，经常搭建环境时候出错需要：journalctl -xe查看详细日志 关于journalctl这个工具的详细介绍这边不说，提供官方地址，不行就直接--help journalctl各参数详细介绍 其中可以找到一个参数：--vacuum-size=, --vacuum-time=, --vacuum-files=官方解释：1Removes the oldest archived journal files until the disk space they use falls below the specified size (specified with the usual &quot;K&quot;, &quot;M&quot;, &quot;G&quot; and &quot;T&quot; suffixes), or all archived journal files contain no data older than the specified timespan (specified with the usual &quot;s&quot;, &quot;m&quot;, &quot;h&quot;, &quot;days&quot;, &quot;months&quot;, &quot;weeks&quot; and &quot;years&quot; suffixes), or no more than the specified number of separate journal files remain. Note that running --vacuum-size= has only an indirect effect on the output shown by --disk-usage, as the latter includes active journal files, while the vacuuming operation only operates on archived journal files. Similarly, --vacuum-files= might not actually reduce the number of journal files to below the specified number, as it will not remove active journal files. 这三个参数，可以帮助我们删除journald的日志 用法：journalctl --vacuum-size=1G 指定日志文件最大占据空间为1Gjournalctl --vacuum-time=1years 指定日志文件保存时间为1年 更多用法：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#查看所有日志（默认情况下 ，只保存本次启动的日志）$ sudo journalctl#查看内核日志（不显示应用日志）$ sudo journalctl -k#查看系统本次启动的日志$ sudo journalctl -b$ sudo journalctl -b -0#查看上一次启动的日志（需更改设置）$ sudo journalctl -b -1#查看指定时间的日志$ sudo journalctl --since=&quot;2012-10-30 18:17:16&quot;$ sudo journalctl --since &quot;20 min ago&quot;$ sudo journalctl --since yesterday$ sudo journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot;$ sudo journalctl --since 09:00 --until &quot;1 hour ago&quot;#显示尾部的最新10行日志$ sudo journalctl -n#显示尾部指定行数的日志$ sudo journalctl -n 20#实时滚动显示最新日志$ sudo journalctl -f#查看指定服务的日志$ sudo journalctl /usr/lib/systemd/systemd#查看指定进程的日志$ sudo journalctl _PID=1#查看某个路径的脚本的日志$ sudo journalctl /usr/bin/bash#查看指定用户的日志$ sudo journalctl _UID=33 --since today#查看某个 Unit 的日志$ sudo journalctl -u nginx.service$ sudo journalctl -u nginx.service --since today#实时滚动显示某个 Unit 的最新日志$ sudo journalctl -u nginx.service -f#合并显示多个 Unit 的日志$ journalctl -u nginx.service -u php-fpm.service --since today#查看指定优先级（及其以上级别）的日志，共有8级# 0: emerg# 1: alert# 2: crit# 3: err# 4: warning# 5: notice# 6: info# 7: debug$ sudo journalctl -p err -b#日志默认分页输出，--no-pager 改为正常的标准输出$ sudo journalctl --no-pager#以 JSON 格式（单行）输出$ sudo journalctl -b -u nginx.service -o json#以 JSON 格式（多行）输出，可读性更好$ sudo journalctl -b -u nginx.serviceqq -o json-pretty#显示日志占据的硬盘空间$ sudo journalctl --disk-usage#指定日志文件占据的最大空间$ sudo journalctl --vacuum-size=1G#指定日志文件保存多久$ sudo journalctl --vacuum-time=1years 附上一篇关于systemd命令介绍的博客： systemd命令 完~]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>journalctl</tag>
        <tag>systemd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7安装pip3]]></title>
    <url>%2F2019%2F01%2F29%2FCentos7%E5%AE%89%E8%A3%85pip3%2F</url>
    <content type="text"><![CDATA[centos7安装pip3 当前基本拿到手的centos安装的可能都是python2.7，对应的pip版本也很低，很多后面的工具包都安装不了，所以，需要安装个pip3 python2.7和python3共存 安装完python3之后，就可以安装pip 安装pip123456789101112wget --no-check-certificate https://pypi.python.org/packages/source/p/pip/pip-8.0.2.tar.gz#md5=3a73c4188f8dbad6a1e6f6d44d117eebtar -zxvf pip-8.0.2.tar.gzmv pip-8.0.2 /usr/local/pip3cd /usr/local/pip3python3 setup.py buildpython3 setup.py install 测试：pip3 install xmind 需要注意的是的，当前安装的pip3不是最新版本，需要升级：pip3 install --upgrade pip]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>pip3</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019年关将至有感]]></title>
    <url>%2F2019%2F01%2F24%2F2019%E5%B9%B4%E5%85%B3%E5%B0%86%E8%87%B3%E6%9C%89%E6%84%9F%2F</url>
    <content type="text"><![CDATA[2019农历年来临之际有感 年关将近，发发牢骚…近几天“百度已死”的文章铺天盖地，随之而来的很多分析互联网的文章出现，年末了，也扯扯自己感受。最大的感触就是“中国互联网”的确是不再互联。曾经还在百度搜音乐，搜商品..而今，基本都是对应网站（网易云，淘宝）直接搜索。可能也有近几年百度搜索结果太烂的原因，然后呢，不是很关注这行的可能不怎么知道，当前国内互联网，巨头分地，彼此吃像都不怎么样，说到底都是数据，隐私，流量，具体点就是钱。 微信公众号的内容，普通搜索引擎的爬虫无法收录；淘宝为代表的网购平台, 长时间的封杀搜索引擎爬虫（结果就是搜商品只能淘宝、京东站内搜索）；app之间互转越来越困难（抖音转微信等）加上前段时间的马桶MT，聊天宝，多闪被微信封杀…巨头圈地，彼此不互联貌似已经越来越具象；相比之下，国外谷歌搜索结果仍然可以直连亚马逊…无话可说.. 最后，还是扯到搜索上，当前百度基本我是放弃了，必应最近日子也不好过；最最推荐的方式，就是有能力就买台服务器，自己搭个梯子吧，万里长城永不倒啊（直接买VPN不怎么推荐，有点手段的能把你祖宗辈信息都截到）；科学上网做不到，推荐几个小众的搜索网站： 无隐私搜索（chrome有插件，地址栏直接输搜索项，实测非常干净）：https://www.duckduckgo.com/ 类似网站查询网站，可查用户覆盖率和用户标签，其他功能自行体会（有chrome插件）：https://www.similarweb.com/ 在线问答系统（类似百科）：https://www.wolframalpha.com/ （以上网站可能都需要至少科学上网一次装完插件..所以，还是赶紧会科学上网现实，直接Google多方便）]]></content>
      <categories>
        <category>生活</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[jmeter吞吐量几个插件介绍]]></title>
    <url>%2F2019%2F01%2F18%2Fjmeter%E5%90%9E%E5%90%90%E9%87%8F%E5%87%A0%E4%B8%AA%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[几个jmeter吞吐量相关插件 准备测试接口：获取系统时间1GET http://192.168.0.1:8080/api/v1/Other/GetServiceTime jmeter脚本结构：1234567-- 线程组 -- HTTP信息头管理器 -- Throughput Controller 1 -- GetService Time 1 -- Throughput Controller 2 -- GetService Time 2 -- 查看结果树 吞吐量控制器（Throughput Controller）这个组件，其实按照我们的理解，不应该翻译成吞吐量控制器，这个组件的作用是控制子节点执行频率，有两个控制方式： Total Executions(执行总次数):控制执行次数 Percent Executions(执行百分比)：执行设置的测试计划的总测试次数的百分比 测试计划总测试次数在线程组处设置，总次数=（Number of Threaders(users) * Loop Count） 这两个很好理解，选择模式为总次数，设置几次，就执行几次；选模式为百分比，执行次数就是总次数的百分之n 这个组件，还有个per user选项 勾选：会按照每个线程单独计算吞吐量，如线程组设置了5个线程，循环次数为2的情况，吞吐量为1时，吞吐量的子节点每个线程执行一次，总共会执行5次。 不勾选：按照全局的执行数次进行计数，如线程组设置了5个线程，循环次数为2的情况，吞吐量为1时，吞吐量的子节点仅会执行一次。 实验线程组：5个线程，循环次数2次（测试计划总次数为10） 没有 Throughput Controller 这个组件，直接执行，在查看结果树种会有10条记录； 有Throughput Controller，模式选择Total Executions，Throughput设置为1，不勾选Per User，点击执行，查看结果树会有1条记录；（设置的throughput） 有Throughput Controller，模式选择Total Executions，Throughput设置为1，勾选Per User，点击执行，查看结果树会有5条记录；（线程数*设置的throughput） 有Throughput Controller，模式选择Percent Executions，Throughput设置为40，不勾选Per User，点击执行，查看结果树会有4条记录；（设置的throughput% * 总次数） 有Throughput Controller，模式选择Percent Executions，Throughput设置为40，勾选Per User，点击执行，查看结果树会有5条记录；（一个用户的吞吐量（1循环次数）设置的throurhput%，四舍五入之后，相加 ）（注意会有四舍五入，所以，当百分比设置为20%时候，一个用户的吞吐量的20%就是 1220%，直接四舍五入成了0，最后在查看结果树，就看不见执行记录） Constant Timer这个就可以理解为 思考时间（thinktime），单位是毫秒 作用域为当前线程组 实验jmeter测试脚本层级：12345678-- 线程组 -- HTTP信息头管理器 -- GetServiceTim1-$&#123;__time(YMDHMS,)&#125; -- Constant Timer（3000 ms） -- GetServiceTim2-$&#123;__time(YMDHMS,)&#125; -- GetServiceTim3-$&#123;__time(YMDHMS,)&#125; -- GetServiceTim4-$&#123;__time(YMDHMS,)&#125; -- 查看结果树 点击执行，在点击执行后3s，GetServiceTim1开始执行，再过3s，GetServiceTim2执行，以此类推 Constant Throughput Timer（固定QPS）这个组件就是给需要特定QPS的场景，组件里有两个菜单：Target throughput(in samples per minute)：目标QPS，单位是分钟，1200/min -&gt; 20/sCalculate Throughput based on：计算基准，有五种123456789This thread only ：分别控制每个线程的吞吐量，选择这种模式时，总的吞吐量为设置的 target Throughput 乘以线程的数量All active threads ： 设置的target Throughput 将分配在每个活跃线程上，每个活跃线程在上一次运行结束后等待合理的时间后再次运行。活跃线程指同一时刻同时运行的线程。All active threads in current thread group ：设置的target Throughput将分配在当前线程组的每一个活跃线程上，当测试计划中只有一个线程组时，该选项和All active threads选项的效果完全相同。All active threads （shared ）：与All active threads 的选项基本相同，唯一的区别是，每个活跃线程都会在所有活跃线程上一次运行结束后等待合理的时间后再次运行。All cative threads in current thread group （shared ）：与All active threads in current thread group 基本相同，唯一的区别是，每个活跃线程都会在所有活跃线程的上一次运行结束后等待合理的时间后再次运行。 实验线程数设置为10，循环次数：永远，持续时间90sjmeter 脚本层级结构：1234567-- 线程组 -- HTTP信息头管理器 -- Constant Throughput Timer -- GetServiceTime接口 -- 查看结果树 -- 聚合报告 -- jp@gc - Transactions per Second target throughput设置：1200/m（20/s），模式选择：this thread only，点击执行，当前QPS为 20*10（线程数）=200/s target throughput设置：1200/m（20/s），模式选择: All active threads，点击执行，当前QPS为 20/s(All active threads （shared ）和All cative threads in current thread group （shared ）没怎么实验，感觉至少没怎么用到。。。主要是懒。。) 完~]]></content>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jmeter压测关联接口]]></title>
    <url>%2F2019%2F01%2F16%2FJmeter%E5%8E%8B%E6%B5%8B%E5%85%B3%E8%81%94%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[jmeter关联接口性能测试 需求进行接口性能测试时候，尤其是登录类接口，经常需要先进行登录，然后拿到登录返回的token，比如sessionid，来作为参数传给下一个接口作为入参 实现测试接口：登录：123456789101112131415161718POST http://192.168.0.1:8080/api/LoginPOST data:&#123; &quot;mobileId&quot;:&quot;ad9ec085&quot;, &quot;loginUrl&quot;:&quot;P00019452&quot;, &quot;simId&quot;:&quot;|&quot;, &quot;phoneModel&quot;:&quot;vivo vivo X6SPlus D&quot;, &quot;phoneSysVersion&quot;:&quot;5.1.1&quot;, &quot;appVersion&quot;:&quot;4.2.0&quot;, &quot;language&quot;:&quot;ZH-CN&quot;, &quot;isClearGesturePwd&quot;:0, &quot;companyCode&quot;:&quot;test&quot;, &quot;registrationId&quot;:&quot;120c83f7601a92735ae&quot;, &quot;isAutoLogin&quot;:&quot;0&quot;, &quot;sign&quot;:&quot;a8a922d705c15686232d963e3ce9461aa96df4689420e5abab76535c00532417&quot;, &quot;timeStamp&quot;:&quot;20181029101835&quot;&#125; 接口返回信息：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&#123; &quot;result&quot;:true, &quot;data&quot;:&#123; &quot;sysPara&quot;:&#123; &quot;CancelAttachmentAmount&quot;:&quot;0&quot;, &quot;CustomerIsVisible&quot;:&quot;N&quot;, &quot;ExceptionAttachmentAmount&quot;:&quot;0&quot;, &quot;IsAllowRevoke&quot;:&quot;N&quot;, &quot;IsNeedApproveComment&quot;:&quot;N&quot;, &quot;IsNeedOTReason&quot;:&quot;N&quot;, &quot;IsNeedRejectComment&quot;:&quot;Y&quot;, &quot;IsShowOTType&quot;:&quot;1&quot;, &quot;LeaveAttachmentAmount&quot;:&quot;2&quot;, &quot;OTAttachmentAmount&quot;:&quot;0&quot;, &quot;OTDayTypeIsVisible&quot;:&quot;N&quot;, &quot;ShiftAttachmentAmount&quot;:&quot;0&quot;, &quot;isNeedOTExplain&quot;:&quot;1&quot; &#125;, &quot;userInfo&quot;:&#123; &quot;BackGroundVersion&quot;:&quot;Y1&quot;, &quot;GesturePwd&quot;:&quot;&quot;, &quot;IsValid&quot;:true, &quot;LoginName&quot;:&quot;P00019452&quot;, &quot;ModuleList&quot;:Array[9], &quot;PersonID&quot;:&quot;www-2f7f-4203-23212-5cc00acbcd0a&quot;, &quot;ServiceTime&quot;:&quot;11:37&quot;, &quot;SessionId&quot;:&quot;19431489-f4df-4143-b254-15b2f74f449a,a13b648f-6d81-4307-8ee1-b04c5b976246&quot;, &quot;TimeClassE&quot;:&quot;&quot;, &quot;TimeClassS&quot;:&quot;&quot;, &quot;UserID&quot;:&quot;112dcs-6d81-ewew-8ee1-b04c5b976246&quot;, &quot;Uuid&quot;:&quot;darcc75332-A4E2-4FB1-AFCF-C6EB07647825&quot; &#125;, &quot;user&quot;:&#123; &quot;BirthDay&quot;:&quot;&quot;, &quot;CompanyEngName&quot;:&quot;&quot;, &quot;CompanyName&quot;:&quot;&quot;, &quot;DeptId&quot;:&quot;0&quot;, &quot;DeptName&quot;:&quot;测试部&quot;, &quot;EmpID&quot;:&quot;P00019452&quot;, &quot;EmpName&quot;:&quot;虚拟主管&quot;, &quot;EnglishName&quot;:&quot;&quot;, &quot;Gender&quot;:&quot;&quot;, &quot;HeadImgUrl&quot;:&quot;&quot;, &quot;LoginName&quot;:&quot;P00019452&quot;, &quot;Position&quot;:&quot;测试总经理&quot; &#125; &#125;&#125; 获取用户信息：1http://192.168.0.1:8080/api/History/GetUserInfo?sessionId=7f959f6d-4b63-4d2d-8f88-025dc80e40f9,a13b648f-6d81-4307-8ee1-b04c5b976246 其中获取用户信息接口，需要传sessionId字段，该字段为登录接口的返回字段 所以需要先登录，再获取sessionid，再传给获取用户信息接口 jmeter实现jmeter也是正常的创建线程组，添加http请求头，添加http请求，添加响应断言，添加查看结果树和聚合报告 不同的是，在一个线程组中会有两个接口，第一个是登录，第二个是获取用户信息，并且在登录接口后需要添加一个组件：JSON Extractor作用就是提取登录返回的sessionid JSON Extractor内容：123Name of created variables: 变量名（后面参数化的变量名称，这边是sessionid）JSON Path expressions: json提取表达式 根据登录接口返回的层级结构，json表达式可以写成：$.data.userInfo.SessionId需要注意的是$后有一个.，表示当前路径 JSON表达式可以实现，只需要在登录接口后添加一个查看结果树，显示模式切换成JSON Path Tester，右下角就有JSON Path Expression测试 jmeter关联接口的层级结构：1234567891011- 线程组 - - CSV数据文件设置 - - HTTP信息头管理器 - - 登录接口（http请求） - - 查看结果树 - - 响应断言 - - JSON Extractor - - 获取用户信息接口 - - 响应断言 - - 查看结果树 - - 聚合报告 完~]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SqlServer清理事务日志]]></title>
    <url>%2F2019%2F01%2F13%2FSqlServer%E6%B8%85%E7%90%86%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[SqlServer事务日志已满解决办法 场景压测时候，web对接了SqlServer，时间长，SqlServer报了错，事务日志已满，无法查询 事务日志事务日志是一个与数据库文件分开的文件。它存储对数据库进行的所有更改，并全部记录插入、更新、删除、提交、回退和数据库模式变化。事务日志还称作前滚日志或重做日志。 事务日志是备份和恢复的重要组件，也是使用 SQL Remote 或 [复制代理] 复制数据所必需的。 在缺省情况下，所有数据库都使用事务日志。事务日志的使用是可选的，但是，除非您因特殊原因而不使用，否则您应始终使用它。运行带有事务日志的数据库可提供更强的故障保护功能、更好的性能以及数据复制功能。 解决办法：123451，数据库属性-选项-恢复模式-选择简单-点击确定2，右键数据库-任务-收缩-文件-文件类型-选择日志-收缩操作-选择在释放未使用的空间前重新组织页，选择1M-点击确定3，数据库属性-选项-恢复模式-选择完整-点击确定 完~]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>SqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix触发器函数介绍]]></title>
    <url>%2F2019%2F01%2F07%2Fzabbix%E8%A7%A6%E5%8F%91%E5%99%A8%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[zabbix触发器函数说明 触发器函数官方文档 函数 abschange描述：最近获取值与之前获取值差的绝对值。 参数： 说明：1234567891011支持值的类型: float, int, str, text, log例如:(最近获取值;之前获取值=abschange)1;5=43;1=20;-2.5=2.5返回值:0 - 两值相等1 - 两值不等 avg (sec|#num,)描述：指定评估期内一个项目的平均值 参数：123sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示time_shift （可选） - 时间偏移 说明：12345678支持值的类型: float, int例如:⇒ avg(#5) → 五个最新值的平均值⇒ avg(1h) → 一个小时的平均值⇒ avg(1h,1d) → 一天前一个小时的平均值。从Zabbix 1.8.2开始支持time_shift参数。当需要比较当前平均值和指定时间之前的平均值（由time_shift参数指定）时，它就很有用了。 band (sec|#num,mask,)描述：项目值和掩码的按位与值。 说明：123sec (可省略) or #num - 最新的第N个值mask (必须有) - 64位无符号整数 (0 - 18446744073709551615)time_shift (可选) - 参照 avg() 参数：1234567891011支持值的类型: int注意此处的 #num 参数和其它一些函数的作用不用 (参照 last()).尽管以二进制方式进行比较，但是所有的参数和返回值都是十进制数。 例如, 检查第三位是和4做比较而不是100。例如:⇒ band(,12)=8 or band(,12)=4 → 第三位和第四位被设置，但不是同时⇒ band(,20)=16 → 第三位没有被设置但是第五位被设置了。从Zabbix 2.2.0开始支持该函数。 change描述：最近获取值与之前获取值的差。 说明： 参数：1234567891011 支持的值类型: float, int, str, text, log例如:(最近获取值;之前获取值=change)1;5=+43;1=-20;-2.5=-2.5返回值:0 - 两值相等1 - 两值不等 count (sec|#num,,,)描述：指定评估期内值的个数。 说明：12345678910111213141516171819202122sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示pattern (可选) - 所需模式 (整型项目 - 精确匹配; 浮点型项目 - 误差值0.000001内)operator (可选)支持的 operators:eq - 相等ne - 不相等gt - 大于ge - 大于等于lt - 小于le - 小于等于like - 只要包含pattern (区分大小写)就被匹配band - 按位与regexp - 给定 pattern 的正则表达式，区分大小写iregexp - 给定 pattern 的正则表达式，不区分大小写注意:eq (默认), ne, gt, ge, lt, le, band, regexp, iregexp 支持整数型项目eq (默认), ne, gt, ge, lt, le, regexp, iregexp 支持浮点型项目like (默认), eq, ne, regexp, iregexp支持string, text and log 型项目time_shift (可选) - 参照 avg() 参数：1234567891011121314151617181920支持值的类型: float, int, str, text, logband 做第三个参数时，第二个 pattern 参数可以用两个数字表示， 以&apos;/&apos;分隔: number_to_compare_with/mask。 count() 计算项目值和掩码的按位与，再和 number_to_compare_with 比较的结果。如果按位与值等于 number_to_compare_with ，则计数。如果掩码值等于 number_to_compare_with, 只需要指定掩码值。regexp 或 iregexp 做为第三个参数时，第二个 pattern 参数可以是一个普通的或 global ( &apos;@&apos; 开头)的正则表达式。 避免全局表达式大小写敏感从全局表达式设置中继承。为了方便正则匹配，浮点型数值通常以四位小数方式表示。也应该注意大数值在以十进制（存储在数据库中）和二进制（zabbix server中使用）表示中的区别，可能会影响十进制的第四位小数。 例如:⇒ count(10m) → 过去10分钟值的个数⇒ count(10m,12) → 过去10分钟值等于12的个数⇒ count(10m,12,&quot;gt&quot;) → 过去10分钟值大于12的个数⇒ count(#10,12,&quot;gt&quot;) → 最新10个值，它们的值大于12的个数⇒ count(10m,12,&quot;gt&quot;,1d) → 一天前的前十分钟值大于12的个数⇒ count(10m,6/7,&quot;band&quot;) → 过去10分钟值最低三个有效位是 &apos;110&apos; (十进制)的个数。⇒ count(10m,,,1d) → 一天前的前十分钟值的个数从Zabbix 1.6.1开始支持#num参数。从Zabbix 1.8.2开始支持time_shift参数和字符串运算符。从Zabbix 2.2.0开始支持band运算符。从Zabbix 3.2.0开始支持regexp, iregexp运算符。 date描述： 当前日期，以YYYYMMDD格式表示。 说明： 参数：123支持值的类型: any返回值如: 20150731 dayofmonth描述：当前是本月的第几天，取值范围从1到31。 说明： 参数：123支持值的类型: any从Zabbix 1.8.5开始支持该函数。 dayofweek描述：当前是本周的第几天，取值范围从1到7 (周一 - 1, 周日 - 7)。 说明： 参数：1支持值的类型: any delta (sec|#num,)描述：指定评估期内最大值和最小值的差(‘max()’ 减去 ‘min()’)。 说明：12sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示time_shift (可选) - see avg() 参数：123支持值的类型: float, int从Zabbix 1.8.2开始支持time_shift参数。 diff描述：比较最近获取值与之前获取值是否相同。 说明： 参数：12345支持值的类型: float, int, str, text, log返回值:1 - 两值不等0 - 两值相等 forecast (sec|#num,,time,,)描述：项目的未来值，最大值，最小值，差值或平均值。 说明：123456789101112131415161718192021222324252627sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示time_shift (可选) - see avg()time - 需要进行估计的指定时间fit (可选) - 用于匹配历史数据的函数支持的fits:linear - 线性函数polynomialN - n次多项式 (1 &lt;= N &lt;= 6)exponential - 指数函数logarithmic - 对数函数power - 幂函数注意:默认是linear , polynomial1 等同于 linearmode (可选) - demanded output支持的 modes:value - 值 (默认)max - 最大值min - 最小值delta - 最大值-最小值avg - 平均值注意:value 估计项目值在此刻now + timemax, min, delta and avg 根据now 和 now + time 时间段估计的项目值确定结果 参数：1234567891011121314151617支持值的类型: float, int如果返回值大于 999999999999.9999 或者小于 -999999999999.9999, 返回值相应被设置为999999999999.9999 或 -999999999999.9999 。只有在表达式被误用时才不被支持（错误的项目类型，无效的参数），出现错误时返回-1。例如:⇒ forecast(#10,,1h) → 根据最新的十个值估计一小时后的项目值⇒ forecast(1h,,30m) → 根据过去一小时的值估计三十分钟后的项目值⇒ forecast(1h,1d,12h) → 根据一天前的一个小时值估计十二个小时后的项目值⇒ forecast(1h,,10m,exponential) → 根据过去一小时并按照指数函数方式估计十分钟后的项目值⇒ forecast(1h,,2h,polynomial3,max) → 根据过去一小时并按照三次多项式方式估计两小时的最大项目值⇒ forecast(#​2,,​-20m) → 根据最新的两个值估计二十分钟前的项目值 （比使用last()或prev()函数更加精确, 特别是项目很少更新的时候, 比如说, 一小时一次）从Zabbix 3.0.0开始支持该函数。​从Zabbix 3.0.6 和 3.2.2开始支持负的​time值。通过 predictive trigger functions查看扩展信息。 fuzzytime (sec)描述：检查项目时间戳和zabbix服务器时间相差多大。 说明：sec - 秒数 参数：1234567891011支持值的类型: float, int返回值:0 - 如果项目时间戳和zabbix服务器时间戳之间相差超过指定的时间1 - 其它。常使用system.localtime来检查本地时间是否与zabbix服务器的时间相同。也可以使用vfs.file.time[/path/file,modify]键值检测文件是否长时间未更新。例如:⇒ fuzzytime(60)=0 → 如果时间差超过60秒，就会检测到一个问题 iregexp (pattern,)描述：该函数和 regexp() 类似，只是不区分大小写。 说明：see regexp() 参数：支持值的类型: str, log, text last (sec|#num,)描述：最近的值。 说明：12sec (可省略) or #num - 最新的第N个值time_shift (可选) - see avg() 参数：1234567891011支持值的类型: float, int, str, text, log注意此处的 #num 参数和其它一些函数的作用不用。例如:last() 通常等同于 last(#1)last(#3) - 第三个最新值 (不是三个最新值)如果在history中同一秒有多个值存在，Zabbix不能保证值的精确顺序。从Zabbix 1.6.2开始支持 #num 参数。从Zabbix 1.8.2开始支持 time_shift 参数。 logeventid (pattern)描述：检查最近日志记录的EventID是否匹配正则表达式。 说明：pattern - 使用正则表达式表示需要匹配的模式， POSIX extended 类型。 参数：1234567支持值的类型: log返回值:0 - 不匹配1 - 匹配从Zabbix 1.8.5开始支持该函数 logseverity描述：最近日志记录的日志等级。 说明： 参数：123456支持值的类型: log返回值:0 - 默认等级N - 对应的等级 (整数，常用语Windows event logs: 1 - Information, 2 - Warning, 4 - Error, 7 - Failure Audit, 8 - Success Audit, 9 - Critical, 10 - Verbose).Zabbix从Windows event log Information域获取日志等级。 logsource (pattern)描述：检查最近的日志记录是否匹配参数的日志来源。 说明：pattern - string类型 参数：123456支持值的类型: log返回值:0 - 不匹配1 - 匹配通常用于Windows event logs. 例如, logsource(&quot;VMware Server&quot;). max (sec|#num,)描述： 指定评估期内一个项目的最大值。 说明：12sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示time_shift (可选) - see avg() 参数：123支持值的类型: float, int从Zabbix 1.8.2开始支持 time_shift 参数。 min (sec|#num,)描述：指定评估期内一个项目的最小值。 说明：12sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示time_shift (可选) - see avg( 参数：123支持值的类型: float, int从Zabbix 1.8.2开始支持 time_shift 参数。 nodata (sec)描述：检查是否没有接收到数据。 说明：1234sec - 评估期以秒值表示。时间不应该少于30秒，因为timer处理器每30秒计算一次该函数。nodata(0) 不被允许. 参数：1234567891011支持值的类型: any返回值:1 - 指定评估期没有接收到数据0 - 其它注意，如果在第一个参数指定的时间内出现以下问题，该函数会报错:- 没有数据以及Zabbix server被重启- 没有数据以及修复完成- 没有数据以及项目被添加或重新激活错误显示在触发器configuration的 Info 列 . now描述：距离Epoch (00:00:00 UTC, January 1, 1970)时间的秒数。 说明： 参数：支持值的类型: any percentile (sec|#num,,percentage)描述：P-th 一段时间的百分值， P (percentage) 做为第三个参数。 说明：123sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示time_shift (可选) - see avg()percentage - 0 and 100 (包括)之间的一个浮点数，小数点后最多四位 参数：123支持值的类型: float, int从Zabbix 3.0.0开始支持该函数。 prev描述：前一个值。 说明： 参数：123支持值的类型: float, int, str, text, log返回值和 last(#2)相同。 regexp (pattern,)描述：检查最近的值是否匹配正则表达式。 说明：12pattern - 正则表达式, POSIX extended 样式。sec or #num (可选) - 评估期以秒值或最新值个数（跟在#号后）表示。 这种情况下，可处理一个值以上。 参数：1234567支持值的类型: str, text, log返回值:1 - 找到0 - 其它该函数区分大小写。 str (pattern,)描述：从最新值中查找一个字符串。 说明：12pattern - string型sec or #num (可选) - 评估期以秒值或最新值个数（跟在#号后）表示。 这种情况下，可处理一个值以上。 参数：1234567支持值的类型: str, text, log返回值:1 - 找到0 - 其它该函数区分大小写。 strlen (sec|#num,)描述：最新值的字符长度（而不是字节数）。 说明：12sec (可省略) or #num - 最新的第N个值time_shift (可选) - see avg() 参数：12345678910支持值的类型: str, text, log注意此处的 #num 参数和其它一些函数的作用不用。例如:⇒ strlen()(等同于 strlen(#1)) → 最新值的长度⇒ strlen(#3) → 最新的第三个值的长度⇒ strlen(,1d) → 一天前最新值的长度。从Zabbix 1.8.4开始支持该函数。 sum (sec|#num,)描述：指定评估期内项目值的和。 说明：12sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示。time_shift (可选) - see avg() 参数：123支持值的类型: float, int从Zabbix 1.8.2开始支持 time_shift 参数。 time描述：当前时间，以HHMMSS格式表示。 说明： 参数：123支持值的类型: any返回值如: 123055 timeleft (sec|#num,,threshold,)描述：达到阀值需要多久时间。 说明：1234sec or #num - 评估期以秒值或最新值个数（跟在#号后）表示。time_shift (可选) - see avg()threshold - 阀值fit (可选) - see forecast() 参数：1234567891011121314151617支持值的类型: float, int如果返回值大于 999999999999.9999, 则被设置为999999999999.9999.如果达不到阀值则将返回值设置为999999999999.9999。只有在表达式被误用时才不被支持（错误的项目类型，无效的参数），出现错误时返回-1。例如:⇒ timeleft(#10,,0) → 根据最新的十个值估计项目值达到0需要的时间⇒ timeleft(1h,,100) → 根据过去一小时的值估计项目值达到100需要的时间⇒ timeleft(1h,1d,0) → 根据一天前的一个小时值估计项目值达到0需要的时间⇒ timeleft(1h,,200,polynomial2) → 根据过去一小时并按照二次多项式方式估计项目值达到200需要的时间从Zabbix 3.0.0开始支持该函数。从Zabbix 3.0.6 和 3.2.2开始支持Unit symbols 的 ​threshold 参数。通过 predictive trigger functions查看扩展信息。]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>zabbix3.4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix监控磁盘使用率]]></title>
    <url>%2F2018%2F12%2F29%2Fzabbix%E7%9B%91%E6%8E%A7%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E7%8E%87%2F</url>
    <content type="text"><![CDATA[zabbix各种键值 做grafana对接zabbix展示磁盘指定分区当前使用百分比时候，找到了一篇总结了zabbix各种键值的博客，搬运来做记录 监控磁盘zabbix监控linux不用分区磁盘使用量百分比方式：配置-模板-Template OS Linux-自动发现规则-Mounted filesystem discovery-监控项原型，添加两个监控项，used以及pused（百分比） used123456789名称：Used disk space on $1类型：zabbix客户端键值：“vfs.fs.size[/elasticsearch,used]”信息类型：数字（无正负）单位：B pused123456789名称：Used disk space on $1 (percentage)类型：zabbix客户端键值：“vfs.fs.size[/elasticsearch,pused]”信息类型：浮点型单位：% 然后将图加进去：图形原型,”Disk space usage /elasticsearch”，选择添加原型，选择”Template OS Linux: Used disk space on /elasticsearch”保存，完成。 各键值以下表格是zabbix agent所支持的所有key列表，添加一项监控的时候，首先想到的应该是zabbix agent是否已经有相关的key存在，而不是自己去写脚本来获取key。agent.hostname返回被监控端名称(字符串)agent.ping检测被监控端是否存活(1:运行中 其他:未运行)-使用函数 nodata()检测客户端是否正在运行agent.versionzabbix agent版本字符串kernel.maxfiles系统支持最大的open files整数kernel.maxproc系统支持最大的进程数量整数log[file,&lt;regexp&gt;,&lt;encoding&gt;,&lt;maxlines&gt;,&lt;mode&gt;,&lt;output&gt;]监控日志文件file - 文件详细路径regexp - 正则encoding - 编码maxlines - zabbix agent向server或者proxy发送最大的行数。 这个参数覆盖配置文件zabbxi_agentd.conf中的’MaxLinesPerSecond’mode - 可选值:all (默认), skip (跳过处理老数据).mode参数从2.0版本开始支持output - 可选项，输出格式模板.示例: log[/var/log/syslog] log[/var/log/syslog,error] log[/home/zabbix/logs/logfile,,,100]logrt[file_pattern,&lt;regexp&gt;,&lt;encoding&gt;,&lt;maxlines&gt;,&lt;mode&gt;,&lt;output&gt;]Monitoring of log file with log rotation support.file_pattern - 文件绝对路径net.dns[&lt;ip&gt;,zone,&lt;type&gt;,&lt;timeout&gt;,&lt;count&gt;]检测DNS服务是否开启0 – DNS挂了 1 - DNS运行中ip - DNS服务器的ip地址(留空表示使用本地DNS, ignored onWindows)zone - 需要测试的域名type - 记录类型 (默认为 SOA),type可选值: ANY, A, NS, CNAME, MB, MG, MR, PTR, MD, MF, MX, SOA, NULL, WKS (除了windows), HINFO, MINFO, TXT, SRV SRVtimeout (ignored on Windows) – 超时时间(默认1秒)count (ignored on Windows) – 重试次数 (默认值2)示例key: net.dns[8.8.8.8,zabbix.com,MX,2,1]net.dns.record[&lt;ip&gt;,zone,&lt;type&gt;,&lt;timeout&gt;,&lt;count&gt;]执行一个DNS查询获取DNS查询数据.ip - DNS服务器的ip地址(留空表示使用本地DNS, ignored on Windows)zone - 需要测试的域名type - 记录类型 (默认SOA,可选值同net.dns)timeout (ignored on Windows) – 超时时间(默认1秒)count (ignored on Windows) – 重试次数 (默认值2)示例key: net.dns.record[8.8.8.8,ttlsa.com,MX,2,1]net.if.collisions[if]Out-of-window collision.Number of collisions. Integer.if - 网卡net.if.discovery列出网卡.通常用于低级别的discovery.JSON对象net.if.in[if,&lt;mode&gt;]网卡入口流量整数.if - 网卡名称mode - 可用值: bytes - 字节数 (默认)packets - 包数量errors - 错误数量dropped - 丢包数量示例keys: net.if.in[eth0,errors] net.if.in[eth0]net.if.out[if,&lt;mode&gt;]网卡出口流量（参数参见net.if.in）net.if.total[if,&lt;mode&gt;]网卡进/出流量的总和（参数参见net.if.in）net.tcp.listen[port]检测端口是否开启0 – （not listen） 1 – in LISTEN stateport示例: net.tcp.listen[80]net.tcp.port[&lt;ip&gt;,port]是否可以连接到指定的TCP端口0 – cannot connect 1 – can connect ip - IP地址(默认是 127.0.0.1) port - 端口范例: net.tcp.port[,80] 检测web服务器端口是否运行中net.tcp.service[service,&lt;ip&gt;,&lt;port&gt;]检测服务是否开启，并且端口可用0 – 服务挂了 1 – 服务运行中 service - 如下:ssh, ntp, ldap, smtp, ftp, http, pop, nntp,imap, tcp, https, telnet ip - IP地址 (默认127.0.0.1) port - 端口 (默认情况为标准端口号)示例key: net.tcp.service[ftp,,45]net.tcp.service.perf[service,&lt;ip&gt;,&lt;port&gt;]检测服务器性能0 – 服务挂了; seconds – 链接到服务器端口消耗的时间service - 如下:ssh, ntp, ldap, smtp, ftp, http, pop, nntp,imap, tcp, https, telnetip - IP地址 (默认127.0.0.1)port - 端口 (默认情况为标准端口号)示例key: net.tcp.service.perf[ssh] net.udp.listen[port]proc.mem[&lt;name&gt;,&lt;user&gt;,&lt;mode&gt;,&lt;cmdline&gt;]用户进程消耗的内存内存使用量 (字节单位).name - 进程名 (默认值 “all processes”)user - 用户名 (默认值“all users”)mode - 可选值: avg, max, min, sum (默认)cmdline - 命令行过滤(正则表达时)示例keys: proc.mem[,root] – root的进程消耗了多少内存 proc.mem[zabbix_server,zabbix] – zabbix用户运行的zabbix_server使用了多少内存 proc.mem[,oracle,max,oracleZABBIX]proc.num[&lt;name&gt;,&lt;user&gt;,&lt;state&gt;,&lt;cmdline&gt;]某用户某些状态的进程的数量进程数量name - 进程名称 (默认“all processes”)user - 用户名 (默认 “all users”)state - 可用值: all (默认), run,sleep, zombcmdline - 命令行过滤(正则表达时)示例keys: proc.num[,mysql] – MySQL用户运行的进程数量proc.num[apache2,www-data] – www-data运行了多少个apache2进程proc.num[,oracle,sleep,oracleZABBIX]备注：Windows系统只支持name和user两个参数sensor[device,sensor,&lt;mode&gt;]读取硬件传感器device - 设备名称sensor - 传感器名称mode - 可选值:avg, max, min示例key: sensor[w83781d-i2c-0-2d,temp1] Prior to Zabbix 1.8.4, the sensor[temp1] format was used. On Linux 2.6+, 读取/sys/class/hwmon. On OpenBSD, 读取hw.sensors MIB.示例keys: sensor[cpu0,temp0] – CPU0的温度 sensor[cpu[0-2]$,temp,avg] – cpu平均温度Zabbix 1.8.4开始支持OpenBSDsystem.boottime系统启动的时间戳整数.unix时间戳system.cpu.intr设备中断整数system.cpu.load[&lt;cpu&gt;,&lt;mode&gt;]CPU负载浮点数cpu - 可用值: all (默认), percpu (所有在线cpu的负载)mode - 可用值:avg1 (1分钟 默认值), avg5(5分钟平均), avg15 (15分钟平均值)范例key: system.cpu.load[,avg5]system.cpu.num[&lt;type&gt;]CPU数量处理器个数type - 可用值: online (默认值), max范例: system.cpu.numsystem.cpu.switches上下文交换交换次数老命名方式: system[switches]system.cpu.util[&lt;cpu&gt;,&lt;type&gt;,&lt;mode&gt;]CPU利用率百分比cpu - cpu数量 (默认是所有cpu)type - 可用值: idle, nice, user (默认), system (windows系统默认值）, iowait, interrupt, softirq,stealmode - 可用值: avg1 (一分钟平均，默认值), avg5(5分钟平均, avg15 (15分钟平均值)范例key: system.cpu.util[0,user,avg5]system.hostname[&lt;type&gt;]返回主机名字符串type (仅用于windows系统) – 可用值: netbios(默认) or hostsystem.hw.chassis[&lt;info&gt;]返回机架信息字符串info - full (默认), model, serial, type 或vendor例如: system.hw.chassisHewlett-Packard HP Pro 3010 Small Form Factor PC CZXXXXXXXX Desktop]备注：要root权限，因为这些信息是从内存中读取的。system.hw.cpu[&lt;cpu&gt;,&lt;info&gt;]返回CPU信息字符/数字cpu - cpu数量或者all (默认)info - full (默认), curfreq, maxfreq, model 或者vendor例如: system.hw.cpu[0,vendor] AuthenticAMD 从/proc/cpuinfo、/sys/devices/system/cpu/[cpunum]/cpufreq/cpuinfo_max_freq获取信息. 如果指定了CPU数量和 curfreq或者maxfreq, 将会返回数值(Hz).system.hw.devices[&lt;type&gt;]列出PCI或者USB文本值type - pci (默认) or usb范例: system.hw.devices[pci] 00:00.0 Host bridge: Advanced Micro Devices [AMD] RS780 Host Bridge [..] 返回lspci或者lsusb (不带参数)system.hw.macaddr[&lt;interface&gt;,&lt;format&gt;]列出MAC地址字符串interface - all (默认) 或者正则表达式format - full (默认) 、short范例: system.hw.macaddr[&quot;eth0$&quot;,full] [eth0] 00:11:22:33:44:55 列出指定接口mac地址 如果format指定为short，MAC地址相同的将会被忽略掉system.localtime[&lt;type&gt;]系统时间.数字或者字符串system.run[command,&lt;mode&gt;]在制定的主机上运行命令文本command - 命令mode - wait (默认值, 执行超时时间), nowait (不等待)最大可用返回512KB数据，包含空白数据。 命令输出数据必须是文本例如: system.run[ls -l /] – 列出/的文件和目录.Note: 启用这个方法, agent配置文件必须配置 EnableRemoteCommands=1选项system.stat[resource,&lt;type&gt;]虚拟内存状态数字entsystem.sw.arch返回软件信息字符串范例: system.sw.arch i686system.sw.os[&lt;info&gt;]返回系统信息字符串info - full (default), short ,name范例: system.sw.os[short] Ubuntu 2.6.35-28.50-generic 2.6.35.11信息来自如下文件：/proc/version [short]/proc/version_signature [name]/etc/issue.netsystem.sw.packages[&lt;package&gt;,&lt;manager&gt;,&lt;format&gt;]已安装软件列表文本值package - all (默认)或者正则表达式manager - all (默认) or a package managerformat - full (默认) ，short范例: system.sw.packages[mini,dpkg,short]system.swap.in[&lt;device&gt;,&lt;type&gt;]交换分区IN（磁盘交换到内存）数字device - 交换分区设备 (默认all)type - 可选值: count (swapins数量), sectors(sectors swapped in), pages (pages swapped in).示例key: system.swap.in[,pages]数据采集自: Linux 2.4: /proc/swaps, /proc/partitions, /proc/stat Linux 2.6: /proc/swaps, /proc/diskstats, /proc/vmstatsystem.swap.out[&lt;device&gt;,&lt;type&gt;]Swap out (f内存到磁盘) .数字device - swap设备 (默认all)type - count (number of swapouts), sectors(sectors swapped out), pages (pages swapped out). 示例key: system.swap.out[,pages]数据采集自: Linux 2.4: /proc/swaps, /proc/partitions, /proc/stat Linux 2.6: /proc/swaps, /proc/diskstats, /proc/vmstatsystem.swap.size[&lt;device&gt;,&lt;type&gt;]交换分区大小字节或者百分比device - 交换分区 (默认值 all)type - free (free swap space, default), pfree (free swap space, in percent), pused (used swap space, in percent), total (total swap space), used (used swap space)示例 system.swap.size[,pfree] – 空闲swap百分比system.uname返回主机相信信息.字符串system.uptime系统运行时长(秒)多少秒使用s/uptime来获取system.users.num登陆用户数量多少用户agent使用who命令获取vfs.dev.read[&lt;device&gt;,&lt;type&gt;,&lt;mode&gt;]磁盘读取状态整数，浮点数（如果type为如下）device - 磁盘设备 (默认值 “all”) type - 可选值:sectors, operations, bytes, sps, ops, bps(必须指定, 不同操作系统下不同). sps, ops, bps stand for: sectors, operations, bytes per second, respectivelymode - 可选值: avg1, avg5, avg15. 备注: 只有type为sps, ops, bps的时候，第三个参数才被支持。不同操作系统的TYPE参数： FreeBSD – bps Linux – sps OpenBSD – operations Solaris – bytes示例key: vfs.dev.read[,operations]vfs.dev.write[&lt;device&gt;,&lt;type&gt;,&lt;mode&gt;]磁盘写入状态整数，device - 磁盘设备 (默认 all) type - sectors, operations, bytes, sps, ops, bpsmode - one of avg1 (default),avg5 , avg15.example: vfs.dev.write[,operations] Old naming: iovfs.file.cksum[file]计算文件校验 UNIX cksum.file - 文件完整路径vfs.file.contents[file,&lt;encoding&gt;]获取文本内容若为空，只返回 LF/CR characters.file - 文件完整路径例如: vfs.file.contents[/etc/passwd] 文件不可以超过64KB. vfs.file.exists[file]检测文件是否存在1 – 存在 0 – 不存在 file - 文件完整路径vfs.file.md5sum[file]文件MD5校验码文件MD5哈希值file - 完整路径vfs.file.regexp[file,regexp,&lt;encoding&gt;,&lt;start line&gt;,&lt;end line&gt;,&lt;output&gt;]文件中搜索字符串包含字符串的行，或者为空file - 文件完整路径regexp - GNU正则表达式encoding - 编码start line - 从哪一行开始，默认第一行end line - 从哪一行结束，默认最后一行如: vfs.file.regexp[/etc/passwd,zabbix] vfs.file.regexp[/path/to/some/file,”([0-9]+)$”,,3,5,\1] vfs.file.regexp[/etc/passwd,^zabbix:.:([0-9]+),,,,\1]vfs.file.regmatch[file,regexp,&lt;encoding&gt;,&lt;start line&gt;,&lt;end line&gt;]文件中搜索字符串0 – 未找到 1 – 找到file - 文件完整路径regexp - GNU 正则表达式encoding - 编码start line - 哪行开始，默认第一行end line - 哪行结束，默认最后一行例如: vfs.file.regmatch[/var/log/app.log,error]vfs.file.size[file]文件大小字节fzabbix必须有可读此文件的权限vfs.file.time[file,&lt;mode&gt;]文件时间信息Unix 时间戳.mode - modify (默认, 修改时间), access – 最后访问时间, change – 最后改变时间例如: vfs.file.time[/etc/passwd,modify] 备注：文件大小有限制vfs.fs.discovery列出挂载的文件系统 用于lld.JSON对象vfs.fs.inode[fs,&lt;mode&gt;]inodes数量数字fs - 文件系统mode - total (默认), free, used, pfree (空闲百分比), pused (使用百分比)例如: vfs.fs.inode[/,pfree]vfs.fs.size[fs,&lt;mode&gt;]磁盘空间，返回本地文件系统的使用量字节fs - 文件系统mode - total (默认), free, used, pfree (空闲百分比), pused (使用百分比).例如: vfs.fs.size[/tmp,free]vm.memory.size[&lt;mode&gt;]内存大小字节或百分比mode - total (默认), active, anon, buffers, cached, exec, file, free, inactive, pinned, shared, wired, used, pused, available监控项vm.memory.size[] 允许三种类型的参数：第一类：包含total - 总内存第二类： 系统指定内存类型:active, anon, buffers, cached, exec, file, free, inactive,pinned, shared, wired. 第三类：用户级别，一共使用了多少内存，还有多少内存可用: used, pused, available,pavailable.web.page.get[host,&lt;path&gt;,&lt;port&gt;]获取网页内容网页源代码host - 主机名/域名path - 文件地址，默认/port - 端口，默认80返回空字符串表示失败. 例如: web.page.get[web.page.perf[host,&lt;path&gt;,&lt;port&gt;]获取完全加载网页消耗的时长秒，返回0表示失败host - 主机名/域名path - html地址，默认是/port - 端口,默认80web.page.regexp[host,&lt;path&gt;,&lt;port&gt;,&lt;regexp&gt;,&lt;length&gt;,&lt;output&gt;]在网页中搜索字符串 失败则返回空字符 (不匹配).host - 主机名path - html文件路径 (默认值 /)port - 端口 (默认80)regexp - GNU正则表达式length - 返回的最大的字符串数量output - 输出格式模板可选项. 参考博客 参考博客]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>zabbix3.4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL启用弱口令]]></title>
    <url>%2F2018%2F12%2F25%2FMySQL%E5%90%AF%E7%94%A8%E5%BC%B1%E5%8F%A3%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[MySQL启动弱口令 有的时候，有点懒，测试环境就想数据库密码简单点，不用什么大小写，特殊字符各种组合 root用户登录mysql -uroot -p 查看密码策略：1SHOW VARIABLES LIKE &apos;validate_password%&apos;; 输出：12345678910111213mysql&gt; show variables like &quot;validate_password%&quot;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+7 rows in set (0.00 sec) 主要修改两个即可：1set global validate_password_policy=0; 值含义：1230 or LOW Length1 or MEDIUM Length; numeric, lowercase/uppercase, and special characters2 or STRONG Length; numeric, lowercase/uppercase, and special characters; dictionary file 另一个：1set global validate_password_length=6; 这个值有最小值限制：validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)所以默认的validate_password_length最小值是4]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux几个变量]]></title>
    <url>%2F2018%2F12%2F24%2FLinux%E5%87%A0%E4%B8%AA%E5%8F%98%E9%87%8F%2F</url>
    <content type="text"><![CDATA[linux shell中部分变量的含义 123456789101112131415$0：脚本名$1：传给脚本的第一个参数$2：传给脚本的第二个参数$$：脚本运行的PID$@：传给脚本的所有参数列表（list形式）$*：传给脚本的所有参数列表（字符串形式）$#：传给脚本的参数个数$?：上个已执行命令的退出状态码，成功为0 示例：1234567891011121314151617#!/bin/bash# test linux variables# 20181224 by kyle# 使用basename获取脚本名，避免输出脚本名时候带上命令:./test1.shname=$(basename $0)echo echo &quot;number of variables is：$#&quot;echo &quot;the first variable is: $1&quot;echo &quot;the second is: $2&quot;echo &quot;the scrip&apos;s name is: $name&quot;echo &quot;the script&apos;s PID is: $$&quot;echo &quot;the parameters are: $@&quot;echo &quot;the parameter list is: $*&quot;echo &quot;show script stat: $?&quot;echo 执行结果：12345678910[root@localhost mountTest]# ./VariablesTest.sh number of variables is：0the first variable is: the second is: the scrip&apos;s name is: VariablesTest.shthe script&apos;s PID is: 4829the parameters are: the parameter list is: show script stat: 0 比较“$@”和“$*”12345678910111213141516171819202122232425#!/bin/bash# compare $@ with $*# 20181224 by kyleecho echo &quot;followed by \$*&quot;count=1#for param in &quot;$*&quot;do echo &quot;\$* Parameter #$count = $param&quot; count=$[ $count + 1 ]done#echo echo &quot;Here is \$@&quot;count=1#for param in &quot;$@&quot;do echo &quot;\$@ Parameter #$count = $param&quot; count=$[ $count + 1 ]done 执行结果：1234567891011[root@localhost mountTest]# ./ShellTest.sh 1 2 3 4 5 followed by $*$* Parameter #1 = 1 2 3 4 5Here is $@$@ Parameter #1 = 1$@ Parameter #2 = 2$@ Parameter #3 = 3$@ Parameter #4 = 4$@ Parameter #5 = 5]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix监控磁盘IO]]></title>
    <url>%2F2018%2F12%2F21%2Fzabbix%E7%9B%91%E6%8E%A7%E7%A3%81%E7%9B%98IO%2F</url>
    <content type="text"><![CDATA[zabbix监控Linux磁盘IO 前置准备首先是查询磁盘类型123[root@localhost script]# fdisk -lDisk /dev/vda: 214.7 GB, 214748364800 bytes, 419430400 sectors 服务器上，基本是在vda盘上进行的IO，所以本次就监控vda就可以了或者直接iostat -dxk 2看一下效果，哪个设备是需要进行监控的，直接grep即可 附linux硬件设备概览(/dev目录下)：123456789101112131415ide硬盘：/dev/hd[a-d]SCSI/SATA/USB硬盘：/dev/sd[a-p]u盘：/dev/sd[a-p]软驱：/dev/fd[0-1]打印机：25针：/dev/lp[0-2]；USB: /dev/usb/lp[0-15]鼠标：usb: /dev/usb/mouse[0-15]；ps2: /dev/psaux当前cd rom/dvd rom：/dev/cdrom当前鼠标：/dev/mouse 获取item值使用zabbix监控磁盘IO，只需要在服务器装一个zabbix_agent就，配置完监控脚本即可，这边也就不多说怎么装，怎么配置了，直接上脚本： userparameter_mysql.conf(/etc/zabbix/zabbix_agentd.d)添加1UserParameter=disk.status[*],/etc/zabbix/script/disk-status.sdisk-status.sh $1 相应的，在/etc/zabbix/script文件下，创建磁盘信息获取脚本disk-status.sh:1vim disk-status.sh 内容如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/bin/bash# 参数是否正确if [ $# -ne &quot;1&quot; ];then echo &quot;arg error!&quot; ficase $1 in rrqm) iostat -dxk 1 2|grep -w vda|tail -1 |awk &apos;&#123;print $2&#125;&apos; ;; wrqm) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $3&#125;&apos; ;; rps) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $4&#125;&apos; ;; wps) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $5&#125;&apos; ;; rKBps) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $6&#125;&apos; ;; wKBps) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $7&#125;&apos; ;; avgrq-sz) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $8&#125;&apos; ;; avgqu-sz) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $9&#125;&apos; ;; await) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $10&#125;&apos; ;; svctm) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $13&#125;&apos; ;; util) iostat -dxk 1 2|grep -w vda |tail -1 |awk &apos;&#123;print $14&#125;&apos; ;; *) echo &quot;Usage:$0(rrqm|wrqm|rps|wps|rKBps|wKBps|avgqu-sz|avgrq-sz|await|svctm|util)&quot; ;;esac 配置完成，重启zabbix_agent：systemctl restart zabbix-agent 验证：使用zabbix_get来验证：12[root@localhost script]# zabbix_get -s 192.168.0.110 -k disk.status[util]3.77 util%当前是3.77%，表明zabbix_agent监控配置成功。 zabbix web配置在zabbix web界面，配置-&gt; 模板，创建模板，Disk IO在创建的模板中，选择监控项，点击创建监控项，以await为例：12345名称：await IO等待时间类型：zabbix客户端键值：disk.status[await]信息类型：浮点数应用集：Disk IO(自建) 保存即可 Grafana展示zabbix自己的监控图，说实话，有点别扭，可以截止grafana做展示。配置datasource：1234Name: Zabbix testType：ZabbixURL： http://IP/zabbix/api_jsonrpc.php(IP为zabbix server机器的IP)Access：Browser 配置Zabbix API details 用户名/密码。是否使用直连数据库的数据，有配置zabbix的数据量的话可以选，不然不选也行；是否启用告警，选启用好了。 监控的dashboard，创建很简单，也可以直接找做好的导入即可。 其实挺简单，dashboard设置里面：General，就你dashboard的名字，描述，tag简单的信息；Variables，配置变量，这样既不用写死一个host了：$group123456Name:groupType:QueryData source: zabbix testRefresh On Dashboard LoadQuery:*Multi-value和include all option勾上 一个变量就结束了第二个变量$host:123456Name:hostType:QueryData source: zabbix testRefresh On Dashboard LoadQuery:$group.*Multi-value和include all option勾上 保存，这样dashboard的设置就完成了。 绘图进入dashboard，点击Add graph新增图形选择Graph，主要就是设置Metrics：123456Data source:zabbix testQuery Mode:MetricsGroup: $groupHost: $hostApplication: Disk ioitem: 选择想展示项即可 完~]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>zabbix3.4</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux磁盘IO监控工具-iostat]]></title>
    <url>%2F2018%2F12%2F21%2FLinux%E7%A3%81%E7%9B%98IO%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-iostat%2F</url>
    <content type="text"><![CDATA[Linux磁盘IO监控工具-iostat 因为使用zabbix监控linux磁盘IO的需求，又折腾了会iostat 安装iostat安装，直接用yum install iostat这是肯定会报错的，包不存在；iostat是包含在sysstat工具包中的一个工具，使用安装也就是：1yum install sysstat 简介直接iostat输出：123456789101112[root@localhost yum.repos.d]# iostatLinux 3.10.0-862.11.6.el7.x86_64 (localhost.localdomain) 12/21/2018 _x86_64_ (4 CPU)avg-cpu: %user %nice %system %iowait %steal %idle 0.20 0.00 0.19 0.40 0.00 99.20Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtnsda 6.00 0.56 118.51 1200547 254018670scd0 0.00 0.00 0.00 1028 0dm-0 6.00 0.38 118.46 822151 253921784dm-1 0.00 0.00 0.00 2228 0dm-2 0.01 0.16 0.04 348695 9471 可以看见系统的基本信息，hostname，CPU数目，系统位数，以及：一些CPU的信息：123456789%user：用户程序占用CPU时间百分比%system：系统进程占CPU时间百分比%nice：切换优先级的进程占CPU时间百分比%iowait：CPU等待输入输出完成时间的百分比%steal：管理程序(hypervisor)为另一个虚拟进程提供服务而等待虚拟CPU的百分比 说实话，我是不太理解%steal…有个解释：Steal time is the percentage of time a virtual CPU waits for a real CPU while the hypervisor is servicing another virtual processor，差不多意思是你的虚拟机（VM）会与虚拟环境的宿主机上的多个虚拟机实例共享物理资源。其中之一共享的就是CPU时间切片。如果你的VM的物理机虚拟比是1/4， 那么它的CPU使用率不会限制于25%的CPU时间切片－它能够使用超过它设置的虚拟比。 通常我们会关注的部分：%iowait的值过高，表示硬盘存在I/O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU 磁盘属性：123456789tps: 该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。“一次传输”意思是“一次I/O请求”。多个逻辑请求可能会被合并为“一次I/O请求”kB_read/s：每秒从设备（drive expressed）读取的数据量kB_wrtn/s：每秒向设备（drive expressed）写入的数据量kB_read：读取的总数据量kB_wrtn：写入的总数量数据量 iostat语法1234567[root@localhost yum.repos.d]# iostat --helpUsage: iostat [ options ] [ &lt;interval&gt; [ &lt;count&gt; ] ]Options are:[ -c ] [ -d ] [ -h ] [ -k | -m ] [ -N ] [ -t ] [ -V ] [ -x ] [ -y ] [ -z ][ -j &#123; ID | LABEL | PATH | UUID | ... &#125; ][ [ -T ] -g &lt;group_name&gt; ] [ -p [ &lt;device&gt; [,...] | ALL ] ][ &lt;device&gt; [...] | ALL ] 123456-c 只显示CPU利用率-d 只显示磁盘利用率-p 可以报告出每块磁盘的每个分区的使用情况-k 以 KB/秒 为单位显示磁盘利用率报告-x 显示详细信息-n 显示NFS（network filesystem）报告 常用操作123456789[root@localhost yum.repos.d]# iostat -d -k -x 2Linux 3.10.0-862.11.6.el7.x86_64 (localhost.localdomain) 12/21/2018 _x86_64_ (4 CPU)Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %utilsda 0.00 0.01 0.02 5.98 0.56 118.53 39.70 0.12 20.63 5.10 20.69 6.29 3.77scd0 0.00 0.00 0.00 0.00 0.00 0.00 114.22 0.00 37.06 37.06 0.00 36.56 0.00dm-0 0.00 0.00 0.01 5.99 0.38 118.48 39.59 0.12 20.72 6.26 20.76 6.28 3.77dm-1 0.00 0.00 0.00 0.00 0.00 0.00 47.40 0.00 8.22 8.22 0.00 7.71 0.00dm-2 0.00 0.00 0.01 0.00 0.16 0.04 50.37 0.00 55.11 3.29 178.62 2.30 0.00 参数含义：12345678910111213rrqm/s： 每秒进行 merge 的读操作数目.即 delta(rmerge)/swrqm/s： 每秒进行 merge 的写操作数目.即 delta(wmerge)/sr/s： 每秒完成的读 I/O 设备次数.即 delta(rio)/sw/s： 每秒完成的写 I/O 设备次数.即 delta(wio)/srsec/s： 每秒读扇区数.即 delta(rsect)/swsec/s： 每秒写扇区数.即 delta(wsect)/srkB/s： 每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节.(需要计算)wkB/s： 每秒写K字节数.是 wsect/s 的一半.(需要计算)avgrq-sz：平均每次设备I/O操作的数据大小 (扇区).delta(rsect+wsect)/delta(rio+wio)avgqu-sz：平均I/O队列长度.即 delta(aveq)/s/1000 (因为aveq的单位为毫秒).await： 平均每次设备I/O操作的等待时间 (毫秒).即 delta(ruse+wuse)/delta(rio+wio)svctm： 平均每次设备I/O操作的服务时间 (毫秒).即 delta(use)/delta(rio+wio)%util： 在 I/O 请求发送到设备期间，占用 CPU 时间的百分比。用于体现设备的带宽利用率。 当%util接近100%时，设备宽带已满 参考blogiostat 监视I/O子系统 Linux磁盘I/O性能监控之iostat详解]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>iostat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loadrunner压测exchange邮箱]]></title>
    <url>%2F2018%2F12%2F14%2Floadrunner%E5%8E%8B%E6%B5%8Bexchange%E9%82%AE%E7%AE%B1%2F</url>
    <content type="text"><![CDATA[loadrunner压测exchange邮箱服务 神需求，折腾半天 前言boss有个需求，公司自建邮箱，用的是exchange 2016，为了评估当前硬件配置是否足以支撑500+人的收发，需要做性能测试；刚开始接到这个需求时候，觉得不是很难，网上一堆邮箱压测的例子，jmeter有SMTP Sampler、Mail reader Sampler支持smtp，pop3邮箱各种情况，附件都是随便加；就是用loadrunner写脚本也不复杂。 万万没想到，需求是邮箱服务使用exchange不开pop3和imap，smtp也没有、、、 OWA没办法，jmeter基本是废了，只能用loadrunner了，刚开始想的是loadrunner通过录制outlook客户端来完成脚本，然后，华丽的失败了，压根行不通，outlook直接崩了。。。想到第二种方法，直接用exchange的owa，也就是邮箱的web端录、写脚本。 这个，最后是实现了，需要说一下的是，OWA是真的坑啊，每个请求，回放时候基本都需要从上一个请求关联cookie，再手动加进去，加了三十个，简直要疯了，以下为最终LR脚本：ction()&#123; web_set_sockets_option(&quot;SSL_VERSION&quot;, &quot;2&amp;3&quot;); /*Possible OAUTH authorization was detected. It is recommended to correlate the authorization parameters.*/ /*添加请求头*/ web_add_auto_header(&quot;DNT&quot;, &quot;1&quot;); web_url(&quot;owa&quot;, &quot;URL=https://email.emailtest.cn/owa&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=&quot;, &quot;Snapshot=t1.inf&quot;, &quot;Mode=HTML&quot;, LAST); web_url(&quot;logon.aspx&quot;, &quot;URL=https://email.emailtest.cn/owa/auth/logon.aspx?replaceCurrent=1&amp;url=https%3a%2f%2femail.emailtest.cn%2fowa&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=&quot;, &quot;Snapshot=t2.inf&quot;, &quot;Mode=HTML&quot;, EXTRARES, &quot;Url=15.1.1531/themes/resources/segoeui-regular.eot&quot;, &quot;Referer=https://email.emailtest.cn/owa/auth/logon.aspx?replaceCurrent=1&amp;url=https%3a%2f%2femail.emailtest.cn%2fowa&quot;, ENDITEM, &quot;Url=15.1.1531/themes/resources/segoeui-semilight.eot&quot;, &quot;Referer=https://email.emailtest.cn/owa/auth/logon.aspx?replaceCurrent=1&amp;url=https%3a%2f%2femail.emailtest.cn%2fowa&quot;, ENDITEM, LAST); lr_start_transaction(&quot;login&quot;); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_1&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); web_submit_form(&quot;auth.owa&quot;, &quot;Snapshot=t3.inf&quot;, ITEMDATA, &quot;Name=username&quot;, &quot;Value=test4@emailtest.cn&quot;, ENDITEM, &quot;Name=password&quot;, &quot;Value=Test@123&quot;, ENDITEM, &quot;Name=passwordText&quot;, &quot;Value=&quot;, ENDITEM, LAST); web_custom_request(&quot;sessiondata.ashx&quot;, &quot;URL=https://email.emailtest.cn/owa/sessiondata.ashx?appcacheclient=0&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/x-javascript&quot;, &quot;Referer=&quot;, &quot;Snapshot=t5.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/boot.worldwide.mouse.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/boot.owaframe.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/images/0/sprite1.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/globalize/globalize.culture.zh-cn.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=ping.owa?UA=0&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_1&#125;&quot;); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_2&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); web_custom_request(&quot;ev.owa2&quot;, &quot;URL=https://email.emailtest.cn/owa/ev.owa2?ns=PendingRequest&amp;ev=FinishNotificationRequest&amp;UA=0&amp;Fn=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t6.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=text/plain;charset=UTF-8&quot;, LAST); /*增加head*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_2&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetFavorites&quot;); web_reg_save_param(&quot;X-OWA-CANARY_3&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); web_custom_request(&quot;service.svc&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetFavorites&amp;EP=1&amp;ID=-1&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t7.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_3&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetFolderMruConfiguration&quot;); web_custom_request(&quot;service.svc_2&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetFolderMruConfiguration&amp;EP=1&amp;ID=-2&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t8.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_4&quot;, &quot;LB=X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_3&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetOtherMailboxConfiguration&quot;); web_custom_request(&quot;service.svc_3&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetOtherMailboxConfiguration&amp;EP=1&amp;ID=-3&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t9.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/resources/themes/base/images/0/headerbgmaing2.gif&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/themes/base/images/0/headerbgmaing2.png&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_custom_request(&quot;plt1.ashx&quot;, &quot;URL=https://email.emailtest.cn/owa/plt1.ashx?cId=C696115C3ECB481BADFEEBB71DC3DA12&amp;msg=success;200&amp;caTy=0&amp;tg=&amp;MDB=86f42157-91d9-4366-ac62-de53d1dee6e1&amp;nId=0000000000000000&amp;MBX=0df790ce-6185-4b88-af3c-41a33f8b8ce1&amp;sdCoId=C696115C3ECB481BADFEEBB71DC3DA12_1544675566286&amp;sds=200&amp;fe=EXCHANGE001&amp;be=EXCHANGE001&amp;cbe=exchange001.emailtest.cn&amp;dag=DAG&amp;cver=15.1.1531.3&amp;sdver=15.1.1531.3&amp;rpo=0&amp;off=0&amp;pal=0&amp;rfe=0&amp;te=0&amp;PLT=uES,506,uEE,506,reds,23,redE,157,fS,157,dLS,0,dLE,0,cS,0,cE,0,reqS,2,resS,50,resE,345,domL,50&quot; &quot;,domCLES,1668,domCLEE,1668,domC,1675,lES,1676,lEE,1676,sdR,1482,pEab,1453,pE,1662,rSt,1707,now,2637,nowNoTim,2248,rStNoTim,1318&amp;nowTS=1544675568534&amp;navtp=0&amp;rdct=2&amp;tcd=339&amp;lbv=undefined&amp;icv=undefined&amp;iacr=undefined&amp;lcver=undefined&amp;accu=undefined&amp;acth=undefined&amp;acdc=undefined&amp;lhn=undefined&amp;chn=email.emailtest.cn&amp;acs=1&amp;mf=nf&amp;fc=undefined&quot;, &quot;Method=POST&quot;, &quot;Resource=1&quot;, &quot;RecContentType=image/gif&quot;, &quot;Referer=&quot;, &quot;Snapshot=t10.inf&quot;, &quot;EncType=text/plain;charset=UTF-8&quot;, &quot;Body=&amp;bt=BootStrap.1,tim=st,-1544675564025,end,-1544675563980&amp;bt=OwaStart.2,tim=st,-1544675563964&amp;bt=ProcessUserConfig.6,tim=st,-1544675563924&amp;bt=MMVMInit.7,tim=st,-1544675563879,end,-1544675563723&amp;bt=MLVMInit.20,tim=st,-1544675563766,end,-1544675563739&amp;bt=FoldersInit.43,tim=st,-1544675563739,end,-1544675563726&amp;bt=VMFactory.48,tim=st,-1544675563679,end,-1544675563096&amp;bt=OWAShellActF.51,tim=st,-1544675563679,end,-1544675563651&amp;bt=OWAShellAct.53,tim=st,-1544675563650,end,-1544675563096&amp;bt=PMVActF.55&quot; &quot;,tim=st,-1544675563644,end,-1544675563553&amp;bt=PMVAct.56,tim=st,-1544675563553,end,-1544675563100&amp;bt=MMVActF.58,tim=st,-1544675563536,end,-1544675563448&amp;bt=MMVAct.59,tim=st,-1544675563448,end,-1544675563109&amp;bt=MLVActF.61,tim=st,-1544675563322,end,-1544675563290&amp;bt=MLVAct.62,tim=st,-1544675563290,end,-1544675563257&amp;Res=boot.owaframe.0.mouse.js,tim=st,504,fS,3,dLS,0,dLE,0,cS,0,cE,0,reqS,0,resS,87,resE,535,pE,994&amp;Res=boot.owaframe.1.mouse.js,tim=st,506,fS,34,dLS,0,dLE,0,cS,0,cE,0,reqS,0,resS,81,resE,&quot; &quot;501,pE,1311&amp;Res=boot.owaframe.2.mouse.js,tim=st,529,fS,12,dLS,8,dLE,8,cS,8,cE,514,reqS,514,resS,632,resE,874,pE,1366&amp;Res=boot.owaframe.3.mouse.js,tim=st,537,fS,4,dLS,0,dLE,0,cS,0,cE,385,reqS,385,resS,454,resE,840,pE,1453&amp;Res=sprite1.mouse.png,tim=st,539,fS,2,dLS,0,dLE,0,cS,0,cE,498,reqS,498,resS,582,resE,621&amp;Res=sessiondata.ashx,tim=st,550,fS,145,dLS,0,dLE,0,cS,0,cE,930,reqS,930,resS,930,resE,935&amp;Res=office365icons.eot,tim=st,736,fS,5,dLS,0,dLE,0,cS,0,cE,0,reqS,287,resS,343,resE,634&amp;Res=&quot; &quot;boot.worldwide.mouse.strings.localized.min.js,tim=st,1617,fS,2,dLS,0,dLE,0,cS,0,cE,0,reqS,0,resS,56,resE,81,pE,1613&amp;Res=sprite1.mouse.css,tim=st,1620,fS,3,dLS,0,dLE,0,cS,0,cE,0,reqS,0,resS,53,resE,58&amp;Res=boot.owaframe.mouse.css,tim=st,1623,fS,2,dLS,0,dLE,0,cS,0,cE,0,reqS,0,resS,50,resE,107&amp;Res=globalize.culture.zh-cn.js,tim=st,1772,fS,2,dLS,0,dLE,0,cS,0,cE,0,reqS,0,resS,36,resE,38,pE,1658&amp;refUrl=https%3A%2F%2Femail.emailtest.cn%2Fowa%2F&quot;, LAST); /*增加消息头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_4&#125;&quot;); web_custom_request(&quot;ev.owa2_2&quot;, &quot;URL=https://email.emailtest.cn/owa/ev.owa2?ns=PendingRequest&amp;ev=FinishNotificationRequest&amp;UA=0&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t11.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=text/plain;charset=UTF-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_5&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_4&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_custom_request(&quot;service.svc_4&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;UA=0&amp;ID=-4&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t12.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, &quot;Body=&#123;\&quot;request\&quot;:&#123;\&quot;__type\&quot;:\&quot;NotificationSubscribeJsonRequest:#Exchange\&quot;,\&quot;Header\&quot;:&#123;\&quot;__type\&quot;:\&quot;JsonRequestHeaders:#Exchange\&quot;,\&quot;RequestServerVersion\&quot;:\&quot;Exchange2013\&quot;,\&quot;TimeZoneContext\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneContext:#Exchange\&quot;,\&quot;TimeZoneDefinition\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneDefinitionType:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;China Standard Time\&quot;&#125;&#125;&#125;&#125;,\&quot;subscriptionData\&quot;:[&#123;\&quot;__type\&quot;:\&quot;SubscriptionData:#Exchange\&quot;,\&quot;SubscriptionId\&quot;:\&quot;HierarchyNotification\&quot;,\&quot;Parameters\&quot;:&#123;\&quot;__type\&quot;:\&quot;&quot; &quot;SubscriptionParameters:#Exchange\&quot;,\&quot;NotificationType\&quot;:\&quot;HierarchyNotification\&quot;,\&quot;subscriptionIdSuffix\&quot;:\&quot;\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SubscriptionData:#Exchange\&quot;,\&quot;SubscriptionId\&quot;:\&quot;RowNotificationAAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v/jzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEMAAA=_true_ConversationLastDeliveryOrRenewTime_Descending_ConversationLastDeliveryTime_Descending_All_renew\&quot;,\&quot;Parameters\&quot;:&#123;\&quot;__type\&quot;:\&quot;SubscriptionParameters:#Exchange\&quot;,\&quot;NotificationType\&quot;&quot; &quot;:\&quot;RowNotification\&quot;,\&quot;FolderId\&quot;:\&quot;AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v/jzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEMAAA=\&quot;,\&quot;IsConversation\&quot;:true,\&quot;SortBy\&quot;:[&#123;\&quot;__type\&quot;:\&quot;SortResults:#Exchange\&quot;,\&quot;Order\&quot;:\&quot;Descending\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;ConversationLastDeliveryOrRenewTime\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SortResults:#Exchange\&quot;,\&quot;Order\&quot;:\&quot;Descending\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;&quot; &quot;ConversationLastDeliveryTime\&quot;&#125;&#125;],\&quot;Filter\&quot;:\&quot;All\&quot;,\&quot;CategoryFilter\&quot;:null,\&quot;FocusedViewFilter\&quot;:-1,\&quot;ConversationShapeName\&quot;:null,\&quot;subscriptionIdSuffix\&quot;:\&quot;renew\&quot;,\&quot;GroupBy\&quot;:null,\&quot;ChannelId\&quot;:null&#125;&#125;]&#125;&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/jquery.owa.bundle.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.boot.deferred.jquery.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.boot.deferred.webservices.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.boot.deferred.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.controls.extended.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.coredeferredstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.nonboot.webservices.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.owa.boot.deferredstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); lr_end_transaction(&quot;login&quot;,LR_AUTO); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_6&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_5&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22ValidateAggregatedConfigurationRequest%3A%23Exchange%22%7D&quot;); web_add_header(&quot;Action&quot;, &quot;ValidateAggregatedConfiguration&quot;); web_custom_request(&quot;service.svc_5&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=ValidateAggregatedConfiguration&amp;EP=1&amp;ID=-5&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t13.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.controls.extended.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.boot.deferred.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.boot.deferred.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_url(&quot;appCacheManifestHandler.ashx&quot;, &quot;URL=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=&quot;, &quot;Snapshot=t14.inf&quot;, &quot;Mode=HTML&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_7&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_5&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetUserVoiceData&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%7D&quot;); web_custom_request(&quot;service.svc_6&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetUserVoiceData&amp;EP=1&amp;ID=-6&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t15.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=manifests/appCacheManifestHandler.ashx?owamanifest=1&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.pcstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_8&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_7&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22request%22%3A%7B%22__type%22%3A%22NotificationSubscribeJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%7D%2C%22subscriptionData%22%3A%5B%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22OwaVersionChangeNotification%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22OwaVersionChangeNotification%22%2C%22subscriptionIdSuffix%22%3A%22%22%7D%7D%5D%7D&quot;); web_custom_request(&quot;service.svc_7&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;EP=1&amp;UA=0&amp;ID=-7&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t16.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); web_url(&quot;owa_2&quot;, &quot;URL=https://email.emailtest.cn/owa&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t17.inf&quot;, &quot;Mode=HTML&quot;, EXTRARES, &quot;Url=/owa/prem/15.1.1531.3/scripts/microsoft.owa.prefetch.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=/owa/prem/15.1.1531.3/scripts/microsoft.owa.common.compose.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=/owa/prem/15.1.1531.3/scripts/microsoft.owa.people.core.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_url(&quot;owa_3&quot;, &quot;URL=https://email.emailtest.cn/owa/&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t18.inf&quot;, &quot;Mode=HTML&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_9&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_8&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetOwaNonBootUserConfiguration&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%7D&quot;); web_custom_request(&quot;service.svc_8&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetOwaNonBootUserConfiguration&amp;EP=1&amp;ID=-8&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t19.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.surface.core.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.meetingmsgstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.surface.v2.desktop.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.surface.core.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.calsurfacestrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.webservices.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/calendarsurface.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.controls.core.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.controls.v2.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.calcorestrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=1x1.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.application.textboys.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.personacontrol.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_url(&quot;owa_4&quot;, &quot;URL=https://email.emailtest.cn/owa/?layout=mouse&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t20.inf&quot;, &quot;Mode=HTML&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.livepersonacard.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.personacontrol.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_url(&quot;owa_5&quot;, &quot;URL=https://email.emailtest.cn/owa/?realm=emailtest.cn&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t21.inf&quot;, &quot;Mode=HTML&quot;, LAST); web_url(&quot;emailtest.cn&quot;, &quot;URL=https://email.emailtest.cn/owa/emailtest.cn&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t22.inf&quot;, &quot;Mode=HTML&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.mecard.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/images/0/nbsprite1.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.mail.common.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.findpeople.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_url(&quot;emailtest.cn_2&quot;, &quot;URL=https://email.emailtest.cn/owa/emailtest.cn/&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t23.inf&quot;, &quot;Mode=HTML&quot;, EXTRARES, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.controls.editorbase.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.nonbootstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.commonstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.mecard.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); web_url(&quot;appCacheManifestHandler.ashx_2&quot;, &quot;URL=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t24.inf&quot;, &quot;Mode=HTML&quot;, EXTRARES, &quot;Url=../prem/15.1.1531.3/resources/images/0/bg_gradient.png&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/calendarcolumnerroroverlay.png&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.findpeople.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.mail.common.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.controls.editorbase.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/dotsrepeater.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/favicon.ico&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.recipientwell.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.findpeople.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.recipientwell.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/folderpane_bg.png&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/inlineimageplaceholder.png&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/loading_blackbg.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.recipientwell.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/loading_whitebg.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.attachments.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/o365shellg2coreowa.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.attachments.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/zh-hans/microsoft.o365.shellg2.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/olk_logo_white_cropped.png&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/owa_brand.png&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/pulse.png&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.lightning.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.calendar.controls.v2.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/striperepeater.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/zh-hans/microsoft.owa.lightning.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/thinking16_blue.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.lightning.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/thinking16_grey.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/thinking16_white.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.triageshared.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.mail.compose.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.application.readingpane.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/thinking24.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.moderngroups.calendar.shared.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.application.readingpane.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.edgepromotion.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.options.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/thinking32_blue.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.calendar.core.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.calendar.core.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.mail.compose.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/thinking32_grey.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.triageshared.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/images/0/thinking32_white.gif&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/fonts/office365icons.eot&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/fonts/office365icons.svg&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.triageshared.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.application.readingpane.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.mail.compose.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/0/microsoft.owa.calendar.addroom.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.calarstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/resources/styles/fonts/office365icons.ttf&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.calendar.addroom.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=../prem/15.1.1531.3/scripts/microsoft.owa.core.popout.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_10&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_9&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetMailboxMessageConfiguration&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%7D&quot;); web_custom_request(&quot;service.svc_9&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetMailboxMessageConfiguration&amp;EP=1&amp;ID=-9&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t25.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_11&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_10&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetMailboxJunkEmailConfiguration&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%7D&quot;); web_custom_request(&quot;service.svc_10&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetMailboxJunkEmailConfiguration&amp;EP=1&amp;ID=-10&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t26.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.locationcommon.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.calendar.locationwell.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/fonts/office365icons.woff&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.callwstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.locationwell.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.locationwell.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-light.eot&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-light.ttf&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-light.woff&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.nonboot.controls.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.controls.emojiresources.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/images/0/thinking32_grey.gif&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/images/0/nbsprite1.mouse.png&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_12&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_11&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;FindPeople&quot;); web_custom_request(&quot;service.svc_11&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=FindPeople&amp;ID=-11&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t27.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, &quot;Body=&#123;\&quot;__type\&quot;:\&quot;FindPeopleJsonRequest:#Exchange\&quot;,\&quot;Header\&quot;:&#123;\&quot;__type\&quot;:\&quot;JsonRequestHeaders:#Exchange\&quot;,\&quot;RequestServerVersion\&quot;:\&quot;Exchange2013\&quot;,\&quot;TimeZoneContext\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneContext:#Exchange\&quot;,\&quot;TimeZoneDefinition\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneDefinitionType:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;China Standard Time\&quot;&#125;&#125;&#125;,\&quot;Body\&quot;:&#123;\&quot;__type\&quot;:\&quot;FindPeopleRequest:#Exchange\&quot;,\&quot;IndexedPageItemView\&quot;:&#123;\&quot;__type\&quot;:\&quot;IndexedPageView:#Exchange\&quot;,\&quot;BasePoint\&quot;:\&quot;Beginning\&quot;,\&quot;Offset\&quot;:0,\&quot;MaxEntriesReturned\&quot;&quot; &quot;:1000&#125;,\&quot;QueryString\&quot;:null,\&quot;AggregationRestriction\&quot;:&#123;\&quot;__type\&quot;:\&quot;RestrictionType:#Exchange\&quot;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Or:#Exchange\&quot;,\&quot;Items\&quot;:[&#123;\&quot;__type\&quot;:\&quot;Exists:#Exchange\&quot;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;PersonaEmailAddress\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;IsEqualTo:#Exchange\&quot;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;PersonaType\&quot;&#125;,\&quot;FieldURIOrConstant\&quot;:&#123;\&quot;__type\&quot;:\&quot;FieldURIOrConstantType:#Exchange\&quot;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Constant:#Exchange\&quot;,\&quot;Value&quot; &quot;\&quot;:\&quot;DistributionList\&quot;&#125;&#125;&#125;]&#125;&#125;,\&quot;ParentFolderId\&quot;:&#123;\&quot;__type\&quot;:\&quot;TargetFolderId:#Exchange\&quot;,\&quot;BaseFolderId\&quot;:&#123;\&quot;__type\&quot;:\&quot;FolderId:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v/jzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAABH4AAA=\&quot;&#125;&#125;,\&quot;PersonaShape\&quot;:&#123;\&quot;__type\&quot;:\&quot;PersonaResponseShape:#Exchange\&quot;,\&quot;BaseShape\&quot;:\&quot;Default\&quot;,\&quot;AdditionalProperties\&quot;:[&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;PersonaAlias\&quot;&#125;,&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;&quot; &quot;FieldURI\&quot;:\&quot;PersonaRelevanceScore\&quot;&#125;]&#125;,\&quot;SortOrder\&quot;:[&#123;\&quot;__type\&quot;:\&quot;SortResults:#Exchange\&quot;,\&quot;Order\&quot;:\&quot;Ascending\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;PersonaRelevanceScore\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SortResults:#Exchange\&quot;,\&quot;Order\&quot;:\&quot;Ascending\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;PersonaDisplayNameFirstLast\&quot;&#125;&#125;],\&quot;ShouldResolveOneOffEmailAddress\&quot;:false,\&quot;SearchPeopleSuggestionIndex\&quot;:false&#125;&#125;&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_13&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_12&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetComplianceConfiguration&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%7D&quot;); web_custom_request(&quot;service.svc_12&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetComplianceConfiguration&amp;EP=1&amp;ID=-12&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t28.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/fonts/segoeui-regular.eot&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/images/0/ewsprite1.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.attachments.extendedattachmentwell.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.infotips.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-regular.ttf&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.extstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-regular.woff&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.owa.core.editor.emoji.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.readingpaneshared.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.people.personcard.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_14&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_13&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;FindPeople&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22FindPeopleJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22FindPeopleRequest%3A%23Exchange%22%2C%22IndexedPageItemView%22%3A%7B%22__type%22%3A%22IndexedPageView%3A%23Exchange%22%2C%22BasePoint%22%3A%22Beginning%22%2C%22Offset%22%3A0%2C%22MaxEntriesReturned%22%3A1000%7D%2C%22QueryString%22%3Anull%2C%22ParentFolderId%22%3A%7B%22__type%22%3A%22TargetFolderId%3A%23Exchange%22%2C%22BaseFolderId%22%3A%7B%22__type%22%3A%22FolderId%3A%23Exchange%22%2C%22Id%22%3A%22AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEkAAA%3D%22%7D%7D%2C%22PersonaShape%22%3A%7B%22__type%22%3A%22PersonaResponseShape%3A%23Exchange%22%2C%22BaseShape%22%3A%22Default%22%2C%22AdditionalProperties%22%3A%5B%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22PersonaAlias%22%7D%2C%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22PersonaRelevanceScore%22%7D%5D%7D%2C%22SortOrder%22%3A%5B%7B%22__type%22%3A%22SortResults%3A%23Exchange%22%2C%22Order%22%3A%22Ascending%22%2C%22Path%22%3A%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22PersonaRelevanceScore%22%7D%7D%2C%7B%22__type%22%3A%22SortResults%3A%23Exchange%22%2C%22Order%22%3A%22Ascending%22%2C%22Path%22%3A%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22PersonaDisplayNameFirstLast%22%7D%7D%5D%2C%22ShouldResolveOneOffEmailAddress%22%3Afalse%2C%22SearchPeopleSuggestionIndex%22%3Afalse%7D%7D&quot;); web_custom_request(&quot;service.svc_13&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=FindPeople&amp;EP=1&amp;ID=-13&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t29.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/fonts/segoeui-semibold.eot&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-semibold.ttf&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.linkpreview.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.infotips.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/suiteextensions.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.readingpaneshared.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.nonboot.controls.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-semibold.woff&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.moderngroups.search.shared.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.personcardstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/suiteextensionscontrols.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.controls.emojiresources.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.people.personcard.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.attachments.extendedattachmentwell.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-semilight.eot&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/owa.clientnext.common.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.calendar.meetingforms.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.instantsearch.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.calmfstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.instantsearch.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-semilight.ttf&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/owa.clientnext.application.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.meetingforms.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.attachments.extendedattachmentwell.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.instantsearch.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.personacardfacade.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/fonts/segoeui-semilight.woff&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, LAST); web_url(&quot;projection.aspx&quot;, &quot;URL=https://email.emailtest.cn/owa/projection.aspx&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, &quot;Snapshot=t30.inf&quot;, &quot;Mode=HTML&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.search.suggestions.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.search.suggestions.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=manifests/appCacheManifestHandler.ashx?owamanifest=1&quot;, &quot;Referer=https://email.emailtest.cn/owa/manifests/appCacheManifestHandler.ashx?manifest=0&amp;layout=mouse&amp;UA=0&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.nav.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.navigation.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/o365shellg2plusowa.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.o365.shellg2.settingstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.clientnext.framework.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.models.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/locale/zh-hans/owa-calendar-strings.json&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/locale/zh-hans/owa-groups-strings.json&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.extensibilitynext.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/adal.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/msrcrypto-aes.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/owa.clientnext.extensibility.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/msrcrypto-aes-fix.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.o365.suiteserviceproxycommon.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/locale/zh-hans/owa-extensibility-strings.json&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.o365.suiteserviceproxy.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/osfruntime.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.suiteapinotifications.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.o365.suiteapi.owa.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.extensibilitynext.js&quot;, &quot;Referer=&quot;, ENDITEM, // &quot;Url=service.svc/s/GetPersonaPhoto?email=test3%40emailtest.cn&amp;personId=AAQkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAQANSG92XBk%2F5Kh1qWIYKw8%2Bw%3D&amp;UA=0&amp;adObjectId=65f786d4-93c1-4afe-875a-962182b0f3ec&amp;size=HR96x96&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.o365.suiteapiskypeintegration.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.extensibility.common.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.o365.shellg2.owa.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.o365.shellg2.owa.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.shellplusg2.o365.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.extendedmaillistview.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_15&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_14&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetExtensibilityContext&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22request%22%3A%7B%22__type%22%3A%22GetExtensibilityContextParameters%3A%23Exchange%22%2C%22FormFactor%22%3A3%2C%22ClientLanguage%22%3A%22zh-CN%22%2C%22IncludeDisabledExtensions%22%3Afalse%2C%22ApiVersionSupported%22%3A%221.5%22%2C%22ClientOverrideVersion%22%3A%221.1%22%7D%7D&quot;); web_custom_request(&quot;service.svc_14&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetExtensibilityContext&amp;EP=1&amp;ID=-14&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t31.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/meidp.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.extendedmaillistview.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/cardmetadata.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.extendedmaillistview.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.im.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_16&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_15&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetReminders&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22GetRemindersJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22GetRemindersRequest%3A%23Exchange%22%2C%22EndTime%22%3A%222018-12-23T12%3A32%3A56%22%2C%22MaxItems%22%3A0%7D%7D&quot;); web_custom_request(&quot;service.svc_15&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetReminders&amp;EP=1&amp;ID=-15&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t32.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.lyncintegration.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_17&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_16&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetDaysUntilPasswordExpiration&quot;); web_custom_request(&quot;service.svc_16&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetDaysUntilPasswordExpiration&amp;ID=-16&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t33.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, &quot;Body=&#123;&#125;&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.im.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.immanager.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=service.svc/s/GetPersonaPhoto?email=test4%40emailtest.cn&amp;UA=0&amp;size=HR96x96&amp;sc=1544675576580&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_18&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_17&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22request%22%3A%7B%22__type%22%3A%22NotificationSubscribeJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%7D%2C%22subscriptionData%22%3A%5B%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22ReminderNotification%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22ReminderNotification%22%2C%22subscriptionIdSuffix%22%3A%22%22%7D%7D%2C%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22NewMailNotification%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22NewMailNotification%22%2C%22subscriptionIdSuffix%22%3A%22%22%7D%7D%2C%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22SuiteNotification%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22SuiteNotification%22%2C%22subscriptionIdSuffix%22%3A%22%22%7D%7D%5D%7D&quot;); web_custom_request(&quot;service.svc_17&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;EP=1&amp;UA=0&amp;ID=-17&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t34.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_19&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_18&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetAllowedOptions&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22GetAllowedOptionsRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%7D&quot;); web_custom_request(&quot;service.svc_18&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetAllowedOptions&amp;EP=1&amp;ID=-18&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t35.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_20&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_19&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetCalendarView&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22GetCalendarViewJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22GetCalendarViewRequest%3A%23Exchange%22%2C%22CalendarId%22%3A%7B%22__type%22%3A%22TargetFolderId%3A%23Exchange%22%2C%22BaseFolderId%22%3A%7B%22__type%22%3A%22FolderId%3A%23Exchange%22%2C%22Id%22%3A%22AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAENAAA%3D%22%2C%22ChangeKey%22%3A%22AgAAAA%3D%3D%22%7D%7D%2C%22RangeStart%22%3A%222018-11-26T00%3A00%3A00.001%22%2C%22RangeEnd%22%3A%222019-01-07T00%3A00%3A00.000%22%7D%7D&quot;); web_custom_request(&quot;service.svc_19&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetCalendarView&amp;EP=1&amp;ID=-19&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t36.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_21&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_20&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetCalendarFolders&quot;); web_custom_request(&quot;service.svc_20&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetCalendarFolders&amp;EP=1&amp;ID=-20&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t37.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST);/*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_22&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_21&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22request%22%3A%7B%22__type%22%3A%22NotificationSubscribeJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%7D%2C%22subscriptionData%22%3A%5B%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22CalendarItemNotificationAAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAENAAA%3D%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22CalendarItemNotification%22%2C%22FolderId%22%3A%22AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAENAAA%3D%22%2C%22subscriptionIdSuffix%22%3A%22%22%7D%7D%5D%7D&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_custom_request(&quot;service.svc_21&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;EP=1&amp;UA=0&amp;ID=-21&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t38.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_23&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_22&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22FindItemJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2016%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22FindItemRequest%3A%23Exchange%22%2C%22ItemShape%22%3A%7B%22__type%22%3A%22ItemResponseShape%3A%23Exchange%22%2C%22BaseShape%22%3A%22IdOnly%22%7D%2C%22ParentFolderIds%22%3A%5B%7B%22__type%22%3A%22DistinguishedFolderId%3A%23Exchange%22%2C%22Id%22%3A%22deleteditems%22%7D%5D%2C%22Traversal%22%3A%22Shallow%22%2C%22Paging%22%3A%7B%22__type%22%3A%22IndexedPageView%3A%23Exchange%22%2C%22BasePoint%22%3A%22Beginning%22%2C%22Offset%22%3A0%2C%22MaxEntriesReturned%22%3A25%7D%2C%22ViewFilter%22%3A%22All%22%2C%22IsWarmUpSearch%22%3Afalse%2C%22FocusedViewFilter%22%3A-1%2C%22Grouping%22%3Anull%2C%22ShapeName%22%3A%22MailListItem%22%2C%22SortOrder%22%3A%5B%7B%22__type%22%3A%22SortResults%3A%23Exchange%22%2C%22Order%22%3A%22Descending%22%2C%22Path%22%3A%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22DateTimeReceived%22%7D%7D%5D%7D%7D&quot;); web_add_header(&quot;Action&quot;, &quot;FindItem&quot;); web_custom_request(&quot;service.svc_22&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=FindItem&amp;EP=1&amp;ID=-22&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t39.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_24&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_23&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22FindItemJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2016%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22FindItemRequest%3A%23Exchange%22%2C%22ItemShape%22%3A%7B%22__type%22%3A%22ItemResponseShape%3A%23Exchange%22%2C%22BaseShape%22%3A%22IdOnly%22%7D%2C%22ParentFolderIds%22%3A%5B%7B%22__type%22%3A%22DistinguishedFolderId%3A%23Exchange%22%2C%22Id%22%3A%22drafts%22%7D%5D%2C%22Traversal%22%3A%22Shallow%22%2C%22Paging%22%3A%7B%22__type%22%3A%22IndexedPageView%3A%23Exchange%22%2C%22BasePoint%22%3A%22Beginning%22%2C%22Offset%22%3A0%2C%22MaxEntriesReturned%22%3A25%7D%2C%22ViewFilter%22%3A%22All%22%2C%22IsWarmUpSearch%22%3Afalse%2C%22FocusedViewFilter%22%3A-1%2C%22Grouping%22%3Anull%2C%22ShapeName%22%3A%22MailListItem%22%2C%22SortOrder%22%3A%5B%7B%22__type%22%3A%22SortResults%3A%23Exchange%22%2C%22Order%22%3A%22Descending%22%2C%22Path%22%3A%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22DateTimeCreated%22%7D%7D%5D%7D%7D&quot;); web_add_header(&quot;Action&quot;, &quot;FindItem&quot;); web_custom_request(&quot;service.svc_23&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=FindItem&amp;EP=1&amp;ID=-23&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t40.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST);// web_url(&quot;ev.owa2_3&quot;, // &quot;URL=https://email.emailtest.cn/owa/ev.owa2?ns=PendingRequest&amp;ev=PendingNotificationRequest&amp;UA=0&amp;cid=234c1b94-bba1-4bde-a1d5-8752f83d7308&amp;ecnsq=1&amp;X-OWA-CANARY=Luc7D0HRhkGsUCsuUrQc73Dpsw-0YNYI-bN4sOFPtzkQoWYsmsQdVMyJSEX-XlmtFRT3CGTjYEI.&quot;, // &quot;Resource=0&quot;, // &quot;RecContentType=text/html&quot;, // &quot;Referer=&quot;, // &quot;Snapshot=t41.inf&quot;, // &quot;Mode=HTML&quot;, // LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_25&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_24&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_custom_request(&quot;service.svc_24&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;UA=0&amp;ID=-24&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t42.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, &quot;Body=&#123;\&quot;request\&quot;:&#123;\&quot;__type\&quot;:\&quot;NotificationSubscribeJsonRequest:#Exchange\&quot;,\&quot;Header\&quot;:&#123;\&quot;__type\&quot;:\&quot;JsonRequestHeaders:#Exchange\&quot;,\&quot;RequestServerVersion\&quot;:\&quot;Exchange2013\&quot;,\&quot;TimeZoneContext\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneContext:#Exchange\&quot;,\&quot;TimeZoneDefinition\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneDefinitionType:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;China Standard Time\&quot;&#125;&#125;&#125;&#125;,\&quot;subscriptionData\&quot;:[&#123;\&quot;__type\&quot;:\&quot;SubscriptionData:#Exchange\&quot;,\&quot;SubscriptionId\&quot;:\&quot;&quot; &quot;RowNotificationAAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v/jzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEKAAA=_false_DateTimeReceived_Descending_All\&quot;,\&quot;Parameters\&quot;:&#123;\&quot;__type\&quot;:\&quot;SubscriptionParameters:#Exchange\&quot;,\&quot;NotificationType\&quot;:\&quot;RowNotification\&quot;,\&quot;FolderId\&quot;:\&quot;AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v/jzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEKAAA=\&quot;,\&quot;IsConversation\&quot;:false,\&quot;SortBy\&quot;:[&#123;\&quot;__type\&quot;:\&quot;SortResults:#Exchange\&quot;,\&quot;Order&quot; &quot;\&quot;:\&quot;Descending\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;DateTimeReceived\&quot;&#125;&#125;],\&quot;Filter\&quot;:\&quot;All\&quot;,\&quot;CategoryFilter\&quot;:null,\&quot;FocusedViewFilter\&quot;:-1,\&quot;ConversationShapeName\&quot;:null,\&quot;subscriptionIdSuffix\&quot;:null,\&quot;GroupBy\&quot;:null,\&quot;ChannelId\&quot;:\&quot;234c1b94-bba1-4bde-a1d5-8752f83d7308\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SubscriptionData:#Exchange\&quot;,\&quot;SubscriptionId\&quot;:\&quot;RowNotificationAAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v/&quot; &quot;jzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEPAAA=_false_DateTimeCreated_Descending_All\&quot;,\&quot;Parameters\&quot;:&#123;\&quot;__type\&quot;:\&quot;SubscriptionParameters:#Exchange\&quot;,\&quot;NotificationType\&quot;:\&quot;RowNotification\&quot;,\&quot;FolderId\&quot;:\&quot;AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v/jzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEPAAA=\&quot;,\&quot;IsConversation\&quot;:false,\&quot;SortBy\&quot;:[&#123;\&quot;__type\&quot;:\&quot;SortResults:#Exchange\&quot;,\&quot;Order\&quot;:\&quot;Descending\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;&quot; &quot;DateTimeCreated\&quot;&#125;&#125;],\&quot;Filter\&quot;:\&quot;All\&quot;,\&quot;CategoryFilter\&quot;:null,\&quot;FocusedViewFilter\&quot;:-1,\&quot;ConversationShapeName\&quot;:null,\&quot;subscriptionIdSuffix\&quot;:null,\&quot;GroupBy\&quot;:null,\&quot;ChannelId\&quot;:\&quot;234c1b94-bba1-4bde-a1d5-8752f83d7308\&quot;&#125;&#125;]&#125;&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_26&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_25&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22FindConversationJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22V2016_02_03%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22FindConversationRequest%3A%23Exchange%22%2C%22ParentFolderId%22%3A%7B%22__type%22%3A%22TargetFolderId%3A%23Exchange%22%2C%22BaseFolderId%22%3A%7B%22__type%22%3A%22DistinguishedFolderId%3A%23Exchange%22%2C%22Id%22%3A%22sentitems%22%7D%7D%2C%22ConversationShape%22%3A%7B%22__type%22%3A%22ConversationResponseShape%3A%23Exchange%22%2C%22BaseShape%22%3A%22IdOnly%22%7D%2C%22ShapeName%22%3A%22ConversationSentItemsListView%22%2C%22Paging%22%3A%7B%22__type%22%3A%22IndexedPageView%3A%23Exchange%22%2C%22BasePoint%22%3A%22Beginning%22%2C%22Offset%22%3A0%2C%22MaxEntriesReturned%22%3A25%7D%2C%22ViewFilter%22%3A%22All%22%2C%22FocusedViewFilter%22%3A-1%2C%22SortOrder%22%3A%5B%7B%22__type%22%3A%22SortResults%3A%23Exchange%22%2C%22Order%22%3A%22Descending%22%2C%22Path%22%3A%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22ConversationLastDeliveryTime%22%7D%7D%5D%7D%7D&quot;); web_add_header(&quot;Action&quot;, &quot;FindConversation&quot;); web_custom_request(&quot;service.svc_25&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=FindConversation&amp;EP=1&amp;ID=-25&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t43.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_27&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_26&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22request%22%3A%7B%22__type%22%3A%22NotificationSubscribeJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%7D%2C%22subscriptionData%22%3A%5B%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22RowNotificationAAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEJAAA%3D_true_ConversationLastDeliveryTime_Descending_All%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22RowNotification%22%2C%22FolderId%22%3A%22AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEJAAA%3D%22%2C%22IsConversation%22%3Atrue%2C%22SortBy%22%3A%5B%7B%22__type%22%3A%22SortResults%3A%23Exchange%22%2C%22Order%22%3A%22Descending%22%2C%22Path%22%3A%7B%22__type%22%3A%22PropertyUri%3A%23Exchange%22%2C%22FieldURI%22%3A%22ConversationLastDeliveryTime%22%7D%7D%5D%2C%22Filter%22%3A%22All%22%2C%22CategoryFilter%22%3Anull%2C%22FocusedViewFilter%22%3A-1%2C%22ConversationShapeName%22%3Anull%2C%22subscriptionIdSuffix%22%3Anull%2C%22GroupBy%22%3Anull%2C%22ChannelId%22%3A%22234c1b94-bba1-4bde-a1d5-8752f83d7308%22%7D%7D%5D%7D&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_custom_request(&quot;service.svc_26&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;EP=1&amp;UA=0&amp;ID=-26&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t44.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=service.svc/s/GetPersonaPhoto?email=test3%40emailtest.cn&amp;UA=0&amp;size=HR96x96&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_28&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_27&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22GetMailTipsJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22V2016_11_07%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22GetMailTipsRequest%3A%23Exchange%22%2C%22SendingAs%22%3A%7B%22__type%22%3A%22EmailAddress%3A%23Exchange%22%2C%22EmailAddress%22%3A%22Test4%40emailtest.cn%22%2C%22Name%22%3A%22Test4%22%7D%2C%22Recipients%22%3A%5B%7B%22__type%22%3A%22EmailAddress%3A%23Exchange%22%2C%22EmailAddress%22%3A%22test3%40emailtest.cn%22%2C%22Name%22%3A%22test3%40emailtest.cn%22%7D%5D%2C%22MailTipsRequested%22%3A1%7D%7D&quot;); web_add_header(&quot;Action&quot;, &quot;GetMailTips&quot;); web_custom_request(&quot;service.svc_27&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetMailTips&amp;EP=1&amp;ID=-27&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t45.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=https://static2.sharepointonline.com/files/fabric/assets/icons/fabricmdl2icons.woff&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=https://appsforoffice.microsoft.com/lib/1/hosted/en-us/outlook_strings.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=https://appsforoffice.microsoft.com/lib/1/hosted/outlook-web-16.01.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=https://appsforoffice.microsoft.com/lib/1/hosted/en-us/office_strings.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=https://appsforoffice.microsoft.com/lib/1/hosted/office.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_29&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_28&#125;&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22CreateItemJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22V2015_10_15%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22CreateItemRequest%3A%23Exchange%22%2C%22Items%22%3A%5B%7B%22__type%22%3A%22Message%3A%23Exchange%22%2C%22Subject%22%3A%22Attchment%20pert%22%2C%22Body%22%3A%7B%22__type%22%3A%22BodyContentType%3A%23Exchange%22%2C%22BodyType%22%3A%22HTML%22%2C%22Value%22%3A%22%3Chtml%3E%3Chead%3E%3Cmeta%20http-equiv%3D%5C%22Content-Type%5C%22%20content%3D%5C%22text%2Fhtml%3B%20charset%3DUTF-8%5C%22%3E%3Cstyle%20type%3D%5C%22text%2Fcss%5C%22%20style%3D%5C%22display%3Anone%3B%5C%22%3E%3C!--%20P%20%7Bmargin-top%3A0%3Bmargin-bottom%3A0%3B%7D%20--%3E%3C%2Fstyle%3E%3C%2Fhead%3E%3Cbody%20dir%3D%5C%22ltr%5C%22%3E%3Cdiv%20id%3D%5C%22divtagdefaultwrapper%5C%22%20style%3D%5C%22font-size%3A12pt%3Bcolor%3A%23000000%3Bfont-family%3ACalibri%2CHelvetica%2Csans-serif%3B%5C%22%20dir%3D%5C%22ltr%5C%22%3E%3Cp%3Eperfor%3Cbr%3E%3C%2Fp%3E%3C%2Fdiv%3E%3C%2Fbody%3E%3C%2Fhtml%3E%22%2C%22DataUriCount%22%3A0%2C%22CustomDataUriCount%22%3A0%7D%2C%22Importance%22%3A%22Normal%22%2C%22From%22%3Anull%2C%22ToRecipients%22%3A%5B%7B%22__type%22%3A%22EmailAddress%3A%23Exchange%22%2C%22MailboxType%22%3A%22OneOff%22%2C%22RoutingType%22%3A%22SMTP%22%2C%22EmailAddress%22%3A%22test3%40emailtest.cn%22%2C%22Name%22%3A%22%22%7D%5D%2C%22CcRecipients%22%3A%5B%5D%2C%22BccRecipients%22%3A%5B%5D%2C%22Sensitivity%22%3A%22Normal%22%2C%22IsDeliveryReceiptRequested%22%3Afalse%2C%22IsReadReceiptRequested%22%3Afalse%7D%5D%2C%22ClientSupportsIrm%22%3Atrue%2C%22OutboundCharset%22%3A%22AutoDetect%22%2C%22MessageDisposition%22%3A%22SaveOnly%22%2C%22ComposeOperation%22%3A%22newMail%22%7D%7D&quot;); web_add_header(&quot;Action&quot;, &quot;CreateItem&quot;); web_custom_request(&quot;service.svc_28&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=CreateItem&amp;EP=1&amp;ID=-28&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t46.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/resources/images/0/thinking16_grey.gif&quot;, &quot;Referer=&quot;, ENDITEM, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_30&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_29&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;CreateAttachmentFromLocalFile&quot;); web_custom_request(&quot;service.svc_29&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=CreateAttachmentFromLocalFile&amp;ID=-29&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t47.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, body_variable_1, LAST); lr_think_time(10); lr_start_transaction(&quot;post&quot;); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_31&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_30&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;UpdateItem&quot;); web_custom_request(&quot;service.svc_30&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=UpdateItem&amp;ID=-30&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t48.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, &quot;Body=&#123;\&quot;__type\&quot;:\&quot;UpdateItemJsonRequest:#Exchange\&quot;,\&quot;Header\&quot;:&#123;\&quot;__type\&quot;:\&quot;JsonRequestHeaders:#Exchange\&quot;,\&quot;RequestServerVersion\&quot;:\&quot;Exchange2015\&quot;,\&quot;TimeZoneContext\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneContext:#Exchange\&quot;,\&quot;TimeZoneDefinition\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneDefinitionType:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;China Standard Time\&quot;&#125;&#125;&#125;,\&quot;Body\&quot;:&#123;\&quot;__type\&quot;:\&quot;UpdateItemRequest:#Exchange\&quot;,\&quot;ItemChanges\&quot;:[&#123;\&quot;__type\&quot;:\&quot;ItemChange:#Exchange\&quot;,\&quot;Updates\&quot;:[&#123;\&quot;__type\&quot;:\&quot;DeleteItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;&quot; &quot;:\&quot;ExtendedPropertyUri:#Exchange\&quot;,\&quot;PropertyId\&quot;:35356,\&quot;DistinguishedPropertySetId\&quot;:\&quot;Sharing\&quot;,\&quot;PropertyType\&quot;:\&quot;CLSID\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;DeleteItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;From\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;CcRecipients\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;CcRecipients\&quot;:[]&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri&quot; &quot;:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;BccRecipients\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;BccRecipients\&quot;:[]&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;ToRecipients\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;ToRecipients\&quot;:[&#123;\&quot;__type\&quot;:\&quot;EmailAddress:#Exchange\&quot;,\&quot;MailboxType\&quot;:\&quot;OneOff\&quot;,\&quot;RoutingType\&quot;:\&quot;SMTP\&quot;,\&quot;EmailAddress\&quot;:\&quot;test3@emailtest.cn\&quot;,\&quot;Name\&quot;:\&quot;\&quot;&#125;]&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;&quot; &quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;IsReadReceiptRequested\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;IsReadReceiptRequested\&quot;:false&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;IsDeliveryReceiptRequested\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;IsDeliveryReceiptRequested\&quot;:false&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;Subject\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message&quot; &quot;:#Exchange\&quot;,\&quot;Subject\&quot;:\&quot;Attchment pert\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;Importance\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;Importance\&quot;:\&quot;Normal\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;Body\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;Body\&quot;:&#123;\&quot;__type\&quot;:\&quot;BodyContentType:#Exchange\&quot;,\&quot;BodyType\&quot;:\&quot;HTML\&quot;,\&quot;Value\&quot;:\&quot;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\\\&quot;&quot; &quot;Content-Type\\\&quot; content=\\\&quot;text/html; charset=UTF-8\\\&quot;&gt;&lt;style type=\\\&quot;text/css\\\&quot; style=\\\&quot;display:none;\\\&quot;&gt;&lt;!-- P &#123;margin-top:0;margin-bottom:0;&#125; --&gt;&lt;/style&gt;&lt;/head&gt;&lt;body dir=\\\&quot;ltr\\\&quot;&gt;&lt;div id=\\\&quot;divtagdefaultwrapper\\\&quot; style=\\\&quot;font-size:12pt;color:#000000;font-family:Calibri,Helvetica,sans-serif;\\\&quot; dir=\\\&quot;ltr\\\&quot;&gt;&lt;p&gt;performance Exchange &lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\&quot;,\&quot;DataUriCount\&quot;:0,\&quot;CustomDataUriCount\&quot;:0&#125;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;&quot; &quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;Sensitivity\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;Sensitivity\&quot;:\&quot;Normal\&quot;&#125;&#125;],\&quot;ItemId\&quot;:&#123;\&quot;__type\&quot;:\&quot;ItemId:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQBGAAAAAABu95v/jzADTIfi8X89MXTNBwCecFqQtFpNQYRSIDhkk5BMAAAAAAEPAACecFqQtFpNQYRSIDhkk5BMAAAAAB+MAAA=\&quot;,\&quot;ChangeKey\&quot;:\&quot;CQAAABYAAACecFqQtFpNQYRSIDhkk5BMAAAAACLe\&quot;&#125;&#125;],\&quot;ConflictResolution\&quot;:\&quot;AlwaysOverwrite\&quot;,\&quot;ClientSupportsIrm\&quot;:true,\&quot;&quot; &quot;SendCalendarInvitationsOrCancellations\&quot;:\&quot;SendToNone\&quot;,\&quot;MessageDisposition\&quot;:\&quot;SaveOnly\&quot;,\&quot;SuppressReadReceipts\&quot;:false,\&quot;ComposeOperation\&quot;:\&quot;newMail\&quot;,\&quot;OutboundCharset\&quot;:\&quot;AutoDetect\&quot;,\&quot;PromoteInlineAttachments\&quot;:false,\&quot;SendOnNotFoundError\&quot;:true&#125;&#125;&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_32&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_31&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;UpdateItem&quot;); web_custom_request(&quot;service.svc_31&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=UpdateItem&amp;ID=-31&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t49.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, &quot;Body=&#123;\&quot;__type\&quot;:\&quot;UpdateItemJsonRequest:#Exchange\&quot;,\&quot;Header\&quot;:&#123;\&quot;__type\&quot;:\&quot;JsonRequestHeaders:#Exchange\&quot;,\&quot;RequestServerVersion\&quot;:\&quot;Exchange2015\&quot;,\&quot;TimeZoneContext\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneContext:#Exchange\&quot;,\&quot;TimeZoneDefinition\&quot;:&#123;\&quot;__type\&quot;:\&quot;TimeZoneDefinitionType:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;China Standard Time\&quot;&#125;&#125;&#125;,\&quot;Body\&quot;:&#123;\&quot;__type\&quot;:\&quot;UpdateItemRequest:#Exchange\&quot;,\&quot;ItemChanges\&quot;:[&#123;\&quot;__type\&quot;:\&quot;ItemChange:#Exchange\&quot;,\&quot;Updates\&quot;:[&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;&quot; &quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;DocLinks\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;DocLinks\&quot;:[]&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;DeleteItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;ExtendedPropertyUri:#Exchange\&quot;,\&quot;PropertyId\&quot;:35356,\&quot;DistinguishedPropertySetId\&quot;:\&quot;Sharing\&quot;,\&quot;PropertyType\&quot;:\&quot;CLSID\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;DeleteItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;From\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,&quot; &quot;\&quot;FieldURI\&quot;:\&quot;CcRecipients\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;CcRecipients\&quot;:[]&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;BccRecipients\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;BccRecipients\&quot;:[]&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;ToRecipients\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;ToRecipients\&quot;:[&#123;\&quot;__type\&quot;:\&quot;EmailAddress:#Exchange\&quot;,\&quot;&quot; &quot;MailboxType\&quot;:\&quot;OneOff\&quot;,\&quot;RoutingType\&quot;:\&quot;SMTP\&quot;,\&quot;EmailAddress\&quot;:\&quot;test3@emailtest.cn\&quot;,\&quot;Name\&quot;:\&quot;\&quot;&#125;]&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;IsReadReceiptRequested\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;IsReadReceiptRequested\&quot;:false&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;IsDeliveryReceiptRequested\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;&quot; &quot;IsDeliveryReceiptRequested\&quot;:false&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;Subject\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;Subject\&quot;:\&quot;Attchment pert\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;Importance\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;Importance\&quot;:\&quot;Normal\&quot;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;&quot; &quot;FieldURI\&quot;:\&quot;Body\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;Body\&quot;:&#123;\&quot;__type\&quot;:\&quot;BodyContentType:#Exchange\&quot;,\&quot;BodyType\&quot;:\&quot;HTML\&quot;,\&quot;Value\&quot;:\&quot;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\\\&quot;Content-Type\\\&quot; content=\\\&quot;text/html; charset=UTF-8\\\&quot;&gt;&lt;style type=\\\&quot;text/css\\\&quot; style=\\\&quot;display:none;\\\&quot;&gt;&lt;!-- P &#123;margin-top:0;margin-bottom:0;&#125; --&gt;&lt;/style&gt;&lt;/head&gt;&lt;body dir=\\\&quot;ltr\\\&quot;&gt;&lt;div id=\\\&quot;divtagdefaultwrapper\\\&quot; style=\\\&quot;font-size:12pt;color:#000000;font-family:Calibri,Helvetica,sans-serif;\\\&quot; dir=&quot; &quot;\\\&quot;ltr\\\&quot;&gt;&lt;p&gt;performance Exchange &lt;br&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\&quot;,\&quot;DataUriCount\&quot;:0,\&quot;CustomDataUriCount\&quot;:0&#125;&#125;&#125;,&#123;\&quot;__type\&quot;:\&quot;SetItemField:#Exchange\&quot;,\&quot;Path\&quot;:&#123;\&quot;__type\&quot;:\&quot;PropertyUri:#Exchange\&quot;,\&quot;FieldURI\&quot;:\&quot;Sensitivity\&quot;&#125;,\&quot;Item\&quot;:&#123;\&quot;__type\&quot;:\&quot;Message:#Exchange\&quot;,\&quot;Sensitivity\&quot;:\&quot;Normal\&quot;&#125;&#125;],\&quot;ItemId\&quot;:&#123;\&quot;__type\&quot;:\&quot;ItemId:#Exchange\&quot;,\&quot;Id\&quot;:\&quot;AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQBGAAAAAABu95v/jzADTIfi8X89MXTNBwCecFqQtFpNQYRSIDhkk5BMAAAAAAEPAACecFqQtFpNQYRSIDhkk5BMAAAAAB&quot; &quot;+MAAA=\&quot;,\&quot;ChangeKey\&quot;:\&quot;CQAAABYAAACecFqQtFpNQYRSIDhkk5BMAAAAACLf\&quot;&#125;&#125;],\&quot;ConflictResolution\&quot;:\&quot;AlwaysOverwrite\&quot;,\&quot;ClientSupportsIrm\&quot;:true,\&quot;SendCalendarInvitationsOrCancellations\&quot;:\&quot;SendToNone\&quot;,\&quot;MessageDisposition\&quot;:\&quot;SendAndSaveCopy\&quot;,\&quot;SuppressReadReceipts\&quot;:false,\&quot;ComposeOperation\&quot;:\&quot;newMail\&quot;,\&quot;OutboundCharset\&quot;:\&quot;AutoDetect\&quot;,\&quot;PromoteInlineAttachments\&quot;:false,\&quot;SendOnNotFoundError\&quot;:true&#125;&#125;&quot;, EXTRARES, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.people.contactmanagement.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.people.photoupload.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.people.composepersonacard.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.bootcommonstrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.strings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.people.composepersonacard.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.people.composepersonacard.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/images/0/mmsprite1.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/meetingmessage.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.calendar.meetingmessage.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.options.core.models.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.people.webservices.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/microsoft.owa.core.peoplehub.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.peoplehub.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.peoplehub.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.storage.framework.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.storage.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.offline.boot.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.sync.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.moderngroups.shared.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/resources/styles/0/nonboot.mouse.css&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/zh-hans/microsoft.exchange.clients.owa2.client.oobestrings.localized.min.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.viewmodels.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.views.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.core.views.mouse.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.application.viewmodels.js&quot;, &quot;Referer=&quot;, ENDITEM, &quot;Url=prem/15.1.1531.3/scripts/microsoft.owa.application.views.js&quot;, &quot;Referer=&quot;, ENDITEM, LAST); lr_end_transaction(&quot;post&quot;,LR_AUTO); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_33&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_32&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;ConnectedAccountsNotification&quot;); web_custom_request(&quot;service.svc_32&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=ConnectedAccountsNotification&amp;ID=-32&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t50.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, &quot;Body=&#123;\&quot;isOWALogon\&quot;:true&#125;&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_34&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_33&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;GetReminders&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22__type%22%3A%22GetRemindersJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%2C%22Body%22%3A%7B%22__type%22%3A%22GetRemindersRequest%3A%23Exchange%22%2C%22EndTime%22%3A%222018-12-23T12%3A33%3A56%22%7D%7D&quot;); web_custom_request(&quot;service.svc_33&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=GetReminders&amp;EP=1&amp;ID=-33&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t51.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_35&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_34&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22request%22%3A%7B%22__type%22%3A%22NotificationSubscribeJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%7D%2C%22subscriptionData%22%3A%5B%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22SuiteNotification%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22SuiteNotification%22%2C%22subscriptionIdSuffix%22%3A%22%22%7D%7D%5D%7D&quot;); web_custom_request(&quot;service.svc_34&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;EP=1&amp;UA=0&amp;ID=-34&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t52.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); /*关联cookie*/ web_reg_save_param(&quot;X-OWA-CANARY_36&quot;, &quot;LB=Set-Cookie: X-OWA-CANARY=&quot;, &quot;RB=;&quot;, LAST); /*添加请求头*/ web_add_header(&quot;X-OWA-CANARY&quot;, &quot;&#123;X-OWA-CANARY_35&#125;&quot;); web_add_header(&quot;Action&quot;, &quot;SubscribeToNotification&quot;); web_add_header(&quot;X-OWA-UrlPostData&quot;, &quot;%7B%22request%22%3A%7B%22__type%22%3A%22NotificationSubscribeJsonRequest%3A%23Exchange%22%2C%22Header%22%3A%7B%22__type%22%3A%22JsonRequestHeaders%3A%23Exchange%22%2C%22RequestServerVersion%22%3A%22Exchange2013%22%2C%22TimeZoneContext%22%3A%7B%22__type%22%3A%22TimeZoneContext%3A%23Exchange%22%2C%22TimeZoneDefinition%22%3A%7B%22__type%22%3A%22TimeZoneDefinitionType%3A%23Exchange%22%2C%22Id%22%3A%22China%20Standard%20Time%22%7D%7D%7D%7D%2C%22subscriptionData%22%3A%5B%7B%22__type%22%3A%22SubscriptionData%3A%23Exchange%22%2C%22SubscriptionId%22%3A%22RowNotificationAAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEBAAA%3D%22%2C%22Parameters%22%3A%7B%22__type%22%3A%22SubscriptionParameters%3A%23Exchange%22%2C%22NotificationType%22%3A%22RowNotification%22%2C%22FolderId%22%3A%22AAMkADBkZjc5MGNlLTYxODUtNGI4OC1hZjNjLTQxYTMzZjhiOGNlMQAuAAAAAABu95v%2FjzADTIfi8X89MXTNAQCecFqQtFpNQYRSIDhkk5BMAAAAAAEBAAA%3D%22%2C%22subscriptionIdSuffix%22%3A%22%22%7D%7D%5D%7D&quot;); web_custom_request(&quot;service.svc_35&quot;, &quot;URL=https://email.emailtest.cn/owa/service.svc?action=SubscribeToNotification&amp;EP=1&amp;UA=0&amp;ID=-35&amp;AC=1&quot;, &quot;Method=POST&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=&quot;, &quot;Snapshot=t53.inf&quot;, &quot;Mode=HTML&quot;, &quot;EncType=application/json; charset=utf-8&quot;, LAST); web_url(&quot;logoff.owa&quot;, &quot;URL=https://email.emailtest.cn/owa/logoff.owa&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=&quot;, &quot;Snapshot=t54.inf&quot;, &quot;Mode=HTML&quot;, LAST); web_url(&quot;logon.aspx_2&quot;, &quot;URL=https://email.emailtest.cn/owa/auth/logon.aspx?replaceCurrent=1&amp;url=https%3a%2f%2femail.emailtest.cn%2fowa&quot;, &quot;Resource=0&quot;, &quot;RecContentType=text/html&quot;, &quot;Referer=&quot;, &quot;Snapshot=t55.inf&quot;, &quot;Mode=HTML&quot;, LAST); return 0;&#125; 最终，OWA实现了脚本发邮件，但是并发跑场景时候，问题就来了：1X-OWA-Error Microsoft.Exchange.Data.Directory.SystemConfiguration.OverBudgetException... 然后接口就500了，微软官网看了下，貌似是OWA的问题，用outlook客户端就没这个问题，所以，基本OWA的方式也就是废了，并发根本上不去，20左右就挂了，结果没法出。 JetStress然后又搜了什么exchange的官方压测工具，有两个，一个是Jetstress，另一个是Exchange Load Generator，由于基本没资料，Jetstress还好试一点，走到加载数据库才挂：加载动态链接库失败。。另一个就比较坑，基本是走不下去，第一步就挂了。 MAPI实在没办法，就想到了换协议，在loadrunner中自己写脚本。也是找到了exchange的协议，MAPI，脚本也不难写：1234567891011121314151617Actions()&#123; mapi_logon(&quot;Logon&quot;, &quot;ProfileName=John Smith&quot;, &quot;ProfilePass=Tiger&quot;, LAST); //Send a Sticky Note message mapi_send_mail(&quot;SendMail&quot;, &quot;To=user1@techno.merc-int.com&quot;, &quot;Cc=user0002t@techno.merc-int.com&quot;, &quot;Subject=&lt;GROUP&gt;:&lt;VUID&gt; @ &lt;DATE&gt;&quot;, &quot;Type=Ipm.StickyNote&quot;, &quot;Body=Please update your profile today.&quot;, LAST); mapi_logout(); return 1;&#125; 还有其他的例子：12345678910111213141516171819202122232425262728293031323334353637//Send a simple mail message mapi_send_mail(&quot;SendMail&quot;, &quot;To=user0001t@techno.merc-int.com&quot;, &quot;Subject=&lt;GROUP&gt;:&lt;VUID&gt; @ &lt;DATE&gt;&quot;, &quot;Body=Test Message! Please ignore.&quot;, LAST ); //Send a Sticky Note message mapi_send_mail(&quot;SendMail&quot;, &quot;To=user1@techno.merc-int.com,user2@techno.merc-int.com&quot;, &quot;Cc=user0002t@techno.merc-int.com&quot;, &quot;Bcc=user0003t@techno.merc-int.com&quot;, &quot;Subject=&lt;GROUP&gt;:&lt;VUID&gt; @ &lt;DATE&gt;&quot;, &quot;Type=IPM.StickyNote&quot;, &quot;Body=Please update your profile today.&quot;, LAST ); //Send mail with Attachments mapi_send_mail(&quot;SendMail&quot;, &quot;To=user0001t@techno.merc-int.com&quot;, &quot;Subject=Attach Test @ &lt;DATE&gt;&quot;, &quot;Body=Test Message!&quot;, &quot;ATTACHMENTS&quot;, &quot;File=E:\\QA\\for_dcom\\vbj_readme.txt&quot;, &quot;ENDITEM&quot;, &quot;File=E:\\QA\\for_dcom\\vbj_readme.txt&quot;, &quot;ENDITEM&quot;, LAST ); //Send mail with Attachment within body mapi_send_mail(&quot;Mail1&quot;, &quot;To=user0001t@techno.merc-int.com&quot;, &quot;Subject=This is a my subject &quot;, &quot;Body=This is a sample mail. This is the outfile.&quot;, &quot;Type=IPM.StickyNote&quot;, &quot;ATTACHMENTS&quot;, &quot;Name=AutoExec.bat&quot;, &quot;File=c:\\autoexec.bat&quot;, &quot;Position=5&quot;, &quot;ENDITEM&quot;, &quot;Name=Outfile.txt&quot;, &quot;File=c:\\tmp\\outfile.txt&quot;, &quot;Position=30&quot;, &quot;ENDITEM&quot;, LAST ); 脚本是不难，运行脚本坑就来了。 坑一首先，用loadrunner创建脚本时候，默认是:1234Actions()&#123; return 0;&#125; 然后补全脚本，运行时候，就开始了：Error: C interpreter run time error: Error -- Unresolved symbol : Action. 这个稍微好解决一点，把Actions()改成Action()就没这个报错了 坑二上面一步改完之后运行脚本，直接弹出了1没有默认的邮件客户端，或者当前的邮件客户端无法实现该邮件请求。请运行Microsoft Outlook并将其设为默认邮件客户端 这么个神坑问题。然后，第一步，装了个outlook，然后修改成默认邮件客户端，运行，继续报错；然后修改注册表，把outlook的内容删掉，运行安装程序，点修复，继续报错；然后卸载outlook重装，继续报错。。。 基本是奔溃状态，翻墙，各种搜MAPI loadrunner，MAPI there is no default mail client… stackoverfolw都翻烂了，绝望。。。最后是在某个名字都没记住的网站上，找到一个关于无法打卡.msg文件的回答，才试试看的，回答是建议把outlook换成32位版本，不能用64位，不然第三方调不通。。。 微软官方support回答 最终，重装了整个office到32位版本，这个报错解决！ 坑三Fail to logon for test@test.cn （rc=3）报了个这个错，这个错看起来也就是登录失败，登录信息无效。。然后就是各种试密码，各种试用户名/密码组合，域账号各种试，发现都没用。。 然后就想着，直接删账号重登outlook走一遍得了，这次outlook的账号配置文件，学乖了，名字用了test1，之前随便输了个，后面的账号和用户名密码也是很正常的，这次，登上了！！！脚本正常了！！！具体解决的原理实在没精力去研究了，只是将邮件的配置文件的名称和之后登录的用户名统一了，配置文件位置：控制面板-用户账户-邮件-配置文件 坑四这个，不太知道怎么解决了，每次用脚本发邮件，用mapi_send()函数时候，系统就会弹窗1有一个程序正试图访问存储在outlook中的电子邮件地址信息。如果。。。 按照帮助里面说的，已经将信任设置里面设成了不通知，还是每次都通知，也不知道解决了，难道是我的outlook没激活？不让我保存设置?搞不懂，反正，这个exchange的性能测试，是头非常疼 完！]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>loadrunner</tag>
        <tag>exchange</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux小工具推荐]]></title>
    <url>%2F2018%2F12%2F05%2FLinux%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[Linux实用小工具推荐 偶然发现几个挺有意思的小工具，推荐下 htop首先是top的替代品，个人感觉比top好用，界面更好看，支持键盘方向键左右移动，支持一键增减任务优先级（nice%） 安装：12yum -y install epel-releaseyum -y install htop 和top一样用，直接htop即可 mycli一个可以在控制台里面进行SQL联想的客户端工具，界面也更好看，比普通在控制台敲SQL爽多了 效果：1234mysql root@localhost:accrual_minth&gt; show databases; databases create database procedure status 安装：首先是服务器上要有python，如果是python3更好，装了pip最好；python2.7也行，下面演示python2.7安装安装gcc，更新yum1yum -y update &amp;&amp; yum -y install gcc 安装pip123wget https://bootstrap.pypa.io/get-pip.pypython get-pip.py &amp;&amp; yum -y install python-devel 安装mycli1pip install mycli 可能会有报错：Cannot uninstall &#39;configobj&#39;. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall 那就把安装命令替换成：1pip install --ignore-installed mycli 使用：1mycli -uroot thefuck这个工具，个人觉得是最有意思，简直就是在抒发敲命令的人的心声。想一下，当你敲一个命令，然后提示你xxx command not found是不是很想骂街，然后，国外的某团队就做了个这玩意，当你敲错命令时候，敲个fuck自动帮你纠正命令 效果：12345678910[root@localhost ~]# yun install aaa-bash: yun: command not found[root@localhost ~]# fuck​​​​​​​​​​yum install aaa [enter/↑/↓/ctrl+c]Loaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.aliyun.com * epel: mirrors.tuna.tsinghua.edu.cn * extras: mirrors.aliyun.com * updates: mirrors.aliyun.com 上述实例，原来敲的是yun install很明显是手残敲错了，然后敲个fuck，自动纠正成了yum install直接回车就可以执行了 安装：1pip install thefuck 配置：编辑bashrc配置文件123456cd ~vim .bashrc#在文件尾加入一行给thefuck重命名为fuckeval &quot;$(thefuck --alias fuck)&quot; 隐藏文件，可以ls -al看见 文件生效1source ~/.bashrc 完成~]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx简单配置]]></title>
    <url>%2F2018%2F11%2F20%2FNginx%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[nginx简单配置及简单说明 nginx安装就不说了，直接上配置文件，改改就可以了： nginx.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374user nginx;worker_processes 8;worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;worker_rlimit_nofile 2000000;error_log /var/log/nginx/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 2000000; use epoll; multi_accept on; &#125;http &#123; include mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$http_x_forwarded_for &apos; &apos;$upstream_addr &apos; &apos;ups_resp_time: $upstream_response_time &apos; &apos;request_time: $request_time&apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; client_max_body_size 5000m; client_body_buffer_size 512k; proxy_connect_timeout 3000; proxy_send_timeout 3000; proxy_read_timeout 3000; proxy_buffer_size 512k; proxy_buffers 8 512k; proxy_busy_buffers_size 512k; proxy_temp_file_write_size 512k; proxy_next_upstream error timeout invalid_header http_500 http_503 http_404; proxy_max_temp_file_size 128m; fastcgi_read_timeout 3000; fastcgi_buffers 8 5125; send_timeout 3000; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_disable none; keepalive_timeout 120; keepalive_requests 65535; types_hash_max_size 2048; charset utf-8; server_names_hash_bucket_size 128; client_header_buffer_size 32k; large_client_header_buffers 4 32k; reset_timedout_connection on; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/json; gzip_vary off; gzip_disable &quot;MSIE [1-6]\.&quot;; include conf.d/*.conf;&#125; APP.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677upstream apitest&#123; # ip_hash; # least_conn; server 192.168.0.1:8080; server 192.168.0.2:8080; server 192.168.0.3:8080; &#125;server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; #location / &#123; # root html; # index index.html index.htm; # proxy_pass http://apitest; #&#125; location ^~ /api/ &#123; proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header Connection &quot;&quot;; #proxy_set_header X-Real-IP $remote_addr; #proxy_set_header REMOTE-HOST $remote_addr; #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://apitest/api/; proxy_redirect off; &#125; location ^~ /auth/ &#123; proxy_http_version 1.1; proxy_set_header Connection &quot;&quot;; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://apitest/auth/; proxy_redirect off; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\.ht &#123; # deny all; #&#125; &#125; 简单说明负载均衡配置负载均衡，只要就是使用了节点upstream，参考格式如下：123456#配置多台服务器（这里只在一台服务器上的不同端口） upstream mysvr &#123; #权重比设置为1 ： 3 意思为 用户请求四次服务器，平均访问8082端口3次，8081端口一次，以此达到服务器均衡的作用（高并发） server 127.0.0.1:8081 weight=1; server 127.0.0.1:8082 weight=3; &#125; 反向代理反向代理只要就是用来将请求发送给其他主机的ap服务器，简单来说就是，nginx收到请求后，将请求转发给对应的ap服务器。例如：123location /apitest/ &#123; proxy_pass http://192.168.0.1:8080; &#125; 当请求收到以apitest/开头的请求，就会转发到http://192.168.0.1:8080；所以如果有个请求是http://192.168.3.2/apitest/getusername，通过nginx就会转到http://192.168.0.1:8080/apitest/getusername达到转发的效果，配合之前的负载均衡，就可以实现请求一个ip的接口，转到upstream中定义的多个ip的接口。 proxy_pass末尾“/”问题在nginx配置proxy_pass代理转发时，如果proxy_pass后面的URL加了/，表示绝对根路径；如果没有/，表示相对路径，把匹配的路径部分也代理走。 假设都访问http://192.168.2.1:8082/apitest/login.html 第一种123location /apitest/ &#123; proxy_pass http://127.0.0.1/;&#125; 代理到URL: http://127.0.0.1/apitest/login.html 第二种123location /apitest/ &#123; proxy_pass http://127.0.0.1;&#125; 第二种相对于第一种，proxy_pass后面的url少了/，代理到URL:http://127.0.0.1/apitest/login.html 第三种123location /apitest/ &#123; proxy_pass http://127.0.0.1/aaa/;&#125; 第三种相对于第一种，proxy_pass后面的url加了一层aaa/，代理到URL:http://127.0.0.1/aaa/login.html 第四种123location /apitest/ &#123; proxy_pass http://127.0.0.1/aaa;&#125; 第四种相对于第一种，proxy_pass后面的url加了一层aaa，代理到URL:http://127.0.0.1/aaalogin.html 完~]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一次精疲力尽的压测]]></title>
    <url>%2F2018%2F11%2F19%2F%E4%B8%80%E6%AC%A1%E7%B2%BE%E7%96%B2%E5%8A%9B%E5%B0%BD%E7%9A%84%E5%8E%8B%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[记一次精疲力尽的无语压测经历 平台改版，需要新的登录，平台组挑选了red hat开源的keycloak，一个针对现代应用程序和服务的开源身份和访问管理解决方案。 压测主要是进行了接口的压测。正常流程，脚本编写，执行，监控服务器资源，报告。 但是，这个神奇的接口，每次都是线程到300时候，有一瞬间QPS到达峰值，然后瞬间下降，之后持续一个很稳定的值一直下去，并且伴随着一堆的socket timeout报错。 于是乎，正常的，重测，看CPUtop，vmstat，uptime没啥用，CPU根本没什么反应，三台AP都是50%左右 看内存free -m也没啥用，一堆限制内存 看磁盘iostat -dxk 2没怎么写。。 看网络：看连接netstat -an | grep 端口 | wc -l貌似也正常的很。。 没办法，继续看内存，定位JVM问题：jstat PID &gt; 1.log导出dump文件，看一下，有很多block的，暂时不用优化jmap -dump:live,format=b,file=dump.hprof PID生成堆栈的完整文件，没啥用。。。jmap -heap PID看当前堆内存使用情况，GC正常，没用。。 然后开始怀疑是自己压测工具的问题，做了jmeter分布式，每台压力机起100个线程，也没什么用。 最后快绝望了，抱着试试看的心态，切到内网地址，那个到峰值之后降下来的情况终于没了（之所以开始不用内网地址测试，是因为之后上正式环境，提供出去的是外网地址，所以测试中，肯定是用外网地址来模拟）。找到了是内外网的区别之后，找运维同事看了网络的区别，得出的结果是外网地址限制了流量。。。阿里云ECS服务器，限制了外网流量是100Mb/s，我们的接口，一个请求大概数据包是2k，并发情况下，流量超出了限制，直接被阿里云服务器限制了访问。。。服气！ 所以，压测，不止要关注服务器自己的CPU，内存，磁盘，网络连接，还要看服务器提供商的外部限制。。。]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM内存性能问题定位]]></title>
    <url>%2F2018%2F11%2F02%2FJVM%E5%86%85%E5%AD%98%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[JVM内存性能定位 有点乱的一篇记录，想到哪敲到哪了。。。 堆和栈首先，栈（stack）和堆（heap）都是Java用来在RAM中存放数据的地方。根据 JVM 规范，JVM 内存共分为java栈（虚拟机栈VM Stack）、堆（Heap）、方法区（Method Area）、程序计数器（Program Counter Register）、本地方法栈（Native Method Stack）五个部分。 堆：用来存储程序中的一些对象，比如你用new关键字创建的对象，它就会被存储在堆内存中，但是这个对象在堆内存中的首地址会存储在栈中 栈：在jvm中栈用来存储一些对象的引用、局部变量以及计算过程的中间数据，在方法退出后那么这些变量也会被销毁。它的存储比堆快得多，只比CPU里的寄存器慢 栈内存在JVM中默认是1M，可以通过参数进行设置：-Xss最小堆内存在JVM中默认物理内存的64分之1，最大堆内存在JVM中默认物理内存4分之一，且建议最大堆内存不大于4G，并且设置-Xms=-Xmx避免每次GC后，调整堆的大小，减少系统内存分配开销:-Xms、-Xmx. JVM堆内存与GC在JVM里的内存空间，从大的层面划分，主要有新生代空间（Young）和老年代空间（Old），其中Young空间，又有1个Egen区，和2个Survivor区 Eden区域是用来存放使用new或者newInstance等方式创建的对象，默认都是存放在Eden区，除非这个对象太大，或者超过了设定的阈值-XX:PretenureSizeThresold,这样的对象会被直接分配到Old区域。 2个Survivor（幸存）区，一般称S0，S1，理论上他们是一样大的，解释一下，他们是如何工作的：在不断创建对象的过程中，Eden区会满，这时候会开始做Young G也叫Minor GC，而Young空间的第一次GC就是找出Eden区中，幸存活着的对象，然后将这些对象，放到S0，或S1区中的其中一个， 假设第一次选择了S0，它会逐步将活着的对象拷贝到S0区域，但是如果S0区域满了，剩下活着的对象只能放old区域了，接下来要做的是，将Eden区域 清空，此时时候S1区域也是空的。 当第二次Eden区域满的时候，就将Eden区域中活着的对象+S0区域中活着的对象，迁移到S1中，如果S1放不下，就会将剩下的部门，放到Old区域中，只是这次对象来源区域增加了S0，最后会将Eden区+S0区域，清空。 第三次和第四次依次类推，始终保证S0和S1有一个是空的，用来存储临时对象，用于交换空间的目的，反反复复多次没有被淘汰的对象，将会放入old区域中，默认是15次。具体的交换过程就和上图中的信息相似。 S0和S1一般多大，靠什么参数来控制，有什么变化？一般来说很小，我们大概知道它与Young差不多相差一倍的比例，设置的的参数主要有两个：-XX:SurvivorRatio=8-XX:InitialSurvivorRatio=8 第一个参数是Eden和Survivor区域比重，注意是一个Survivor的的大小，如果将其设置为8，则说明Eden区是一个Survivor区的8倍，换句话说S0或S1空间是整个Young空间的1/10，剩余的80%由Eden区域来使用。 第二个参数是Young/S0的比值，当其设置为8时，表示s0或s1占整个Young空间的12.5%。 一个对象每次Minor Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor GC多少次后，会进入Old区域呢？默认是15次，参数设置-XX:MaxTenuringThreshold=15,计数器会在对象的头部记录它交换的次数 FULL GC发生FULL GC的时候，意味着JVM会安全的暂停所有正在执行的线程（Stop The World），来回收内存空间，在这个时间段内，所有除了回收垃圾的线程外，其他有关JAVA的程序，代码都会静止，反映到系统上，就会出现系统响应大幅度变慢，卡机等状态。 内存分析线程阻塞关于线程阻塞，在之前定位linux最耗CPU时已经有提过：Jstack定位线程阻塞 这边提供一个分析工具，当使用jstack pid &gt; 1.log生成堆栈日志之后，使用tda工具进行分析 tda度娘盘地址（提取码：fut9） jstat查看gcjstat -gccause pid 5000，每隔5s刷新一次，查看GC信息，1234[root@iZuf61um4k0dww403xbmgpZ ~]# jstat -gccause 1270 5000 S0 S1 E O M CCS YGC YGCT FGC FGCT GCT LGCC GCC 0.00 0.00 28.12 99.96 87.59 80.39 610 21.693 31 61.932 83.625 G1 Evacuation Pause No GC 0.00 0.00 28.12 99.96 87.59 80.39 610 21.693 31 61.932 83.625 G1 Evacuation Pause No GC 其中FGC代表程序启动至今的FULL GC次数 jmap分析GCjmap -heap PID可以直接看到当前堆内存信息，包含各区域使用率 jmap -histo:live PID | head -10打印当前java堆活跃的各个对象的数量、大小 jmap -dump:live,format=b,file=dump.hprof PID生成dump文件（堆栈）生成的dump文件（dump.hprof），可以用MAT（MemoryAnalyzer）工具进行堆栈分析 MAT度娘盘地址（提取码：jidc） 打印GC日志最后，可以通过启动应用时加上GC打印的设置，直接将GC打印到文件中进行分析：1-XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/root/log/gclogs 分析用工具：gcviewer-1.36-SNAPSHOT gcviewer度娘盘地址（提取码：cvhs）工具启动方式：java -jar gcviewer-1.36-SNAPSHOT.jar(文件目录下执行) 参考文章JDK8 JVM性能优化 工具使用教程利用mat定位内存泄漏原因java GC日志查看gcviewerTDA进行java线程dump分析java线程Dump分析工具–jstackJava GC日志查看]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux定位最耗CPU的线程]]></title>
    <url>%2F2018%2F10%2F17%2FLinux%E5%AE%9A%E4%BD%8D%E6%9C%80%E8%80%97CPU%E7%9A%84%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[定位Linux耗CPU较高的线程 压测过程，经常遇见服务器CPU非常高，只是单纯的top，也只能看到是哪个进程比较耗CPU，不能进一步定位具体的线程。 Linux定位CPU瓶颈几种方式系统查看查看物理CPU个数：1cat /proc/cpuinfo |grep &quot;physical id&quot;|sort|uniq|wc -l 查看每个物理CPU中的core个数:1cat /proc/cpuinfo |grep &quot;cpu cores&quot;|wc -l 逻辑CPU个数1cat /proc/cpuinfo |grep &quot;procetestr&quot;|wc -l 物理cpu个数*核数=逻辑cpu个数（不支持超线程技术的情况下） uptime12[root@izuf6a1s9ws9726xatwn47z tools]# uptime10:15:33 up 54 days, 18:01, 1 user, load average: 1.02, 0.56, 0.30 load average三值大小一般不能大于系统CPU的个数。 1系统有8个CPU,如load average三值长期大于8，说明CPU很繁忙，负载很高，可能会影响系统性能。 但偶尔大于8，一般不会影响系统性能。 如load average输出值小于CPU个数，则表示CPU有空闲时间片，比如本例中的输出，CPU是非常空闲的 vmstat123456[root@izuf6b0a7e5agj4lm7aj3mz ~]# vmstat 2 3procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 3 0 0 12267888 166640 1863724 0 0 1 41 72 88 3 1 96 0 0 2 0 0 12267872 166640 1863724 0 0 0 0 66000 163918 15 17 68 0 0 2 0 0 12267872 166640 1863724 0 0 0 158 18689 43630 40 5 55 0 0 r–运行和等待cpu时间片的进程数，这个值如果长期大于系统CPU的个数，说明CPU不足，需要增加CPUb–在等待资源的进程数，比如正在等待I/O、或者内存交换等。CPUus用户进程消耗的CPU时间百分比us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，就需要考虑优化程序或算法。 sy内核进程消耗的CPU时间百分比，Sy的值较高时，说明内核消耗的CPU资源很多根据经验，us+sy的参考值为80%，如果大于80%可能存在CPU资源不足。 sarsar对系统每个方面进行单独统计，但会增加系统开销，不过开销可以评估，对系统的统计结果不会有很大影响12345678910[root@izuf6b0a7e5agj4lm7aj3mz ~]# sar -u 3 5Linux 3.10.0-693.2.2.el7.x86_64 (izuf6b0a7e5agj4lm7aj3mz) 08/29/2018 _x86_64_ (4 CPU)03:05:20 PM CPU %user %nice %system %iowait %steal %idle03:05:23 PM all 0.08 0.00 0.08 0.08 0.00 99.7503:05:26 PM all 0.08 0.00 0.00 0.00 0.00 99.9203:05:29 PM all 0.08 0.00 0.08 0.00 0.00 99.8303:05:32 PM all 0.33 0.00 0.08 0.00 0.00 99.5803:05:35 PM all 0.08 0.00 0.08 0.00 0.00 99.83Average: all 0.13 0.00 0.07 0.02 0.00 99.78 解释：123456%user列显示了用户进程消耗的CPU 时间百分比。%nice列显示了运行正常进程所消耗的CPU 时间百分比。%system列显示了系统进程消耗的CPU时间百分比。%iowait列显示了IO等待所占用的CPU时间百分比%steal列显示了在内存相对紧张的环境下pagein强制对不同的页面进行的steal操作 。%idle列显示了CPU处在空闲状态的时间百分比。 top1234567top - 10:20:34 up 54 days, 18:06, 1 user, load average: 0.14, 0.30, 0.26Tasks: 101 total, 1 running, 100 sleeping, 0 stopped, 0 zombie%Cpu(s): 1.3 us, 0.5 sy, 0.0 ni, 98.2 id, 0.1 wa, 0.0 hi, 0.0 si, 0.0 stKiB Mem : 16267724 total, 3338792 free, 6439248 used, 6489684 buff/cacheKiB Swap: 0 total, 0 free, 0 used. 9492508 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 第一行为当前时间，系统运行时间，当前登录用户数，系统1/5/15分钟平均负载 第二、三行为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：Tasks: total 进程总数running 正在运行的进程数sleeping 睡眠的进程数stopped 停止的进程数zombie 僵尸进程数 Cpu(s): us 用户空间占用CPU百分比sy 内核空间占用CPU百分比ni 用户进程空间内改变过优先级的进程占用CPU百分比id 空闲CPU百分比wa 等待输入输出的CPU时间百分比hi 硬中断（Hardware IRQ）占用CPU的百分比si 软中断（Software Interrupts）占用CPU的百分比 st (Steal time) 是当 hypervisor 服务另一个虚拟处理器的时候，虚拟 CPU 等待实际 CPU 的时间的百分比。 最后两行为内存信息。内容如下：Mem: total 物理内存总量used 使用的物理内存总量free 空闲内存总量buffers 用作内核缓存的内存量 Swap: total 交换区总量used 使用的交换区总量free 空闲交换区总量cached 缓冲的交换区总量。内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小。相应的内存再次被换出时可不必再对交换区写入。 进程信息区统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。序号 列名 含义PID 进程idPPID 父进程idRUSER Real user named UID 进程所有者的用户ide USER 进程所有者的用户名f GROUP 进程所有者的组名g TTY 启动进程的终端名。不是从终端启动的进程则显示为 ?h PR 优先级i NI nice值。负值表示高优先级，正值表示低优先级j P 最后使用的CPU，仅在多CPU环境下有意义k %CPU 上次更新到现在的CPU时间占用百分比l TIME 进程使用的CPU时间总计，单位秒m TIME+ 进程使用的CPU时间总计，单位1/100秒n %MEM 进程使用的物理内存百分比o VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RESp SWAP 进程使用的虚拟内存中，被换出的大小，单位kb。q RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATAr CODE 可执行代码占用的物理内存大小，单位kbs DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kbt SHR 共享内存大小，单位kbu nFLT 页面错误次数v nDRT 最后一次写入到现在，被修改过的页面数。w S 进程状态。D=不可中断的睡眠状态R=运行S=睡眠T=跟踪/停止Z=僵尸进程x COMMAND 命令名/命令行y WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名z Flags 任务标志，参考 sched.h默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、%CPU、%MEM、TIME+、COMMAND 列。可以通过下面的快捷键来更改显示内容。更改显示内容通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。 定位具体线程top -c通过top -c获得当前系统资源总览，键盘输入P(大写)，根据对CPU消耗倒序排列，获得最耗CPU的进程PID1234567891011Tasks: 122 total, 1 running, 121 sleeping, 0 stopped, 0 zombie%Cpu(s): 90.3 us, 1.6 sy, 0.0 ni, 6.6 id, 0.0 wa, 0.0 hi, 1.5 si, 0.0 stKiB Mem : 16267200 total, 7578856 free, 6915592 used, 1772752 buff/cacheKiB Swap: 0 total, 0 free, 0 used. 9038816 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 4209 testadmin 20 0 15.470g 5.913g 23928 S 745.5 38.1 209:33.97 /home/testadmin/jdk1.8.0_191/bin/java -D[Server:server-one] -D[pcid:499421770] -Xms7168m -Xmx13312m -server -XX:Metas+ 9 root 20 0 0 0 0 S 0.3 0.0 0:08.16 [rcu_sched] 18 root 20 0 0 0 0 S 0.3 0.0 0:00.06 [ksoftirqd/2] 1264 root 20 0 2517268 69256 10948 S 0.3 0.4 4:53.38 /usr/local/cloudmonitor/jre/bin/java -Djava.compiler=none -XX:-UseGCOverheadLimit -XX:NewRatio=1 -XX:SurvivorRatio=8+ 1 root 20 0 43660 4076 2492 S 0.0 0.0 0:01.79 /usr/lib/systemd/systemd --switched-root --system --deserialize 21 以上例子，最耗CPU的进程PID为4209 top -Hp PIDtop -Hp PID获得该PID的线程列表，通过大写P，倒序排列，获取最耗CPU的线程PID：12345678%Cpu(s): 91.3 us, 1.9 sy, 0.0 ni, 5.5 id, 0.0 wa, 0.0 hi, 1.4 si, 0.0 stKiB Mem : 16267200 total, 7266940 free, 7226952 used, 1773308 buff/cacheKiB Swap: 0 total, 0 free, 0 used. 8727236 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 10185 testadmin 20 0 15.470g 6.208g 23928 S 8.2 40.0 0:12.15 java 10148 testadmin 20 0 15.470g 6.208g 23928 S 6.8 40.0 0:12.21 java 10149 testadmin 20 0 15.470g 6.208g 23928 R 6.8 40.0 0:12.18 java 例如上述例子，获得最耗CPU的线程PID为10185 printf “%x”通过printf “%x” 线程PID，将PID转换为16进制：12[testadmin@izuf6bp7m03kbyap05zr6gz themes]$ printf “%x” 10185“27c9” 获得16进制的PID27c9 jstack 进程PID | grep 16进制线程PID -C5 –color通过jstack 进程PID | grep 16进制线程PID -C5 --color，获得耗CPU的线程详情：123456789101112[testadmin@izuf6bp7m03kbyap05zr6gz themes]$ jstack 4209 | grep 27c9 -C5 --color at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487) at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1364) at java.lang.Thread.run(Thread.java:748)&quot;default task-417&quot; #605 prio=5 os_prio=0 tid=0x00000000053cf800 nid=0x27c9 waiting on condition [0x00007f19f68f6000] java.lang.Thread.State: TIMED_WAITING (parking) at sun.misc.Unsafe.park(Native Method) - parking to wait for &lt;0x000000048002c208&gt; (a java.util.concurrent.Semaphore$FairSync) at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215) at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1037) 上述例子，可以获取最耗CPU的线程名称:default task-417，以及该线程执行的代码堆栈：0x27c9 以上，完！]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[胡言乱语]]></title>
    <url>%2F2018%2F10%2F17%2F%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[有事没事一点杂念 写在前面这段时间我的小破爪机不间断的给我推送“国航”和“南方航空”的优惠，挠的我都又想出去浪了；想想，今年基本没什么出行，实在是有点 人到“中年”，俗事繁多的无奈~~~迎接新生命到来的日子里，胡思乱想，水平有限，脚踩西瓜皮，遛哪写哪~ 一个简单的测试人很多时候，自觉还是个比较懒的人，一个没事喜欢思绪天马行空，而不是脚踏实地的做眼前的测试工作，最近想的比较多的，还是老生常谈的测试的职业生涯发展，个人在测试这条路上怎么走下去。 说实话，测试在业内的固有看法就是入门门槛低（实际上也是这样），在体量不是很大，技术氛围不是非常成熟的企业，我想，当前的状态，很多测试的同仁或多或少是不被开发看的起的吧，“没什么技术含量”，“不必要的工种”，“随便拉个人都能做”等等，唉，没办法，一句话是“开发是先天的，测试是后天的”，很多测试小伙伴（包括我自己），都是后天转到了测试这一行，或多或少的同仁是期待这个行业相对较好的薪资以及又不像开发的那么“找段代码过一生”的职业定位才从事的软件测试职业，如果没事时候问问自己，除却生活因素，软件测试这份职业，真的是你愿意从事的工作吗？真的是你的兴趣所在吗？我想是不是会打个问号。当你自己都不确定自己是否是愿意从事这门职业，坚守测试操守，也别去指望开发看的起你了呗。 当然，测试也真的没开发看的那么的糟糕，的确，一个根本没接触过软件测试方法论的人，很可能是会点啊点的就点出一个经过N多轮测试之后的系统的BUG，但是个人觉得这是无法避免的，0 bug的系统，个人觉得是个悖论；同样的，绝对安全的系统，根本也是不存在的。那么我们低端的测试人员怎么体现自己的价值，个人觉得，最简单的，业务的通盘理解程度，刚入行时候就听过，测试做得好，比产品还要懂产品。当你作为一个测试，比产品经理还要精通产品的业务，那你在平常的即使是黑盒测试过程中，也一定能很轻松就能发现很多的缺陷，甚至是预见系统在即使是开发严格按照产品文档开发之后也会出现的逻辑上的缺陷，这点，随便街上拉个人，应该做不到吧。之前参加公司一个培训时候，领导说过一句话，大致意思是在团队中做个有标签的人，当一个测试人员在团队中被打上了“这个人对业务最熟，不懂问他/她”，那我想，至少你是一个合格的测试了，开发，没有理由看不上你的工作。 是不是该学点技术了在进行了n久的功能测试之后，很多测试同仁会去转，可能是管理，可能是产品，也可能是其他。另外的，可能就是技术方向了，性能测试，自动化测试，安全测试等等；个人见识浅薄，目前只接触过性能测试和自动化测试，身边也有做安全测试的同事，我呢，自知能力尚欠，还没接触。 性能测试说到这四个字，是有点心累。找工作上，这四个字一输，敲个回车，就没几个职位放出来。进了企业，进行性能测试工作，我想我们这些底层的测试人员，很多也就是jmeter和loadrunner来回打转，写个脚本，测个结果，就算完成了。入门更是神奇，网上随便搜索《loadrunnerxxx入门到实践》，《Jmeterxxx实战系列》等等，教程一搜一堆，照着也是很简单就能完成一个脚本，然后就像模像样的找台压测机，点开始执行，没事到linux敲个top、vmstat或者iostat来看看资源，两只眼睛盯着聚合报告或者TPS图像，一有风吹草动就风风火火的在群里@谁谁谁，系统不行啊，并发才这么点，CPU就这么高，你这要优化啊。好一点的，还会mysql -uroot -p；show processlist;show OPEN TABLES where In_use &gt; 0;tail -f -n 300 slow.log;mysqlbinlog xxxx来看看数据库，也到头了。脸红的说，我差不多就这个层次，好不到哪去。所以有的时候，真的挺无语的，自己能力真的挺差的，作为一个性能测试人员，我能提供的最大的帮助就是定位是不是内存泄漏，是不是有慢SQL，再多也只能explain一下SQL，提供一点优化建议了。自觉，真的能力好低，对于程序出现CPU爆表，根本不能给开发提供节省他们时间的信息。 理想中的性能测试，通盘理解结构，精通语言，能大致定位到代码块，精简开发的优化时间，个人觉得，欠缺： 网络知识（TCP/IP，HTTP） 操作系统底层知识（代码执行原理，CPU、内存、磁盘等配合过程） 编程语言（Java特性，JVM原理、调优） 数据库（Mysql，Redis等） 监控系统 日志系统 最后，尽量不依赖工具，至少最后往不记得有工具这回事这方向走。 自动化测试国内目前的环境也还是推崇自动化，毕竟解放提升测试效率，解放人力嘛，可以理解。自动化测试的好处就不列举了，随随便便能列出一堆，但是，有的时候我们要“抬杠”，自动化测试不好的地方。最近看了篇James Bach的访谈，这位大仙关于自动化测试的一些观念，个人觉得，是很有道理的。摘一段：123自动化是用某个具体的方法发现些具体的问题。而人类应该有能力去用更加开阔性的方法发现更多问题你知道，我不喜欢用“测试自动化”这个词，因为我觉得测试不能被自动化。当大家说测试自动化的时候，大家的意思其实是自动事实检查fact checking。这些用例在检查特定的事物，所以他们寻找特定事物的失败或者成功。这就是自动检查，但是它完全没有自动化任何人们所做的真正的测试。当作为一个人去做测试的时候，我们不单单的看特定的东西，我们还会看一些线索。我们会去探索一些奇怪的事物和现象。一旦，我觉得有什么蹊跷，我就会深入下去，仔细研究。然后，当然研究会让我发现一些新的在开始的时候我没曾想过的缺陷。机器永远做不到这点，只有人可以。 大仙的意思，我个凡人揣摩的是，自动化测试的确是一个很有效的提升测试效率，尤其是在繁重的重复性测试上的效率，非常有价值，可以给企业节省出好几个劳动力去从事其他的价值。但是现在也有过分追求自动化的情况，接触过自动化测试的人应该都清楚自动化测试的原理，主要的验证方式就是断言，想想，既然可以在自动化脚本中写出了明确的断言结果，是不是也就意味着，这是你执行过不止一次的，思维定式般的测试思路；这样，如果对于测试数据也不维护，是不是就会出现一直跑着同样的结果，机械的验证着你固定的思维。自动化测试有个有名的理论“杀虫剂效应”，如果你用一种特定的方法去发现一种类型的缺陷，那就只能发现这种类型的缺陷了。 自己也做过一点点的自动化，感觉，自动化对企业是必须的工作，但是个人觉得，也不能过分的去追求自动化， 而且，自动化的从业人员，有的时候应该停下来，好好想想用例设计，好好想想自动化怎么才能更大的价值。 测试理论也忘了是在哪边看到的一句话，测试用例设计方法，一下午就可以全部学完。看起来貌似有点道理，一般日常使用的较多的等价类、边界值、判定变、正交等等，一下午好像是学完了，发现自己是无力反驳。。。然后看到“季哥”的博客，有这么一段话：1多次和其他公司的测试同学交流，发现很多同学说自己都说自己是工作2-3年的人，已经遇到瓶颈了，感觉测试很单调和无味。我给的建议其实很简单，那就是真正的理解和掌握所有的黑盒测试方法。怎么来验证呢？我自己就是这样：给你一个白板，你能把所有测试方法的5W2H(What、Why、When、Where、Who、How、How Much)都能非常清晰明了的演讲出来了吗？记住是不需要参考ppt或其他资料的情况下。 对照着看，发现自己的确是懂得相当的少。我们现在所日常使用的测试方法，都是前人沉淀下来的，既然现在入门测试还需要学，那就一定有我们没有掌握的部分，用例设计方法就那么多个，背一下很简单，用起来，自问，差太远了。 懒一点我还是想说，有的时候，需要“懒”一点，停下来，不动手，好好想想；一直的在做做做，很多时候，我们就被限制住了，忘掉了很多原本很简单，很真的想法，忘掉了真正的工作。想想怎么提升测试效率，怎么帮助团队提高产品质量，怎么优化我们的测试工作等等。 最近想过一些问题：如果测试时间不够，是否可以只测试客户关心的比较常用的功能？怎么用技术手段去提高测试效率离开了工具，我还会不会测试测试的初衷是什么 后记人生苦短，“好好享受”，稍微“懒”一点，想尽办法去“偷懒”。另外，做个“独立”的个体，减少依赖，自带技能盔甲加身，工具只是锦上添花并不是生活必须品（的确，提升效率上功不可没）。 最后，以上，皆为胡言乱语，没有一点点参考价值，结束！]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Grafana一点简单使用]]></title>
    <url>%2F2018%2F10%2F17%2FGrafana%E4%B8%80%E7%82%B9%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Grafana一些简单使用的记录 DashboardsGrafana的Dashboards是可以自己手工创建的，当然，也支持导入，官网上有模板，在官网的基础上稍微改了点QA Monitor.json：quot;__inputs&quot;: [], &quot;__requires&quot;: [ &#123; &quot;type&quot;: &quot;grafana&quot;, &quot;id&quot;: &quot;grafana&quot;, &quot;name&quot;: &quot;Grafana&quot;, &quot;version&quot;: &quot;5.2.2&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;grafana-piechart-panel&quot;, &quot;name&quot;: &quot;Pie Chart&quot;, &quot;version&quot;: &quot;1.3.3&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;graph&quot;, &quot;name&quot;: &quot;Graph&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125;, &#123; &quot;type&quot;: &quot;panel&quot;, &quot;id&quot;: &quot;singlestat&quot;, &quot;name&quot;: &quot;Singlestat&quot;, &quot;version&quot;: &quot;5.0.0&quot; &#125; ], &quot;annotations&quot;: &#123; &quot;list&quot;: [ &#123; &quot;builtIn&quot;: 1, &quot;datasource&quot;: &quot;-- Grafana --&quot;, &quot;enable&quot;: true, &quot;hide&quot;: true, &quot;iconColor&quot;: &quot;rgba(0, 211, 255, 1)&quot;, &quot;name&quot;: &quot;Annotations &amp; Alerts&quot;, &quot;type&quot;: &quot;dashboard&quot; &#125; ] &#125;, &quot;description&quot;: &quot;GaiaTest&quot;, &quot;editable&quot;: true, &quot;gnetId&quot;: null, &quot;graphTooltip&quot;: 1, &quot;id&quot;: null, &quot;iteration&quot;: 1539735409965, &quot;links&quot;: [], &quot;panels&quot;: [ &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 0 &#125;, &quot;id&quot;: 2, &quot;panels&quot;: [], &quot;repeat&quot;: null, &quot;title&quot;: &quot;Overview&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;#f9d9f9&quot;, &quot;#e5ac0e&quot;, &quot;#447ebc&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;format&quot;: &quot;rpm&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 8, &quot;w&quot;: 5, &quot;x&quot;: 0, &quot;y&quot;: 1 &#125;, &quot;id&quot;: 6, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;#0a50a1&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;rgb(31, 120, 193)&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__transactions&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;rate1m&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Throughput&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;cacheTimeout&quot;: null, &quot;colorBackground&quot;: false, &quot;colorValue&quot;: true, &quot;colors&quot;: [ &quot;#299c46&quot;, &quot;rgba(237, 129, 40, 0.89)&quot;, &quot;#bf1b00&quot; ], &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 4, &quot;format&quot;: &quot;percent&quot;, &quot;gauge&quot;: &#123; &quot;maxValue&quot;: 100, &quot;minValue&quot;: 0, &quot;show&quot;: false, &quot;thresholdLabels&quot;: false, &quot;thresholdMarkers&quot;: true &#125;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 8, &quot;w&quot;: 5, &quot;x&quot;: 5, &quot;y&quot;: 1 &#125;, &quot;id&quot;: 8, &quot;interval&quot;: null, &quot;links&quot;: [], &quot;mappingType&quot;: 1, &quot;mappingTypes&quot;: [ &#123; &quot;name&quot;: &quot;value to text&quot;, &quot;value&quot;: 1 &#125;, &#123; &quot;name&quot;: &quot;range to text&quot;, &quot;value&quot;: 2 &#125; ], &quot;maxDataPoints&quot;: 100, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;nullText&quot;: null, &quot;postfix&quot;: &quot;&quot;, &quot;postfixFontSize&quot;: &quot;50%&quot;, &quot;prefix&quot;: &quot;&quot;, &quot;prefixFontSize&quot;: &quot;50%&quot;, &quot;rangeMaps&quot;: [ &#123; &quot;from&quot;: &quot;null&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;to&quot;: &quot;null&quot; &#125; ], &quot;sparkline&quot;: &#123; &quot;fillColor&quot;: &quot;#7eb26d&quot;, &quot;full&quot;: true, &quot;lineColor&quot;: &quot;#629e51&quot;, &quot;show&quot;: true &#125;, &quot;tableColumn&quot;: &quot;&quot;, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [], &quot;measurement&quot;: &quot;application.httprequests__one_minute_error_percentage_rate&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: &quot;&quot;, &quot;title&quot;: &quot;Error %&quot;, &quot;type&quot;: &quot;singlestat&quot;, &quot;valueFontSize&quot;: &quot;80%&quot;, &quot;valueMaps&quot;: [ &#123; &quot;op&quot;: &quot;=&quot;, &quot;text&quot;: &quot;N/A&quot;, &quot;value&quot;: &quot;null&quot; &#125; ], &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 8, &quot;w&quot;: 7, &quot;x&quot;: 10, &quot;y&quot;: 1 &#125;, &quot;id&quot;: 10, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;active httprequest&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__active&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Active Requests&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 8, &quot;w&quot;: 7, &quot;x&quot;: 17, &quot;y&quot;: 1 &#125;, &quot;id&quot;: 12, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: true, &quot;current&quot;: false, &quot;max&quot;: false, &quot;min&quot;: false, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__apdex&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;score&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [ &#123; &quot;colorMode&quot;: &quot;critical&quot;, &quot;fill&quot;: true, &quot;line&quot;: true, &quot;op&quot;: &quot;lt&quot;, &quot;value&quot;: 0.5, &quot;yaxis&quot;: &quot;left&quot; &#125;, &#123; &quot;colorMode&quot;: &quot;warning&quot;, &quot;fill&quot;: true, &quot;line&quot;: true, &quot;op&quot;: &quot;gt&quot;, &quot;value&quot;: 0.5, &quot;yaxis&quot;: &quot;left&quot; &#125;, &#123; &quot;colorMode&quot;: &quot;ok&quot;, &quot;fill&quot;: true, &quot;line&quot;: true, &quot;op&quot;: &quot;gt&quot;, &quot;value&quot;: 0.85, &quot;yaxis&quot;: &quot;left&quot; &#125; ], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Apdex score&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: &quot;apdex&quot;, &quot;logBase&quot;: 1, &quot;max&quot;: &quot;1&quot;, &quot;min&quot;: &quot;0&quot;, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: false &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 9 &#125;, &quot;id&quot;: 14, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;$col&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;hide&quot;: false, &quot;measurement&quot;: &quot;application.httprequests__transactions&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;rate1m&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;1 min rate&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ], [ &#123; &quot;params&quot;: [ &quot;rate5m&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;5 min rate&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ], [ &#123; &quot;params&quot;: [ &quot;rate15m&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;15 min rate&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Throughput&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;rpm&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 9 &#125;, &quot;id&quot;: 16, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;$col&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__transactions&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;p95&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;95th Percentile&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ], [ &#123; &quot;params&quot;: [ &quot;p98&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;98th Percentile&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ], [ &#123; &quot;params&quot;: [ &quot;p99&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;99th Percentile&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Response Time&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;ms&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123; &quot;active websocket connections&quot;: &quot;#e5ac0e&quot;, &quot;all websocket connections&quot;: &quot;#447ebc&quot; &#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 18 &#125;, &quot;id&quot;: 18, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;active websocket connections&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application__active_websocket_connections&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125;, &#123; &quot;alias&quot;: &quot;all websocket connections&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application__all_websocket_connections&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;refId&quot;: &quot;B&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Websocket Connections&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;decimals&quot;: 2, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 18 &#125;, &quot;id&quot;: 20, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;$col&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__error_rate&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;rate1m&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;1min rate&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ], [ &#123; &quot;params&quot;: [ &quot;rate5m&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;5min rate&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ], [ &#123; &quot;params&quot;: [ &quot;rate15m&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125;, &#123; &quot;params&quot;: [ &quot;15min rate&quot; ], &quot;type&quot;: &quot;alias&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Error Rate&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;rpm&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 9, &quot;x&quot;: 0, &quot;y&quot;: 27 &#125;, &quot;id&quot;: 22, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;1min error%&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__one_minute_error_percentage_rate&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;Error Rate %&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;percent&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: &quot;100&quot;, &quot;min&quot;: &quot;0&quot;, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 9, &quot;x&quot;: 9, &quot;y&quot;: 27 &#125;, &quot;id&quot;: 26, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;post size&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__post_size&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;last&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;httprequest post size&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: &quot;0&quot;, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;breakPoint&quot;: &quot;50%&quot;, &quot;cacheTimeout&quot;: null, &quot;combine&quot;: &#123; &quot;label&quot;: &quot;Others&quot;, &quot;threshold&quot;: 0 &#125;, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fontSize&quot;: &quot;80%&quot;, &quot;format&quot;: &quot;percent&quot;, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 6, &quot;x&quot;: 18, &quot;y&quot;: 27 &#125;, &quot;id&quot;: 24, &quot;interval&quot;: null, &quot;legend&quot;: &#123; &quot;percentage&quot;: true, &quot;show&quot;: true, &quot;values&quot;: true &#125;, &quot;legendType&quot;: &quot;Right side&quot;, &quot;links&quot;: [], &quot;maxDataPoints&quot;: 3, &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;pieType&quot;: &quot;pie&quot;, &quot;strokeWidth&quot;: 1, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;$tag_http_status_code&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;http_status_code&quot; ], &quot;type&quot;: &quot;tag&quot; &#125; ], &quot;measurement&quot;: &quot;application.httprequests__errors&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;title&quot;: &quot;Errors&quot;, &quot;type&quot;: &quot;grafana-piechart-panel&quot;, &quot;valueName&quot;: &quot;current&quot; &#125;, &#123; &quot;collapsed&quot;: false, &quot;gridPos&quot;: &#123; &quot;h&quot;: 1, &quot;w&quot;: 24, &quot;x&quot;: 0, &quot;y&quot;: 36 &#125;, &quot;id&quot;: 28, &quot;panels&quot;: [], &quot;repeat&quot;: null, &quot;title&quot;: &quot;Event Post&quot;, &quot;type&quot;: &quot;row&quot; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 37 &#125;, &quot;id&quot;: 30, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;eventpost count&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application__eventpost.count&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;eventpost count&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 37 &#125;, &quot;id&quot;: 32, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;eventpost deadletter&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application__eventpost.deadletter&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;eventpost deadletter&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 0, &quot;y&quot;: 46 &#125;, &quot;id&quot;: 34, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;connected&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;eventpost enqueued&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application__eventpost.enqueued&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;eventpost enqueued&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125;, &#123; &quot;aliasColors&quot;: &#123;&#125;, &quot;bars&quot;: false, &quot;dashLength&quot;: 10, &quot;dashes&quot;: false, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;fill&quot;: 1, &quot;gridPos&quot;: &#123; &quot;h&quot;: 9, &quot;w&quot;: 12, &quot;x&quot;: 12, &quot;y&quot;: 46 &#125;, &quot;id&quot;: 36, &quot;legend&quot;: &#123; &quot;alignAsTable&quot;: true, &quot;avg&quot;: false, &quot;current&quot;: true, &quot;max&quot;: false, &quot;min&quot;: false, &quot;rightSide&quot;: true, &quot;show&quot;: true, &quot;total&quot;: false, &quot;values&quot;: true &#125;, &quot;lines&quot;: true, &quot;linewidth&quot;: 1, &quot;links&quot;: [], &quot;nullPointMode&quot;: &quot;null&quot;, &quot;percentage&quot;: false, &quot;pointradius&quot;: 5, &quot;points&quot;: false, &quot;renderer&quot;: &quot;flot&quot;, &quot;seriesOverrides&quot;: [], &quot;spaceLength&quot;: 10, &quot;stack&quot;: false, &quot;steppedLine&quot;: false, &quot;targets&quot;: [ &#123; &quot;alias&quot;: &quot;eventpost working&quot;, &quot;format&quot;: &quot;time_series&quot;, &quot;groupBy&quot;: [ &#123; &quot;params&quot;: [ &quot;$__interval&quot; ], &quot;type&quot;: &quot;time&quot; &#125;, &#123; &quot;params&quot;: [ &quot;null&quot; ], &quot;type&quot;: &quot;fill&quot; &#125; ], &quot;measurement&quot;: &quot;application__eventpost.working&quot;, &quot;orderByTime&quot;: &quot;ASC&quot;, &quot;policy&quot;: &quot;default&quot;, &quot;rawSql&quot;: &quot;SELECT\n UNIX_TIMESTAMP(&lt;time_column&gt;) as time_sec,\n &lt;value column&gt; as value,\n &lt;series name column&gt; as metric\nFROM &lt;table name&gt;\nWHERE $__timeFilter(time_column)\nORDER BY &lt;time_column&gt; ASC\n&quot;, &quot;refId&quot;: &quot;A&quot;, &quot;resultFormat&quot;: &quot;time_series&quot;, &quot;select&quot;: [ [ &#123; &quot;params&quot;: [ &quot;value&quot; ], &quot;type&quot;: &quot;field&quot; &#125;, &#123; &quot;params&quot;: [], &quot;type&quot;: &quot;last&quot; &#125; ] ], &quot;tags&quot;: [ &#123; &quot;key&quot;: &quot;app&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$application$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;env&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$environment$/&quot; &#125;, &#123; &quot;condition&quot;: &quot;AND&quot;, &quot;key&quot;: &quot;server&quot;, &quot;operator&quot;: &quot;=~&quot;, &quot;value&quot;: &quot;/^$server$/&quot; &#125; ] &#125; ], &quot;thresholds&quot;: [], &quot;timeFrom&quot;: null, &quot;timeShift&quot;: null, &quot;title&quot;: &quot;eventpost working&quot;, &quot;tooltip&quot;: &#123; &quot;shared&quot;: true, &quot;sort&quot;: 0, &quot;value_type&quot;: &quot;individual&quot; &#125;, &quot;type&quot;: &quot;graph&quot;, &quot;xaxis&quot;: &#123; &quot;buckets&quot;: null, &quot;mode&quot;: &quot;time&quot;, &quot;name&quot;: null, &quot;show&quot;: true, &quot;values&quot;: [] &#125;, &quot;yaxes&quot;: [ &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125;, &#123; &quot;format&quot;: &quot;short&quot;, &quot;label&quot;: null, &quot;logBase&quot;: 1, &quot;max&quot;: null, &quot;min&quot;: null, &quot;show&quot;: true &#125; ], &quot;yaxis&quot;: &#123; &quot;align&quot;: false, &quot;alignLevel&quot;: null &#125; &#125; ], &quot;refresh&quot;: &quot;30s&quot;, &quot;schemaVersion&quot;: 16, &quot;style&quot;: &quot;dark&quot;, &quot;tags&quot;: [ &quot;influxdb&quot; ], &quot;templating&quot;: &#123; &quot;list&quot;: [ &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: null, &quot;multi&quot;: false, &quot;name&quot;: &quot;environment&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;SHOW TAG VALUES WITH KEY = \&quot;env\&quot;&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 1, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: false, &quot;label&quot;: null, &quot;multi&quot;: false, &quot;name&quot;: &quot;application&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;SHOW TAG VALUES WITH KEY = \&quot;app\&quot;&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 1, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125;, &#123; &quot;current&quot;: &#123; &quot;selected&quot;: false, &quot;tags&quot;: [], &quot;text&quot;: &quot;Exceptionless&quot;, &quot;value&quot;: &quot;Exceptionless&quot; &#125;, &quot;hide&quot;: 0, &quot;label&quot;: null, &quot;name&quot;: &quot;datasource&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;influxdb&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;type&quot;: &quot;datasource&quot; &#125;, &#123; &quot;auto&quot;: false, &quot;auto_count&quot;: 30, &quot;auto_min&quot;: &quot;10s&quot;, &quot;current&quot;: &#123; &quot;text&quot;: &quot;5s&quot;, &quot;value&quot;: &quot;5s&quot; &#125;, &quot;hide&quot;: 0, &quot;label&quot;: null, &quot;name&quot;: &quot;summarize&quot;, &quot;options&quot;: [ &#123; &quot;selected&quot;: true, &quot;text&quot;: &quot;5s&quot;, &quot;value&quot;: &quot;5s&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;10s&quot;, &quot;value&quot;: &quot;10s&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30s&quot;, &quot;value&quot;: &quot;30s&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1m&quot;, &quot;value&quot;: &quot;1m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;10m&quot;, &quot;value&quot;: &quot;10m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30m&quot;, &quot;value&quot;: &quot;30m&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1h&quot;, &quot;value&quot;: &quot;1h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;6h&quot;, &quot;value&quot;: &quot;6h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;12h&quot;, &quot;value&quot;: &quot;12h&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;1d&quot;, &quot;value&quot;: &quot;1d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;7d&quot;, &quot;value&quot;: &quot;7d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;14d&quot;, &quot;value&quot;: &quot;14d&quot; &#125;, &#123; &quot;selected&quot;: false, &quot;text&quot;: &quot;30d&quot;, &quot;value&quot;: &quot;30d&quot; &#125; ], &quot;query&quot;: &quot;5s,10s,30s,1m,10m,30m,1h,6h,12h,1d,7d,14d,30d&quot;, &quot;refresh&quot;: 2, &quot;type&quot;: &quot;interval&quot; &#125;, &#123; &quot;allValue&quot;: null, &quot;current&quot;: &#123;&#125;, &quot;datasource&quot;: &quot;$datasource&quot;, &quot;hide&quot;: 0, &quot;includeAll&quot;: true, &quot;label&quot;: null, &quot;multi&quot;: true, &quot;name&quot;: &quot;server&quot;, &quot;options&quot;: [], &quot;query&quot;: &quot;SHOW TAG VALUES WITH KEY = \&quot;server\&quot;&quot;, &quot;refresh&quot;: 1, &quot;regex&quot;: &quot;&quot;, &quot;sort&quot;: 0, &quot;tagValuesQuery&quot;: &quot;&quot;, &quot;tags&quot;: [], &quot;tagsQuery&quot;: &quot;&quot;, &quot;type&quot;: &quot;query&quot;, &quot;useTags&quot;: false &#125; ] &#125;, &quot;time&quot;: &#123; &quot;from&quot;: &quot;now-6h&quot;, &quot;to&quot;: &quot;now&quot; &#125;, &quot;timepicker&quot;: &#123; &quot;refresh_intervals&quot;: [ &quot;5s&quot;, &quot;10s&quot;, &quot;30s&quot;, &quot;1m&quot;, &quot;5m&quot;, &quot;15m&quot;, &quot;30m&quot;, &quot;1h&quot;, &quot;2h&quot;, &quot;1d&quot; ], &quot;time_options&quot;: [ &quot;5m&quot;, &quot;15m&quot;, &quot;1h&quot;, &quot;6h&quot;, &quot;12h&quot;, &quot;24h&quot;, &quot;2d&quot;, &quot;7d&quot;, &quot;30d&quot; ] &#125;, &quot;timezone&quot;: &quot;browser&quot;, &quot;title&quot;: &quot;QA Monitor&quot;, &quot;uid&quot;: &quot;AOUXkRxmz&quot;, &quot;version&quot;: 37&#125; 直接拷下来保存json格式即可。 导入Dashboard点击manage dashboard，选择Import，点击Upload .json File即可（或者直接把json内容粘进paste JSON文本框）。 告警Grafana现在有告警的功能，需要自己改点配置来开启，配置文件位置：/etc/grafana/grafana.ini（Centos路径，其他应该大同小异，不行就find / -name “grafana.ini”搜一下）修改内容(修改之前养成好习惯，先cp一个备份)(文件行数和修改完内容，linux下vim显示行数，键盘直接敲 “:set nu”，跳转到指定行，不加冒号直接行数G，例如跳转到15行，键盘直接敲”15G”（非编辑模式下，没有按i）)：12345678910111213302 [smtp]303 enabled = true304 host = smtp.exmail.qq.com:465(发送服务器)305 user = ****@xx.com（账号）306 # If the password contains # or ; you have to wrap it with trippel quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;307 password = grafanaTest（邮箱密码）308 ;cert_file =309 ;key_file =310 skip_verify = true311 from_address = kyle@xxxx.com(发件邮箱)312 ;from_name = Grafana313 # EHLO identity in SMTP dialog (defaults to instance_name)314 ;ehlo_identity = dashboard.example.com 同时开启alert:12345377 [alerting]378 # Disable alerting engine &amp; UI features379 enabled = true380 # Makes it possible to turn off alert rule execution but alerting UI is visible381 execute_alerts = true 保存退出，重启grafana：systemctl restart grafana-server 告警配置进入Grafana web页面，点击Alerting，配置告警，配置Notification channels，很简单，输入一个Name，Type选择Eamil，可以勾选Include image，输入收件人地址，多个收件人中间用英文分号隔开;，可以点击Send Test测试一下，一切正常就可以收到测试的邮件了。 图像开启告警在Dashboard中添加图形时，编辑图形，有一个告警菜单Alert，点击create alert进入新增告警页面，自定义Condition即可，完了Test Rule测试查看。 Template variables are not supported in alert queries这个坑是因为配置图形时候，Metrics配置的是变量，例如$dashboard，grafanan的告警不能用变量，换成写死的具体参数就可以了 Failed to test rule method=POST path=/api/alerts/test status=500这个坑，其实和上面一个是一个道理，我出现这个坑，是因为修改成常量时候，只是把表，服务，应用修改成了常量，数据库选择的还是变量形式，就一直报这个错，连github都上去看提的issue了，折腾半天，记住，设置告警，不能出现变量！全用常量即可！ 后记很乱的一篇博客，估计就我自己看得懂；这段时间断断续续的都在折腾APM的东西，到现在终于基本有雏形了。]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7搭建Grafana]]></title>
    <url>%2F2018%2F10%2F12%2FCentos7%E6%90%AD%E5%BB%BAGrafana%2F</url>
    <content type="text"><![CDATA[Centos7安装Grafana 差点忘了 ，还是记录下吧 安装官网上其实有： 官方安装教程 1wget https://s3-us-west-2.amazonaws.com/grafana-releases/release/grafana-5.3.0-1.x86_64.rpm 1sudo yum localinstall grafana-5.3.0-1.x86_64.rpm 然后这样就安装完成了 安装插件看一下当前默认安装了什么插件1grafana-cli plugins list-remote 没有zabbix，装一个1grafana-cli plugins install alexanderzobnin-zabbix-app 当然，如果出现“不可抗力”，下载安装不了，直接下zip包，然后解压到/var/lib/grafana/plugins目录下即可（grafana插件的默认安装路径） zip包在官网上对应插件Installation页，有一个download the .zip file点击下载即可 启动然后就可以启动服务了：12345systemctl daemon-reloadsystemctl start grafana-serversystemctl status grafana-server 再然后，怎么用Grafana，说实话，我也只会简单的，还是看官网的教程吧。。 Grafana使用]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】linux系统内存基础知识]]></title>
    <url>%2F2018%2F10%2F11%2F%E3%80%90%E8%BD%AC%E3%80%91linux%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[计算机基础之:Linux内存基础，转自来自万能的互联网网友，我只是搬运工，感谢原作者！ 在Linux系统中，我们经常用free命令来查看系统内存的使用状态。类似：1234[root@localhost ~]# free -m total used free shared buff/cache availableMem: 15885 3898 1069 7 10917 11584Swap: 6143 178 5965 显示的单位是M，当然也可以free -g显示单位是G而已。这个命令几乎是每一个使用过Linux的人必会的命令，但越是这样的命令，似乎真正明白的人越少（我是说比例越少）。一般情况下，对此命令输出的理解可以分这几个层次： 不了解。这样的人的第一反应是：天啊，内存用了好多，70个多G，可是我几乎没有运行什么大程序啊？为什么会这样？Linux好占内存！ 自以为很了解。这样的人一般评估过会说：嗯，根据我专业的眼光看的出来，内存才用了17G左右，还有很多剩余内存可用。buffers/cache占用的较多，说明系统中有进程曾经读写过文件，但是不要紧，这部分内存是当空闲来用的。 真的很了解。这种人的反应反而让人感觉最不懂Linux，他们的反应是：free显示的是这样，好吧我知道了。神马？你问我这些内存够不够，我当然不知道啦！我特么怎么知道你程序怎么写的？ 根据目前网络上技术文档的内容，我相信绝大多数了解一点Linux的人应该处在第二种层次。大家普遍认为，buffers和cached所占用的内存空间是可以在内存压力较大的时候被释放当做空闲空间用的。但真的是这样么？在论证这个题目之前，我们先简要介绍一下buffers和cached是什么意思： 什么是buffer/cache？buffer和cache是两个在计算机技术中被用滥的名词，放在不通语境下会有不同的意义。在Linux的内存管理中，这里的buffer指Linux内存的：Buffer cache。这里的cache指Linux内存中的：Page cache。翻译成中文可以叫做缓冲区缓存和页面缓存。在历史上，它们一个（buffer）被用来当成对io设备写的缓存，而另一个（cache）被用来当作对io设备的读缓存，这里的io设备，主要指的是块设备文件和文件系统上的普通文件。但是现在，它们的意义已经不一样了。在当前的内核中，page cache顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page cache作为其缓存来管理使用。当然，不是所有的内存都是以页（page）进行管理的，也有很多是针对块（block）进行管理的，这部分内存使用如果要用到cache功能，则都集中到buffer cache中来使用。（从这个角度出发，是不是buffer cache改名叫做block cache更好？）然而，也不是所有块（block）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在X86上无论是32位还是64位都是4k。 明白了这两套缓存系统的区别，就可以理解它们究竟都可以用来做什么了。 什么是page cache？Page cache主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有read／write操作的时候。如果你仔细想想的话，作为可以映射文件到内存的系统调用：mmap是不是很自然的也应该用到page cache？在当前的系统实现里，page cache也被作为其它文件类型的缓存设备来用，所以事实上page cache也负责了大部分的块设备文件的缓存工作。 什么是buffer cacheBuffer cache则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。这意味着某些对块的操作会使用buffer cache进行缓存，比如我们在格式化文件系统的时候。一般情况下两个缓存系统是一起配合使用的，比如当我们对一个文件进行写操作的时候，page cache的内容会被改变，而buffer cache则可以用来将page标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。这样，内核在后续执行脏数据的回写（writeback）时，就不用将整个page写回，而只需要写回修改的部分即可。 如何回收cache？Linux内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。一般情况下，这个操作中主要的内存释放都来自于对buffer／cache的释放。尤其是被使用更多的cache空间。既然它主要用来做缓存，只是在内存够用的时候加快进程对文件的读写速度，那么在内存压力较大的情况下，当然有必要清空释放cache，作为free空间分给相关进程使用。所以一般情况下，我们认为buffer/cache空间可以被释放，这个理解是正确的。 但是这种清缓存的工作也并不是没有成本。理解cache是干什么的就可以明白清缓存必须保证cache中的数据跟对应文件中的数据一致，才能对cache进行释放。所以伴随着cache清除的行为的，一般都是系统IO飙高。因为内核要对比cache中的数据和对应硬盘文件上的数据是否一致，如果不一致需要写回，之后才能回收。 在系统中除了内存将被耗尽的时候可以清缓存以外，我们还可以使用下面这个文件来人工触发缓存清除的操作：12[root@localhost ~]# cat /proc/sys/vm/drop_caches 0 方法是： echo 1 &gt; /proc/sys/vm/drop_caches 当然，这个文件可以设置的值分别为1、2、3。它们所表示的含义为：12345echo 1 &gt; /proc/sys/vm/drop_caches:表示清除pagecache。echo 2 &gt; /proc/sys/vm/drop_caches:表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。echo 3 &gt; /proc/sys/vm/drop_caches:表示清除pagecache和slab分配器中的缓存对象。 参考blog Linux中Cache内存占用过高解决办法]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>buff/cache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】聊一聊职业发展]]></title>
    <url>%2F2018%2F10%2F09%2F%E3%80%90%E8%BD%AC%E3%80%91%E8%81%8A%E4%B8%80%E8%81%8A%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%2F</url>
    <content type="text"><![CDATA[【转】老生常谈，再谈谈测试职业发展 转自Testerhome，看的挺有感触，感谢作者！转来自己blog，时时共勉。 有这么个普遍现象测试招聘者，特别是一、二线互联网公司的招聘者最苦恼的事儿就是招人。想找到一个合适的人难于上青天，每天各种撒网，简历看几百份，面大几十人，能捞到一个中意的小伙伴就谢天谢地了。但同时很多测试小伙伴发现找工作很难，特别是进大一点的厂，他们特别挑：代码要会写，要有软件架构能力，问一大坨平时根本用不到的技术问题，还挑经验，挑沟通能力，挑这挑那，有时候还特么挑学历、挑年龄。。。 供求总难以匹配起来，造成了双方都很痛苦。 Why？能力要求不匹配是最核心的问题。软件、互联网近20年来飞速成长，其实也经历了很多阶段。行业软件兴盛阶段和外包兴盛阶段（2000-2010年）行业进入了大量的测试人员，当时最主流的测试实践是：重心放在系统验收阶段。测试人员的主要工作基本都投入在了基于业务的黑盒测试上，对代码能力、系统理解的能力要求不多。2010年后，互联网行业的真正兴起让国内软件开发模式开始缓慢调头，快速迭代的模式逐步兴起，开发周期越来越短，迭代越来越快，但系统越来越越庞大、复杂。原来的测试工作模式和工作范围越来越无法满足要求了。但大量从业人员技能范围转变是一件很难的事情，行业是有巨大惯性的。从宏观上看大量QA技能转变跟不上需求转变是造成市场供求不匹配的主要原因。 So What?三个观点：1. 只做手工测试，不懂系统实现的测试工程师的职业发展会越来越受限。2. 能够转型成适应市场需求的同学将在近几年的时间获得超额回报（因为市场供不应求，企业不得不抬高价格来寻找这样的人）。3.对于个体来说，自我成长永远最重要，自己永远要对自己的发展负责，别依赖外部环境，自己想办法变成市场的香饽饽才靠谱。 到底什么样的人抢手？按照我一点理解讲一讲什么样子的人会抢手吧，限于篇幅会偏重技术角度来讲。个人之见，欢迎讨论和拍砖。 测试的底子-项目经验有比较复杂系统的测试实战经验，你就超过了50%以上的应聘者。什么叫做比较复杂系统呢？投入50人年开发出来的系统就可以称作一个复杂系统了。因此，复杂系统并不是很罕见。但是，如果你只接触一个简单的模块，甚至只是测试一个稳定模块的维护性开发，而不是通盘理解，不能说是测试过复杂系统。有从头到尾接触一个完整项目的经历很宝贵。 测试的底子-基础知识对照三本书：《ISTQB基础教程》 《高级软件测试设计》 《高级软件测试管理》（后两本是ISTQB的高级认证教程）。这里边的内容你都能熟练应用（真的是熟练应用，而不只是有概念），你就能超过80%以上的应聘者了。面试过数百人，我经常会问几个问题：如果测试时间不够，你会怎么办？ 如果让你去测试一个你完全不熟悉的系统，你会怎么办？你平时会使用那些测试设计方法？ 看似很稀松平常的问题，非常考验人。因为大部分从业者都没有经受过系统训练和学习，工作多年，依然技能不足，意识跑偏。 熟练使用一门主语言满足这条，你就超过了70%的应聘者。什么叫做熟练呢？拿Java来说吧：系统学习过Java的教程，高频面试50题 这样的题可以自测一下，可以回答上35个以上；熟悉最主流的Spring框架，能够写出一个简单的网站，实现基础的Restful 服务；读懂过一个测试框架，如mockito或者Junit的源码；能够熟练实施接口测试（基于一些测试框架 如：rest-assured+Junit）；能够读懂开发的业务代码，对他们的代码进行Code Review； 对一门语言有比较深入了解满足这条，你就超过了90%的应聘者。什么叫有深入了解呢？还拿Java来说吧：熟练使用Java的常见API；深入理解基于语言特性/系统特性的知识，如Collections的实现机制、类型系统、I/O、网络、多线程等；熟知设计模式（广义范围的设计模式，不局限于GOF的设计模式）；熟悉JVM的工作模式；熟练使用调试排查工具解决性能问题；熟练掌握市面上常见的脚手架；熟练掌握周边知识（OPs相关，网络知识相关）有不错的实战开发经验（做过真正被生产检验的东西）；对于测试开发，AOP，Java字节码技术是很重要的知识。。。 这是一个很长的学习list，需要几年时间来养成。做到这点，其实你可以胜任普通的开发岗位了，这也是高级测试开发岗位的技术底子。 在一个领域知识有不错的了解人不可能什么都懂，但工作几年之后，会在工作的域内一定要有积累才行。例如，你测试一个核心电商系统的交易模块三年了，业务上你一定要熟练讲出来：商品列表、购物车、下单、退单、废单、支付、发货、库存、退款、优惠使用等等一坨业务流程，和可能出现的常见的坑（各类问题产生的资损、各类问题产生的服务不可用、逻辑矛盾），不然根本无法体现你经验沉淀和深入思考；技术角度上，你要能够画得出来系统的交互图，熟悉最核心的接口和最核心的参数，能够读懂开发的代码，熟练使用trace和监控工具，诊断定位线上问题到代码行。 用技术保障质量的能力测试开发岗一定会问到一个问题：你能够举一个你用技术手段提高测试效率，增强测试能力的例子么？这是面试时最大的一个坎。 很多人会讲一些自动化测试回归的例子，但是真正成功的例子非常少，因为为什么做，怎么做都没有想好就照网上一个教程攒了一个，结果变成了玩具。 做好自动化，不仅仅是会使用工具、框架，其实要对被测物特性，软件生命周期有很深的理解并且有很强的开发知识才行。实际上，在环境、CI、数据、测试用例生成、数据比对的很小的一些点上，都能有不错的提效产出，从这些点能够做得好，会得到不错的加分。有一个不错的成功案例，你胜出的几率就超过了80%，没有短板，就十拿九稳了。 技能以外的东西- 实战案例以前的工作印证了你的能力。能够讲清楚一件特别拿得出手的工作，证明你能力的工作能力是面试时候最有用的投名状。 技能意外的东西 - 你的个人特质一般有如下特质会大大加分：快速学习、系统性学习、学以致用、系统性思考、强大的推动力、技术思维、突出的沟通能力、条理性、抗压性、乐观精神、抗挫折能力、迅速调整的能力、迭代改进的意识、ownership、愿景和规划。 这些特性体现人的内核，有强大内核的人，做什么都行，技能暂时不足，也一定能补足。所以，在招聘的时候往往对是否录用的判断起决定性作用 高段位要求（高级职位需求）计算机领域知识的通盘理解这条范围非常大，人不可能什么都懂。但最最基础的知识是不能有盲点的：操作系统工作基础原理与基础操作：如linux，要通读过linux操作系统的书，熟悉最基本的概念，基本命令要熟悉，shell要能写和读；网络知识特别是TCP/IP, HTTP知识：推荐两本书 《图解tcp/ip》 《图解Http》这两本书里的东西要懂。数据库知识：市面常见数据库（redis，mysql，oracle）的常见DBA操作，问题排查；SQL的熟练使用；Web及移动端知识：能够懂HTML，CSS，能够读懂Javascript代码，能够读懂Android或者iOS的代码，做简单开发最好。安全知识：常见的安全防护方法、工具使用；基本的安全攻防原理；软件工程/开发过程管理：实战中各种磨练，建议系统的学习PMP，敏捷开发的一些认证课程。 在一个域的深耕人不可能什么都懂，但在一个领域是需要深耕的。比如，在做了四、五年移动端测试以后。android和iOS都要具备一定的开发能力了，能读懂开发的业务代码是最基础的，能够代替开发实现部分业务功能，完成部分组件开发是个非常好的自检点。能够对移动端自动化工具栈、监控工具栈（如友盟、bugly、newrelic等）、内存泄露检测、卡顿检测、耗电量、弱网、流量、埋点、灰度、版本控制、兼容性、用户体验、安全等等的质量保障方案有通盘搞定能力。什么叫搞定呢？举个例子：比如，使用多种手段把崩溃率降低到千分之一以下。对于一个小团队，这是个很不容易实现的坎。做到这点，你需要了解如何收集崩溃率，如何使用一系列工具来定位核心问题，如何推动开发改动，并且预防（静态代码扫描工具引入，阻止乱用第不成熟的第三方插件，代码reivew防止常见pattern如空指针引发的崩溃，推动开发养成良好的log习惯，推动移动端防御性编程编程开发习惯，推动后端开发按照规范吐接口，帮助开发引入内存泄露、卡顿工具，趋势报表，警钟长鸣，各种灰度方式设置，线上监控。。。一个数据的改观，背后要有大量的质量相关工作）。 使用综合手段来保障软件质量提升效能的能力。听起来很抽象，举几个例子吧。例子1：你所在的team总在被开发抱怨测试用的时间太长。如何能缩短一下测试时间呢？通过调研，发现测试小伙伴诟病的最多的就是环境不可用。环境到底多不可用呢？你基于Grafana和Prometheus做了一个环境可用的监控报表，使用后，发现环境在工作日整体可用率只有35%左右，主要原因是：几个核心热点应用经常挂了没人管。你拉了整个team，明确了部署责任人，约定了部署规则：只能中午饭和晚饭时间部署，并且部署后要自己看一下是不是OK。一周后，环境可用度上升到了65%。再深入分析，发现2个同学不守规矩，总是他们在破坏规则，你去找他们单独谈话。一周后，环境可用度上升到了80%。还是有少量人不守规矩。你找SRE的同学提需求，做了部署卡点，非部署时间部署必须TL审批。一周后，环境可用度上升到了85%。有些TL也不守规矩。你建了个报警，环境乱部署，坏掉了，在大团队的群里@全体，告知谁搞坏了环境。一周后，环境可用度达到了92%。你加了一个feature：应用挂了一段时间无人响应，自动重启服务功能，仍然有问题，就自动回滚上一版本。你推动了开发解决了某个应用启动时间过长的问题。你推动了环境分组。你推动了测试环境版本上线的规范流程实施。你推动了冒烟自动化用例卡点。你推动了环境部署人备份机制。你推动了全员基础环境部署培训。你总结了部署手册。你做了。。。。。最后，环境可用度稳定到了97%以上。你为测试节省了60%以上block时间（原来可用度未35%） 例子2：上面的问题，除了环境，还有一个槽点：开发提测质量不高。测试的头几天，很多主流程都走不通，导致测试总是在等待，或者是跟着开发一起联调。而这段时间，已经被习惯性的认为是测试时间了，因为：提测了。 你推动了：测试提供冒烟用例，开发必须完成一定程度的自测才能提测。你推动了：测试和开发做自动化同期共建，在开发过程中，核心功能就被自动化用例保护起来了。你推动了：开发切分feature提测，而不是攒一个大招一下子提一坨。你推动了：代码Codereview变成团队常规活动，QA在早期跟进核心代码，把问题坑杀在萌芽阶段。你推动了：外部资源联调非常早的进行，不会让它在测试后期成为测试blocker。。。。 例子3：你发现测试时间长，QA自己也有问题。 你推动了：有明确的测试计划，并让所有干系人都有明确的预期。你推动了：测试依据风险测试，最大的风险得到最快的cover，科学分配时间，明显缩短bug反馈时间弧。你推动了：bug严格管理，所有重要bug都及时修复。你推动了：良好的沟通和汇报机制，每天让团队主要干系人清晰的知道，距离发布还差多远。你推动了。。。。 你能讲出自己做过5个以上这样的成功例子，我敢保障，你会被1线大厂疯抢。职级基本都是专家起。 持续学习能力和复杂问题解决能力例子1：你近期的工作是帮助团队提升后台服务稳定性。你看到了netflix内部使用一个叫做ChaosMonkey的东西来随机对生产服务期进行攻击，而逼迫工程师提高稳定性，所以，你也实现了类似（更温和）的内部机制，推动团队稳定性的提高。你怎么知道这个叫做ChaosMonkey的东西呢？ 因为你会习惯性浏览一线厂商的技术博客，参与行业大会，关注各类新技术。持续性的养成习惯。 例子2：做大规模接口自动化好难，外部数据依赖太难搞，参数构造太费劲，assert太难写。如果能够简单的录制回放就好了。但是，外部依赖是个天坑，写操作mock也是个天坑，assert也是个天坑。实际的案例是，经过几年多个团队持续不屑的填坑，阿里内部已经有应用级的录制回放工具了，数百个应用成功的是用了它，把不可能回归的任务变成了可能（上万数量级的case当天生成，当天投入使用，并可以分析覆盖率），自动化测试实施需要付出的工作时间革命性降低（不足原来付出时间的10%）。 你能讲出自己做过5个以上这样的成功例子，我敢保障，你也会被1线大厂疯抢。职级基本都是专家起。 其它能力测试是个万金油，高阶一些的职位需要什么都要会一些 ，因为越高阶的职位需要解决的问题越综合，需要打交道的人的种类越多。不然很容易变成你职业短板，做个list吧（一定不全）：很好的项目管理能力，至少与开发经理能力同级，甚至要强于他。一定的软件架构能力。一定的产品sense：可以跟一个资深的产品经理能够顺畅的交流，明白知道他为什么会这么想，所要实现产品的意义，路径；从产品质量方面的考虑要超过产品经理，给他输出。极好的沟通能力。团队管理能力（这个太重要）目标管理能力有一个好的内核（上面提到过） 怎么转型/怎么进阶？其实不难，没有什么高端的方法。下面这4条就够了，核心秘密就是坚持不懈。 熟悉你的被测系统，熟悉你的被测系统，熟悉你的被测系统。 能够从技术、业务角度做到对被测系统熟悉是做一个好QA的最基本职业素养，也是能力提升的最主要源泉。自检点：我能够画出系统的架构图么？我能够读懂开发的代码么？我熟悉常见的业务监控系统么？熟悉日志系统么？知道开发是如何调试和定位问题的么？给我一个线上问题，我能定位么？我能给别人完整的介绍这个域的核心业务么？我能自己直接动手发布上线一个系统么？知道如何回滚么？灰度是如何做的？ 我知道所有关键的技术点么，如一个交易的幂等性是如何实现的？我在团队中有：“这家伙对系统最熟”的口碑么？如果自检点全部是否定答案。。。 花一年时间把它全变成肯定答案。这一过程，你一定被迫学到了很多很多，并且获得了极为长足的成长，这是进阶的必由之路，也是卡了很多人的地方。 如果说做不到，后面不用看了，前面的也全部忘掉吧。方法：通读所有文档，强迫自己读代码，积极参与开发所有讨论，不懂的狂问，观察开发如何上线，如何排查问题，模仿，学习，善用搜索引擎，总结。。。 找到问题解决问题，找到问题解决问题，找到问题解决问题。 你一定有一堆问题，如果你觉得自己做得挺好，没有问题要解决，那必然是你自己有巨大的问题！自检点：找一支笔，写出你觉得质量方面，你的team的10个问题，做排序。排出最重要的3个。方法：找到top3的问题，选一个，列个接话，去解决。如果找不出来，使劲去观察，然后去看看做的好的同行，比比你比人家差在哪里。尝试去解决这些问题，从小问题，能够见到效果的问题入手，设置一个时间点。你真正解决了5个以上问题以后，感觉一定会有。 系统学习，系统学习，系统学习 自检点：我系统的学过一门知识么？我能讲清楚我这么操作，我写的这行代码的原理么？方法：从工作出发，确认你需要补足哪些知识。从网上找一个具体知识的学习路线图，订个计划，照着来。 参加学习小组，找到帮你解决难题的人，多请他吃饭，多请教他。获取知识后，马上回到工作中做检验。还是学以致用才能有所增长。结合工作来系统学习的效果是最好的。再举个例子：上家公司有个小伙伴（他应该也会泡这个社区），开始应聘的时候，他说熟悉jenkins，用的很多。所以第一份工作是：把所有CI的日常工作交给了他，并告知2个月内要全部搞定。 他一下懵逼了，原来那些不深入的理解支撑不了工作要求。后来他每天死磕，看了jenkins所有的文档（对，几乎所有文档通读了一遍），翻了无数问题的解决帖子，记录了上百个问题解决的过程，写了上百篇jenkins的小blog（现在还没公布出来）。几个月以后，他比我熟了，他的一项基础能力成长为：可以独自给一个小公司完整的搞定前端、后端、移动端的一整套CI解决方案。其实单凭这一套，就能找到不错的工作了。这是依托工作，系统性学习的结果。 看到有同学说要裸辞，去接受培训。我的建议是，别这样。裸辞你就失去了学以致用的阵地，失去了真正解决问题的机会，还失去了资金来源。依托工作，自主学习是王道。自己饶过不去坎，其实有很多网上教程和脱产培训班啊。 选择有挑战的团队，选择有挑战的团队 自检点：在团队里有很多人比我强么？周围的同事都是我佩服的么？我做的事儿有挑战么？ 方法：如果这三点都是否定的，并且你处于职业生涯的早期。也许（只是也许），你该考虑一下换个团队了。总结偏重技能角度讲了讲市场的需求和QA如何做如何满足市场需求。行文仓促，认识有限，其实也并没有什么新东西。欢迎讨论拍砖啊：） 最后放一篇老文，前google测试总监写的，写了快10年了，但我觉得常读常新。 ———————————————————–我是分割线——————————————– 经营成功的测试职业生涯(James A. Whittaker） 你是如何开始做测试工作的？1989年，我在田纳西大学读研究生的时候，完成了从软件开发人员到软件测试人员的转型。而这一转型并非出于我自己的选择。我命运的改变发生在一个早晨，我的教授质问我为什么缺席那么多开发会议。我解释说因为会议被安排在星期六早上，很不方便。 而怍为一个生平第一次离开家的新入校的研究生，这个时间段有些麻烦。十分有意思的是，等待我的惩罚并不是一纸解聘通知书，而是被判罚为该小组的唯一一个测试人员，且不能与开发团队有任何交流。 对于我的职业生涯来说，这是一个意义多么重大的决定啊！正是这个决定最终成就了几十篇关于测试的论文，构建了多得连我自己也记不清的各种工具，出版了五本书，带来了无尽的快乐工作时间。测试一直就是我拥有的那份具有创造性和技术挑战性的快乐职业。不过，并不是所有人都喜欢这样。可以说我最早接触测试是在攻读研究生期问，不可否认，那时的高强度学习和工作确实让我受益匪浅。另外，我认为从初学者阶段到专家阶段之间存在着一个“测试的山峰”，人们需要通过一系列个人辅导、获取信息和接受常规指导来翻越山峰。成为一个测试初学者是很容易的，成为职业的测试人员也并不艰难。本章的重点正是讨论如何翻越那座位于职业测试人员和测试专家之间的山峰。 回到未来在软件测试领域，时间似乎已经停滞了。我们在21世纪做事的方法与上个世纪几乎完全相同。Bill Hetzel在1972年出版的测试知识丛书至今仍然相当有价值。而我自己所写，于2002年首次出版的How to Break Software(如何攻破软件)系列，到今天仍被作为实用软件测试技术主要资源的代名词。 确实，如果我们可以把20世纪70年代的测试人员转换时空用在今日，我猜想他们的的技巧足够应付现代软件的测试。当然，他们需要学习网络和各种网络协议，但是他们拥有的实际测试技术将能得到很好的应用。如果从20世纪90年代找一个测试人员，则不几乎不需要任何训练。 对于开发人员来说，却不是这样，他们所掌握的那些上世纪的技巧几乎已经完全过 时。让一个有一段时间不写代码的人重新开始编程，看看会有什么样的反应。让我感到很不安的是，我们可以从马路上直接雇用人手，而雇来的这些人从第一天起就能够测试，就能够有收获。事情真的有那么简单吗？或者是我们的期望值只有那么低？让我更加不安的是，我们没有任何可预测的方式将合适的测试人才从胜任工作状态训练为测试专。测试真的就那么困难吗？ 这又是那个山峰了。门槛很低，但通往精通的道路却很艰难。 在通往测试山峰的入口，我们倚仗的是这样一个事实：测试的很多方面都很容易掌握。大多数人都可以学得有模有样。甚至只要将一点点常识应用于输入的选择,就可以找出缺陷。这个层次的测试就如同在桶里钓鱼，简单到足以让任何人都认为自己很聪明。然而过了入口以后，道路迅速陡峭起来，而测试知识变得越来越晦涩难懂。我们发现有人擅长于此，我们称这些人为“有天赋的人”，并欣赏他们的本能。 难道一定要依靠本能么？对于那些看起来不具备特长的人们，是否存在着一条翻越山峰的途径？是否可以以某种方法传授测试技能以培养出更多的专家呢？为认为这座山峰是可以通行的，而这一章正是我关于应该如何走这条路的笔记，你可以在自己的职业生涯中加以应用。这并不是一份食谱配方，一份职业生涯烹调书。不过你可以做一些事情来加速你的职业成长。但是，正如你可能已经猜到的，真正是说来容易，做起来难。 上山测试职业的早期阶段主要是为征服测试山峰的漫长攀登做准备。我所能给出的最好的建议是从两个方面来思考问题。对于你参与的每一个项目，都有两部分（不一定相等）的任务。第一部分的任务是保证当前的测试项目获得成功。而第二部分的任务是学习你应该做些什么以便使下一个测试项目更加容易。我把它称为“测试今天的项目，准备明天的项目”。如果你做每一个项目把它都分割成为上述的两半，那么几乎可以保证你能持续获得进步。这样，你就可以随着每一个参与的项目逐渐成长为更优秀的测试人员。 现在就让我们来关注第二部分的任务——为下一个项目做准备。我们需要注意三个概念：重复、技术和漏洞。 重复做任何一件事，绝不要重复两次而不意识到或质疑这其实是个问题。我希望所有年轻的测试人员都牢记这一点。我见过很多初学者，他们在单调的任务上浪费了太多的时间，比如，设置测试机器，配置测试环境，在实验室里安装待测试的应用程序，选择一个产品版本来测试-这些任务列表可以变得很长，最后你会发现真正花在测试软件上的时间少得可怜。 这是许多新手常犯的错误。他们没能看到他们日复一日所做的工作的重复本质，儿当他们意识到这种重复时，几个小时已经过去了，而在这几个小时内他们没有做任何实际的测试工作。关注这些重复劳动，并且留意由此造成的真正的软件测试工作时间的流逝。为了能翻过测试的山峰，必须做一个测试人员应该做的工作，而不是实验室管理员或者测试机管理员的工作。 测试自动化是解决重复劳动的方案，也是本章稍后的主题。 技术测试人员常常会对软件失效进行分析。分析缺陷时，我们从开发人员的失败中学习如何编写可靠的代码。我们也分析那些被我们忽略的缺陷。在应用程序上市以后，客户就会开始报告缺陷，我们将要面对处理一大堆失效的情形并寻找其中的重要缺陷。用户报告的每一个缺陷都说明我们的流程有问题，我们的测试知识还不够完善。 但是分析我们的成功也同样重要，儿许多新入职的测试人员却没能利用这个唾手可得的资源。我们在测试中找到的每一个缺陷都说明我们的的测试流程正在有效工作，都是一次成功。我们需要紧紧抓住这种绝好的机会，只有这样才能使成功不断的重复下去。 运动队常常这样做，他们会观看比赛录像，并分析每一个动作为什么奏效或者为什么不奏效。我清楚地记得一个小故事，我的一个朋友拍下了我儿子踢足球的一些照片。其中一张照片记录了她踢球的瞬间，那个球超过对方守门员成功进球了。当我把它给我儿子看时，我之处他站立的那条腿的姿势非常完美，他踢球的脚尖紧绷且出球点在鞋带间恰到好处的位置上。他盯着那张照片很长时间，从那以后他很少用不正确的姿势踢球。他那次得分可能只是碰巧做对了，但从此以后他有意识的运用这些技术使之接近完美。 现在回到新手测试人员的课程上来。我们每一个人都会有得意的时刻。我们找到重要的漏洞或发现优先级很高的缺陷，并为此雀跃不已。不过先花点时间考虑一下整体状况。我们使用什么技术找到了那个缺陷？我们是否可以创建一种方法来找到更多这类缺陷？我们是否可以记住…些实际的测试经验并不断地加以应用来帮助提高我们的工作效率？软件的哪些症状可以提示我们它具有缺陷？我们将来能否从那些症状中得到更多的警示？换句话说，这不仅仅是一个缺陷或是一次成功，这个缺陷教会了我们什么，是否使得我们将来成为更好的测试人员正如我儿子的进球一样，尽管第一个缺陷是偶然间发现的，但它不代表其余的成功都是偶然。理解我们成功的原因很重要，只有这样做，成功才能被复制。对于测试人员来说，这种保证成功的原因就是一系列的测试技术、建议和工具，它们可以提高我们在未来项目中的工作效率。 漏洞测试人员最终都会变得很擅长寻找缺陷，但是要翻过测试的高峰，我们必须更快并且更有效率：高速低阻。换句话说，我们必须拥有一种本身不含缺陷的缺陷查找技术！ 我喜欢这样来考虑问题：测试人员检视自己的工作时也需要发挥那种寻找缺陷的能力。我们必须使用和寻找产品缺陷一样的流程来寻找我们自己的测试流程，测试过程中的缺陷。我的测试流程是不是有问题？这里面是否有缺陷？这里是否存在着妨碍我提高效率的障碍？ 你必须一直寻找更好的方法。有意识地去确定那些限制能力、阻碍前进、减缓速度的东西。就像缺陷限制了软件满足用户需求的能力一样，是什么限制了测试的能力？使用你拥有的测试能力来最优化自己的测试流程，这会帮助你在测试的山峰上快速攀登并增加你翻越山峰后成为专家的机会。 测试山峰的巅峰处是一个美好的地方。如果你成功地到了那里，恭喜你．但这并不是最终日标。这表示你已经成为一个杰出的测试人员。而此时的下坡路就是用你的洞察力和专家知识来帮助周围的人也成为优秀的测试人员。自己一个人登顶是一回事，帮助其他人（那些能力不如你的人）登顶却完全是另外一回事。 一般来说，那些成功登上测试巅峰的人会成为使用工具的大师。那些商业工具、开开源免费工具,和自己写的工具（我个人最喜欢的工具）是极好地提高工作产出、增加工作成效的方法。不过，工具只是实现该目标的一种方法，但在许多其他方面它反而是一种限制，因为太多的人看不到工具的功能之外的东西。他们被限制在工具能为他们所做的事情中，没能看到或理解对工具还有更多的需求。登顶需要真正掌握的是“信息”。因为很多工具能处理信息，并使得信息的获取更加容易，所以测试人员变得过于依赖于他们的工具。但是信息本身以及如何利用这些信息才是真正的成功关键。 熟练掌握信息，指理解有哪些信息，这些信息将如何影响测试，保证最大限度地利用这些影响。有几类信息是测试登顶者必须关注的。这里我要谈的是其中两种：来自应用程序的信息和来自之前测试的信息。 来自应用程序的信息包括需求、体系结构、代码结构、源代码……甚至是关于应用程序在执行时做了哪些事情的运行信息。在编写和执行测试用例时，需要考虑这类信息，但信息的多寡在很大程度上取决于测试人员的能力，这是一种能够使测试更高效的能力。在测试中使用这类信息越多，测试就越偏向于工程而不是猜测。 在微软，我们有一个游戏测试组织（Games Test Organization,GTO），负责Xbox和PC游戏的测试。谈到利用应用程序的信息，他们是最优秀的。游戏是难以想象的丰富，测试起来非常复杂。游戏中很多可测试的内容都是隐藏的（因为让那些玩家找寻可以交换的物品正是游戏的乐趣之一）o如果GTO的测试人员所做的仅仅是玩游戏，那么他们找到的问题不会比最终用户更多。为了能做得更好，他们与游戏的开发人员合作创建了一些信息控制板，这些控制板暴露了一些基本上可以算得上作弊的信息给测试人员。这样，测试人员就能提前知道怪物会被投放在何处、物品被隐藏在哪里，他们可以看到墙的另一边，可以控制敌方的某些行为。他们的作弊工具（即测试工具）基本上使他们成为游戏里的神，让他们可以控制看到的信息以便更快更巧妙地测试。这个例子给有测试人员都上了一课。 来自测试的信息意味着你必须关注在测试时所做的一切，并使用获得的信息来影响今后的测试。你是否知道你的测试是如何与需求结合的，知道何时某一特定需求已经得到足够的测试？你是否使用代码覆盖率来影响未来的测试？你知道当代码更新或缺陷修复时那些测试会受到影响，还是知识重新运行所有的测试？理解测试进行到什么程度并随着测试调整测试策略，这是测试成熟的标志。 我以前曾在微软的Visual Studio的一个小组工作过，我们大量使用代码改动量（由于添加新特性或修复缺陷而改变的代码）和代码覆盖来影响我们的测试。我们花了很大的力气将代码覆盖和代码改动量通知测试人员，帮助他们理解哪些测试用例对覆盖率有贡献，帮助他们测试改动过的或修改过的组件。最终的结果是在代码确实被改动时，我们清楚地知道哪些测试会被影响而只重新运行那些测试。我们还知道每个新的测试用例是如何对总体的接口，特性和代码覆盖率产生作用的，从而指导我们的测试人员，让团队中的每个人在他们所创建的所有测试用例基础上，写出更有意义的测试。 你用哪些信息来指导你的测试？你如何保证信息是可获取的，以便在测试中随时可以得到？你如何使得信息变得有用，以便它能以良好的方式影响你的测试？这些问题的答案将决定你在走下专家测试山峰时的前进速度。 下山到达测试山峰的顶峰的时候，你已经成为一个十分能干的测试人员了，能力也许相当于你组里所有同事能力的总和。无论你在做什么，请不要试图做得比你的整个团队都好，不管你对此感觉有多好，或是你的老板对你遏得有多紧。一旦你走在下坡的路上，就不要再去争取“找到最多缺陷的人”或是“找到最有意义缺陷的人”这样的荣誉头衔。反而我推荐你减少花在测试上的时间，而把创新作为你的首要任务。 在测试上创新指不急于向前，而是仔细观察、洞察先机、找到瓶颈并改进团队中所有其他人的工作方式。你的工作变为帮助其他人进步。在微软，我们有一个专门为此而设的正式职位——测试架构师。不过，不要因为缺少一个很酷的头衔而让你沮丧。无论别人怎么称呼你，当你在“下坡的路上，你能做的最好的事就是尽量保证更多的人能成功地爬上山峰的另一侧。 原文地址 聊一聊职业发展]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Grafana展示Jmeter数据]]></title>
    <url>%2F2018%2F09%2F27%2F%E4%BD%BF%E7%94%A8Grafana%E5%B1%95%E7%A4%BAJmeter%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[Jmeter对接Grafana 使用jmeter进行压测，压测过程中的测试结果，直接使用聚合报告的话，看的不是很直观，jmeter自带的插件，出的图和zabbix原生的图一样的很丑。。。所以，在万能的互联网上找了找使用Grafana展示jmeter结果的方案 Jmeter + Influxdb + Grafana整个方案，就是讲jmeter产出的结果，存储到Influxdb中，然后用Grafana展示Influxdb的数据。 配置Influxdb和Grafana的安装就不说了，之前写过；直接说配置 InfluxdbInfluxdb配置文件在/etc/influxdb下，1vim /etc/influxdb/influxdb.conf 找到graphite项，修改：12345678[[graphite]] # Determines whether the graphite endpoint is enabled. enabled = true database = &quot;jmeter&quot; # retention-policy = &quot;&quot; bind-address = &quot;:2003&quot; protocol = &quot;tcp&quot; consistency-level = &quot;one&quot; 重启influxdb,systemctl restart influxd 新建jmeter数据库，在chronograf中或者进服务器，influx进influxdb控制台手工创建：CREATE DATABASE &quot;jmeter&quot;,在grafana中添加上这个influxdb即可 JmeterJmeter其他脚本步骤和之前一样，线程组中添加一个组件：监听器-Backend Listener，修改graphiteHost地址为influxdb的IP，其他值可以默认 验证执行一次请求，可以到influxdb数据库中查看是否生效use jmeter;,show measurements即可123456789101112131415161718192021222324252627282930313233[root@localhost zabbix_agentd.d]# influxConnected to http://localhost:8086 version 1.6.1InfluxDB shell version: 1.6.1&gt; use jmeter;Using database jmeter&gt; &gt; &gt; &gt; show measurements;name: measurementsname----jmeter.all.a.avgjmeter.all.a.countjmeter.all.a.maxjmeter.all.a.minjmeter.all.a.pct90jmeter.all.a.pct95jmeter.all.a.pct99jmeter.all.h.countjmeter.all.ko.countjmeter.all.ok.avgjmeter.all.ok.countjmeter.all.ok.maxjmeter.all.ok.minjmeter.all.ok.pct90jmeter.all.ok.pct95jmeter.all.ok.pct99jmeter.test.endedTjmeter.test.maxATjmeter.test.meanATjmeter.test.minATjmeter.test.startedT 这样就成功将数据加到influxdb里了 grafana配置添加dashboard，正常添加图形，数据库选择influxdb中jmeter的数据库,SELECT项选择想要展现的栏即可12345jmeter.all.h.count 所有请求的TPSjmeter.&lt;请求名称&gt;.h.count 对应&lt;请求名称&gt;的TPSjmeter.all.ok.pct90 90%的请求响应时间jmeter.&lt;请求名称&gt;.ok.pct99 对应&lt;请求名称&gt;99%的请求响应时间 jmeter.all.test.startedT 线程数 参考Blog]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7搭建单机Redis]]></title>
    <url>%2F2018%2F09%2F26%2FCentos7%E6%90%AD%E5%BB%BA%E5%8D%95%E6%9C%BARedis%2F</url>
    <content type="text"><![CDATA[Centos7搭建单机版Redis 工作需要，需要一个redis服务器来做缓存数据库，作为一个当下风靡的工具，至少还是应该知道怎么搭建本次介绍内容为单机版搭建过程，集群部分，还没实践过，， 工具准备首先Centos7服务器，然后装个wget，开始 安装包下载https://redis.io/download官网下有很多版本，正常下载稳定版即可，当然，Beta版可能也有很多优化可以装了试试。1wget http://download.redis.io/releases/redis-4.0.11.tar.gz 编译安装1234567tar -zxvf redis-4.0.11.tar.gzcd redis-4.0.11makemake install 安装完之后，根据内部既定的shell脚本，会在/usr/bin目录下自动创建好redis的可执行文件：123456-rwxr-xr-x. 1 root root 2450840 Sep 26 16:04 redis-benchmark-rwxr-xr-x. 1 root root 5742360 Sep 26 16:04 redis-check-aof-rwxr-xr-x. 1 root root 5742360 Sep 26 16:04 redis-check-rdb-rwxr-xr-x. 1 root root 2605120 Sep 26 16:04 redis-clilrwxrwxrwx. 1 root root 12 Sep 26 16:04 redis-sentinel -&gt; redis-server-rwxr-xr-x. 1 root root 5742360 Sep 26 16:04 redis-server redis的启动和很简单，在/usr/bin目录下执行redis-server即可启动；redis-cli SHUTDOWN即可停止 服务化通常在Linux下启动都原因是使用服务的方式启动，比如启动nginx和MySQL：systemctl start nginx和systemctl start mysql那也可以把redis配置到服务中，使用类似的方式来启动redis chkconfiglinux的服务通过chkconfig来管理，可以先执行下chkconfig来查看当前系统已有的服务：123456789101112131415[root@izuf65tvx7it01x88bzbp5z ~]# chkconfigNote: This output shows SysV services only and does not include native systemd services. SysV configuration data might be overridden by native systemd configuration. If you want to list systemd services use &apos;systemctl list-unit-files&apos;. To see services enabled on particular target use &apos;systemctl list-dependencies [target]&apos;.aegis 0:off 1:off 2:on 3:on 4:on 5:on 6:offagentwatch 0:off 1:off 2:on 3:on 4:on 5:on 6:offcloudmonitor 0:off 1:off 2:on 3:on 4:on 5:on 6:offnetconsole 0:off 1:off 2:off 3:off 4:off 5:off 6:offnetwork 0:off 1:off 2:on 3:on 4:on 5:on 6:off redis服务化想要将redis服务化，就需要将redis 的启动脚本加到系统服务中去，而系统服务的脚本存储路径是/etc/init.d，也就是，只需要将redis的启动脚本加到/etc/init.d文件夹下，再添加到chkconfig即可。 在之前下载的redis源码下有个初始化脚本文件redis_init_script（路径：路径/redis-4.0.11/utils），将这个文件拷贝到/etc/init.d下并且命名为redis_自定义的端口（例如redis_6379）1cp /路径/redis-4.0.11/utils/redis_init_script /etc/init.d/redis_6379 然后进入/etc/init.d目录，修改初始化脚本vim redis_637912345678增加（头部，第3行后增加即可）# chkconfig: 2345 90 10 # description: Redis is a persistent key-value database修改REDISPORT=6379 （大约第六行） 效果差不多是这样：123456789#!/bin/sh## Simple Redis init.d script conceived to work on Linux systems# chkconfig: 2345 90 10 # description: Redis is a persistent key-value database# as it does use of the /proc filesystem.REDISPORT=6379 修改配置首先创建放置配置文件的文件夹：1234mkdir /etc/rediscd /varmkdir -p ./redis/6379(端口号) 将源文件下配置文件模板路径/redis-4.0.11/redis.conf复制到/etc/redis目录下，并且以端口号重命名：1cp 路径/redis-4.0.11/redis.conf /etc/redis/6379.conf 修改配置文件：1234port 6636 （第92行）daemonize yes （第136行）pidfile /var/run/redis_6636.pid （第158行）dir /var/redis/6379 (第263行) 保存退出。 添加服务一条命令即可：1chkconfig redis_6379 on 这样就可以使用service redis_6379 start来启动redis了，同样service redis_6379 stop 效果：12345[root@localhost redis]# service redis_6636 startStarting Redis server...120037:C 26 Sep 16:18:04.701 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo120037:C 26 Sep 16:18:04.701 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=120037, just started120037:C 26 Sep 16:18:04.701 # Configuration loaded 原理其实，用服务启动redis，就是使用将启动脚本加到chkconfig，启动/etc/init.d下的redis_6379脚本，根据脚本中的配置12345EXEC=/usr/local/bin/redis-serverCLIEXEC=/usr/local/bin/redis-cliPIDFILE=/var/run/redis_$&#123;REDISPORT&#125;.pidCONF=&quot;/etc/redis/$&#123;REDISPORT&#125;.conf&quot; 真正的server启动目录：/usr/local/bin/redis-server配置文件路径：/etc/redis/${REDISPORT}.conf再根据/etc/redis/6379.conf内的配置，启动相应的端口，保存到相应的目录等 参考文件 Redis集群搭建Centos下redis搭建]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux查看端口使用情况]]></title>
    <url>%2F2018%2F09%2F20%2FLinux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%2F</url>
    <content type="text"><![CDATA[Linux 查看监听端口 netstatnetstat命令常用参数说明（有事没事man netstat查看完整参数）123456789-n：直接使用ip地址，而不通过域名服务器-l：仅显示监控中的服务器的Socket-p：显示进程PID和进程名称-t：显示TCP端口-u：显示UDP端口 常用命令配合grep可以很方便查看当前服务器上监听的端口，方便查询服务是否正常启动1netstat -npl | grep 5001 查看5001端口使用情况 1netstat -nplt 查看所所有TCP协议端口使用情况]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>netstat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jmeter分布式环境搭建]]></title>
    <url>%2F2018%2F09%2F17%2FJmeter%E5%88%86%E5%B8%83%E5%BC%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Jmeter分布式环境搭建 本地机器配置限制，并发线程数达不到性能要求时候，就要考虑搭建jmeter分布式环境来进行压测 原理1、Jmeter分布式测试时，选择其中一台作为调度机(master)，其它机器做为执行机(slave)。 2、执行时，master会把脚本发送到每台slave上，slave 拿到脚本后就开始执行，slave执行时不需要启动GUI，我理解它应该是通过命令行模式执行的。 3、执行完成后，slave会把结果回传给master，master会收集所有slave的信息并汇总。 示例有三台机器，ip分别为：192.168.3.1,192.168.3.2,192.168.3.3；其中192.168.3.3作为调度机，启动GUI界面 执行机（slave）配置前提条件是执行机所在服务器已经搭建好jmeter执行环境，并且有安装jmeter（建议执行机和调度机jmeter版本完全一致，省的麻烦）进行执行机中（192.168.3.1,192.168.3.2）jmeter安装目录1，编辑jmeter.properties，找到server_port=1099，以及server.rmi.localport=1099修改端口,修改server.rmi.ssl.disable=true；该端口就是启动jmeter-server.bat之后，控制台显示的端口，也是调度机调度的端口 2，启动jmeter-server.bat，控制台打印信息类似：12Created remote object: UnicastServerRef2 [liveRef: [endpoint:[192.168.3.1:1099]local),objID:[1bfcefd1:165e6dc02e3:-7fff, 2154557740781192439]]] 调度机（master）配置1，找到bin目录下的jmeter.properties，修改配置：12345remote_hosts=192.168.3.1:1099,192.168.3.2:1099server_port=1099server.rmi.port=1099server.rmi.localport=1099server.rmi.ssl.disable=true 保存退出2，启动GUI（jmeter.bat），打开测试脚本，点击菜单栏的运行，选择远程启动全部（或者指定某台执行机） 备注1，如果进行了参数化，需要在执行机上和调度机一模一样的路径放置参数化文件 2，启动执行机时候如果有报错：rmi-keystore.jks（系统找不到指定文件）解决办法：编辑jmeter.properties，修改参数：server.rmi.ssl.disable=true即可]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql开启全SQL执行记录]]></title>
    <url>%2F2018%2F09%2F13%2FMysql%E5%BC%80%E5%90%AF%E5%85%A8SQL%E6%89%A7%E8%A1%8C%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[MySQL记录全执行SQL语句 遇到性能问题时候，排查到数据库部分，一般都是看慢sql，但是有的时候慢sql也看不出什么东西，这个时候，如果可以有办法记录所有执行的sql，那排查起来可以更方便点。 开启日志查询功能1SHOW VARIABLES LIKE &apos;general%&apos;; 返回结果：1234567+------------------+----------------------------------------------+| Variable_name | Value |+------------------+----------------------------------------------+| general_log | OFF || general_log_file | /data/mysql_data/izuf65tvx7it01x88bzbp4z.log |+------------------+----------------------------------------------+2 rows in set (0.00 sec) 可以看出，当前是关闭状态，开启即可：1set GLOBAL general_log=&apos;ON&apos;; 再查一下：1SHOW VARIABLES LIKE &apos;general%&apos;; 返回结果：1234567+------------------+----------------------------------------------+| Variable_name | Value |+------------------+----------------------------------------------+| general_log | ON || general_log_file | /data/mysql_data/izuf65tvx7it01x88bzbp4z.log |+------------------+----------------------------------------------+2 rows in set (0.00 sec) 搞定，这下，调接口之后就会有完成的sql看了。 binlog嗯，这个方式，怎么说呢，自己level太低，不是很看得懂里面记录的，不过binlog文件里记录的的确是全部的sql，最全。binlog使用mysqlbinlog工具来查看。查看binlog状态：1show variables like &quot;%log_bin%&quot;; 返回结果：1234567891011+---------------------------------+----------------------------------+| Variable_name | Value |+---------------------------------+----------------------------------+| log_bin | ON || log_bin_basename | /data/mysql_data/mysql-bin || log_bin_index | /data/mysql_data/mysql-bin.index || log_bin_trust_function_creators | ON || log_bin_use_v1_row_events | OFF || sql_log_bin | ON |+---------------------------------+----------------------------------+6 rows in set (0.00 sec) 就能看见binlog状态以及保存路径了]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jmeter+Ant+Jenkins接口自动化搭建]]></title>
    <url>%2F2018%2F09%2F12%2FJmeter-Ant-Jenkins%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Jenkins+Ant+Jmeter接口自动化实践 虽然之前就搭过了，也用word写过手册，blog因为不放图片就一直没更新，想想还是稍微记录点简单的过程，方便自己以后想起来。 这边记录的只有Ant+Jmeter，jenkins部分，还是有图比较直观，就不写了，不过那部分也很简单。 环境搭建环境不限，linux，Windows都可以 需要工具ant–下载地址：http://ant.apache.org/bindownload.cgijmeter–下载地址：http://jmeter.apache.org/download_jmeter.cgijenkins–下载地址：https://jenkins.io/jdk—下载地址http://www.oracle.com/technetwork/java/javase/downloads/index.html 工具安装1， Jenkins也就解压缩，tomcat或者jar启动2， Jdk安装，配环境变量（JAVA_HOME,path,classpath）(验证：java –version/javac)3， Ant配环境变量（ANT_HOME,path,classpath）(验证：ant –version/ant) Jmeter+Ant首先是扩展包将jmeter\extras下ant-jmeter-1.1.1.jar的jar包拷到ant的lib目录下 配置Ant本地创建接口自动化项目保存路径，例如：E:\InterfaceAutoTestCode\Quartz进入路径目录，手工创建build.xml(ant按照build.xml文件内容执行)build.xml文件内容:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project name=&quot;ant-jmeter-test&quot; default=&quot;run&quot; basedir=&quot;.&quot;&gt; &lt;tstamp&gt; &lt;format property=&quot;time&quot; pattern=&quot;yyyyMMddhhmm&quot; /&gt; &lt;/tstamp&gt; &lt;!-- 需要改成自己本地的 Jmeter 目录--&gt; &lt;property name=&quot;jmeter.home&quot; value=&quot;D:\QA\apache-jmeter-4.0&quot; /&gt; &lt;property name=&quot;report.title&quot; value=&quot;接口测试&quot;/&gt; &lt;!-- jmeter生成jtl格式的结果报告的路径--&gt; &lt;property name=&quot;jmeter.result.jtl.dir&quot; value=&quot;E:\InterfaceAutoTestCode\Quartz\report\jtl&quot; /&gt; &lt;!-- jmeter生成html格式的结果报告的路径--&gt; &lt;property name=&quot;jmeter.result.html.dir&quot; value=&quot;E:\InterfaceAutoTestCode\Quartz\report\html&quot; /&gt; &lt;!--详细报告--&gt; &lt;property name=&quot;detail&quot; value=&quot;_detail&quot; /&gt; &lt;!-- 生成的报告的前缀--&gt; &lt;property name=&quot;ReportName&quot; value=&quot;SmokeReport&quot; /&gt; &lt;property name=&quot;jmeter.result.jtlName&quot; value=&quot;$&#123;jmeter.result.jtl.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;.jtl&quot; /&gt; &lt;property name=&quot;jmeter.result.htmlName&quot; value=&quot;$&#123;jmeter.result.html.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;.html&quot; /&gt; &lt;property name=&quot;jmeter.result.jtlNamedetail&quot; value=&quot;$&#123;jmeter.result.jtl.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;.jtl&quot; /&gt; &lt;property name=&quot;jmeter.result.htmlNamedetail&quot; value=&quot;$&#123;jmeter.result.html.dir&#125;/$&#123;ReportName&#125;$&#123;time&#125;$&#123;detail&#125;.html&quot; /&gt; &lt;target name=&quot;run&quot;&gt; &lt;antcall target=&quot;test&quot; /&gt; &lt;antcall target=&quot;report&quot; /&gt; &lt;/target&gt; &lt;target name=&quot;test&quot;&gt; &lt;taskdef name=&quot;jmeter&quot; classname=&quot;org.programmerplanet.ant.taskdefs.jmeter.JMeterTask&quot; /&gt; &lt;jmeter jmeterhome=&quot;$&#123;jmeter.home&#125;&quot; resultlog=&quot;$&#123;jmeter.result.jtlName&#125;&quot;&gt; &lt;!-- 声明要运行的脚本。&quot;*.jmx&quot;指包含此目录下的所有jmeter脚本--&gt; &lt;testplans dir=&quot;E:\InterfaceAutoTestCode\Quartz&quot; includes=&quot;*.jmx&quot; /&gt; &lt;property name=&quot;jmeter.save.saveservice.output_format&quot; value=&quot;xml&quot;/&gt; &lt;/jmeter&gt; &lt;/target&gt; &lt;path id=&quot;xslt.classpath&quot;&gt; &lt;fileset dir=&quot;$&#123;jmeter.home&#125;/lib&quot; includes=&quot;xalan*.jar&quot;/&gt; &lt;fileset dir=&quot;$&#123;jmeter.home&#125;/lib&quot; includes=&quot;serializer*.jar&quot;/&gt; &lt;/path&gt; &lt;target name=&quot;report&quot;&gt; &lt;tstamp&gt; &lt;format property=&quot;report.datestamp&quot; pattern=&quot;yyyy/MM/dd HH:mm&quot; /&gt;&lt;/tstamp&gt; &lt;xslt classpathref=&quot;xslt.classpath&quot; force=&quot;true&quot; in=&quot;$&#123;jmeter.result.jtlName&#125;&quot; out=&quot;$&#123;jmeter.result.htmlName&#125;&quot; style=&quot;$&#123;jmeter.home&#125;/extras/jmeter-results-detail-report_21.xsl&quot;&gt; &lt;param name=&quot;dateReport&quot; expression=&quot;$&#123;report.datestamp&#125;&quot;/&gt; &lt;/xslt&gt; &lt;xslt classpathref=&quot;xslt.classpath&quot; force=&quot;true&quot; in=&quot;$&#123;jmeter.result.jtlNamedetail&#125;&quot; out=&quot;$&#123;jmeter.result.htmlNamedetail&#125;&quot; style=&quot;$&#123;jmeter.home&#125;/extras/jmeter-results-shanhe-me.xsl&quot;&gt; &lt;param name=&quot;dateReport&quot; expression=&quot;$&#123;report.datestamp&#125;&quot;/&gt; &lt;/xslt&gt; &lt;!-- 因为上面生成报告的时候，不会将相关的图片也一起拷贝至目标目录，所以，需要手动拷贝 --&gt; &lt;copy todir=&quot;$&#123;jmeter.result.html.dir&#125;&quot;&gt; &lt;fileset dir=&quot;$&#123;jmeter.home&#125;/extras&quot;&gt; &lt;include name=&quot;collapse.png&quot; /&gt; &lt;include name=&quot;expand.png&quot; /&gt; &lt;/fileset&gt; &lt;/copy&gt; &lt;/target&gt;&lt;/project&gt; 将需要运行的jmeter脚本，拷到该目录下，cmd，进入该目录，执行ant即可 更详细教程]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
        <tag>Ant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】Linux性能监控与分析]]></title>
    <url>%2F2018%2F08%2F29%2F%E3%80%90%E8%BD%AC%E3%80%91Linux%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[Linux性能监控与分析 Linux服务器性能查看CPU性能查看查看物理CPU个数：1cat /proc/cpuinfo |grep &quot;physical id&quot;|sort|uniq|wc -l 查看每个物理CPU中的core个数：1cat /proc/cpuinfo |grep &quot;cpu cores&quot;|wc -l 逻辑CPU个数1cat /proc/cpuinfo |grep &quot;processor&quot;|wc -l 物理cpu个数*核数=逻辑cpu个数（不支持超线程技术的情况下） 内存查看查看内存使用情况12345678910111213141516171819#free -m total used free shared buffers cachedMem: 3949 2519 1430 0 189 1619-/+ buffers/cache: 710 3239Swap: 3576 0 3576total：内存总数used：已经使用的内存数free：空闲内存数shared：多个进程共享的内存总额- buffers/cache：(已用)的内存数，即used-buffers-cached+ buffers/cache：(可用)的内存数，即free+buffers+cachedBuffer Cache用于针对磁盘块的读写；Page Cache用于针对文件inode的读写，这些Cache能有效地缩短I/O系统调用的时间。对操作系统来说free/used是系统可用/占用的内存；对应用程序来说-/+ buffers/cache是可用/占用内存,因为buffers/cache很快就会被使用。 硬盘查看查看硬盘及分区信息1fdisk -l 查看文件系统的磁盘空间占用情况：1df -h 查看硬盘的I/O性能（每隔一秒显示一次，显示五次）1iostat -x 1 5 iostat是含在套装systat中的,可以用yum -y install systat来安装常关注的参数：12如%util接近100%,说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。如idle小于70%，I/O的压力就比较大了，说明读取进程中有较多的wait。 查看linux下某目录的大小1du -sh 目录 如发现某个分区空间接近用完，可以进入该分区的挂载点，用以下命令找出占用空间最多的文件或目录，然后按照从达到小的顺序，找出系统中占用最多空间的前10个文件或目录：1du -cksh *|sort -rn|head -n 10 查看平均负载有时候系统响应很慢，又找不到原因，这是就要查看平均负载，看它是否有大量的进程在排队等待最简单的命令：1uptime--查看过去的1分钟、5分钟和15分钟内进程队列中的平均进程数量。 还有动态命令top我们只关心以下部分：12345top - 21:33:09 up 1:00, 1 user, load average: 0.00, 0.01, 0.05如果每个逻辑cpu当前的活动进程不大于3，则系统性能良好；如果每个逻辑cpu当前的活动进程不大于4，表示可以接受；如果每个逻辑cpu当前的活动进程大于5，则系统性能问题严重。 一般计算方法：负载值/逻辑CPU个数还可以结合vmstat命令来判断是否繁忙，其中：123456789101112131415161718192021222324252627procsr：等待运行的进程数。b：处在非中断睡眠状态的进程数。w：被交换出去的可运行的进程数。memeoryswpd：虚拟内存使用情况，单位为KB。free：空闲的内存，单位为KB。buff：被用来作为缓存的内存数，单位为KB。swapsi：从磁盘交换到内存的交换页数量，单位为KB。so：从内存交换到磁盘的交换页数量，单位为KB。iobi：发送到块设备的块数，单位为KB。bo：从块设备接受的块数，单位为KB。systemin：每秒的中断数，包括时钟中断。cs：每秒的环境切换次数。cpu按cpu的总使用百分比来显示。us：cpu使用时间。sy：cpu系统使用时间。id：闲置时间。 其他参数1234567891011121314151617查看内核版本号：uname -a简化命令：uname -r查看系统是32位还是64位的：file /sbin/init查看发行版：cat /etc/issue或lsb_release -a查看系统已载入的相关模块：lsmod查看pci设置：lspci Linux 服务器性能评估影响Linux服务器性能的因素操作系统1234CPU内存磁盘I/O带宽网络I/O带宽 程序应用级系统性能评估标准 影响性能因素 好 坏 糟糕 CPU user% + sys%&lt; 70% user% + sys%= 85% user% + sys% &gt;=90% 内存 Swap In（si）＝0 Swap Out（so）＝0 Per CPU with 10 page/s More Swap In &amp; Swap Out 磁盘 iowait % &lt; 20% iowait % =35% iowait % &gt;= 50% 其中：12345%user：表示CPU处在用户模式下的时间百分比。%sys：表示CPU处在系统模式下的时间百分比。%iowait：表示CPU等待输入输出完成时间的百分比。swap in：即si，表示虚拟内存的页导入，即从SWAP DISK交换到RAMswap out：即so，表示虚拟内存的页导出，即从RAM交换到SWAP DISK 系统性能分析工具常用系统命令：vmstat,sar,iostat,netstat,free,top常用组合方式：1234vmstat、sar、iostat检测是否是CPU瓶颈free、vmstat检测是否是内存瓶颈iostat检测是否是磁盘I/O瓶颈netstat检测是否是网络带宽瓶颈 Linux性能评估与优化系统整体性能评估（uptime命令）uptime116:38:00 up 118 days, 3:01, 5 users,load average: 1.22, 1.02, 0.91 注意： load average三值大小一般不能大于系统CPU的个数。 1系统有8个CPU,如load average三值长期大于8，说明CPU很繁忙，负载很高，可能会影响系统性能。 但偶尔大于8，一般不会影响系统性能。 如load average输出值小于CPU个数，则表示CPU有空闲时间片，比如本例中的输出，CPU是非常空闲的 CPU性能评估vmstat监控CPU显示系统各资源之间相关性能简要信息，主要看CPU负载情况下面是vmstat输出结果：123456[root@izuf6b0a7e5agj4lm7aj3mz ~]# vmstat 2 3procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 3 0 0 12267888 166640 1863724 0 0 1 41 72 88 3 1 96 0 0 2 0 0 12267872 166640 1863724 0 0 0 0 66000 163918 15 17 68 0 0 2 0 0 12267872 166640 1863724 0 0 0 158 18689 43630 40 5 55 0 0 r–运行和等待cpu时间片的进程数，这个值如果长期大于系统CPU的个数，说明CPU不足，需要增加CPUb–在等待资源的进程数，比如正在等待I/O、或者内存交换等。CPUus用户进程消耗的CPU时间百分比us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，就需要考虑优化程序或算法。 sy内核进程消耗的CPU时间百分比，Sy的值较高时，说明内核消耗的CPU资源很多根据经验，us+sy的参考值为80%，如果大于80%可能存在CPU资源不足。 sar命令监控系统CPUsar对系统每个方面进行单独统计，但会增加系统开销，不过开销可以评估，对系统的统计结果不会有很大影响下面是sar命令对系统CPU的统计输出：12345678910[root@izuf6b0a7e5agj4lm7aj3mz ~]# sar -u 3 5Linux 3.10.0-693.2.2.el7.x86_64 (izuf6b0a7e5agj4lm7aj3mz) 08/29/2018 _x86_64_ (4 CPU)03:05:20 PM CPU %user %nice %system %iowait %steal %idle03:05:23 PM all 0.08 0.00 0.08 0.08 0.00 99.7503:05:26 PM all 0.08 0.00 0.00 0.00 0.00 99.9203:05:29 PM all 0.08 0.00 0.08 0.00 0.00 99.8303:05:32 PM all 0.33 0.00 0.08 0.00 0.00 99.5803:05:35 PM all 0.08 0.00 0.08 0.00 0.00 99.83Average: all 0.13 0.00 0.07 0.02 0.00 99.78 输出解释如下：123456%user列显示了用户进程消耗的CPU 时间百分比。%nice列显示了运行正常进程所消耗的CPU 时间百分比。%system列显示了系统进程消耗的CPU时间百分比。%iowait列显示了IO等待所占用的CPU时间百分比%steal列显示了在内存相对紧张的环境下pagein强制对不同的页面进行的steal操作 。%idle列显示了CPU处在空闲状态的时间百分比。 问题：你是否遇到过系统CPU整体利用率不高，而应用缓慢的现象？1在一个多CPU的系统中，如果程序使用了单线程，会出现一个现象，CPU的整体使用率不高，但是系统应用却响应缓慢，这可能是由于程序使用单线程的原因，单线程只使用一个CPU，导致这个CPU占用率为100%，无法处理其他请求，而其他CPU却闲置，这就导致了整体CPU使用率不是很高，而应用缓慢 内存性能评估free监控内存free是监控Linux内存使用情况的最常用指令：1234[root@izuf6b0a7e5agj4lm7aj3mz ~]# free -m total used free shared buff/cache availableMem: 15886 1925 11977 0 1983 13651Swap: 0 0 0 经验公式：123应用程序可用内存/系统物理内存&gt;70%，表示系统内存资源非常充足，不影响系统性能;应用程序可用内存/系统物理内存&lt;20%，表示系统内存资源紧缺，需要增加系统内存;20% &lt; 应用程序可用内存/系统物理内存 &lt; 70%，表示系统内存资源基本能满足应用需求，暂时不影响系统性能 vmstat 监控内存123456[root@izuf6b0a7e5agj4lm7aj3mz ~]# vmstat 2 3procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 1 0 0 12264516 166640 1864120 0 0 1 41 73 89 3 1 96 0 0 0 0 0 12264624 166640 1864120 0 0 0 6 489 459 0 0 99 1 0 0 0 0 12264624 166640 1864120 0 0 0 0 466 434 0 0 100 0 0 memory1234swpd--切换到内存交换区的内存数量（k为单位)。如swpd值偶尔非0，不影响系统性能free--当前空闲的物理内存数量（k为单位）buff--buffers cache的内存数量，一般对块设备的读写才需要缓冲cache--page cached的内存数量 1一般作为文件系统cached，频繁访问的文件都会被cached，如cache值较大，说明cached的文件数较多，如果此时IO中bi比较小，说明文件系统效率比较好。 swap12si--由磁盘调入内存，也就是内存进入内存交换区的数量。so--由内存调入磁盘，也就是内存交换区进入内存的数量。 si、so的值长期不为0，表示系统内存不足。需增加系统内存。 磁盘I/O性能评估磁盘存储基础频繁访问的文件或数据尽可能用内存读写代替直接磁盘I/O，效率高千倍。将经常进行读写的文件与长期不变的文件独立出来，分别放置到不同的磁盘设备上。1对于写操作频繁的数据，可以考虑使用裸设备代替文件系统 裸设备优点：123数据可以直接读写，不需要经过操作系统级缓存，节省内存资源，避免内存资源争用；避免文件系统级维护开销，如文件系统需维护超级块、I-node等；避免操作系统cache预读功能，减少了I/O请求 裸设备缺点：1数据管理、空间管理不灵活，需要很专业的人来操作 iostat 评估磁盘性能1234567891011121314[root@izuf6b0a7e5agj4lm7aj3mz ~]# iostat -d 2 3Linux 3.10.0-693.2.2.el7.x86_64 (izuf6b0a7e5agj4lm7aj3mz) 08/29/2018 _x86_64_ (4 CPU)Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtnvda 21.91 2.71 161.83 243237 14531624vdb 0.00 0.02 0.00 2080 0Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtnvda 0.00 0.00 0.00 0 0vdb 0.00 0.00 0.00 0 0Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtnvda 0.00 0.00 0.00 0 0vdb 0.00 0.00 0.00 0 0 字段解释：1234Blk_read/s--每秒读取数据块数Blk_wrtn/s--每秒写入数据块数Blk_read--读取的所有块数Blk_wrtn--写入的所有块数 可通过Blk_read/s和Blk_wrtn/s值对磁盘的读写性能有一个基本的了解如Blk_wrtn/s值很大，表示磁盘写操作很频繁，考虑优化磁盘或程序如Blk_read/s值很大，表示磁盘直接读操作很多，可将读取的数据放入内存 规则遵循：1长期的、超大的数据读写，肯定是不正常的，这种情况一定会影响系统性能 sar 评估磁盘性能sar -d，可以对系统的磁盘IO做一个基本的统计：123456789101112131415161718[root@izuf6b0a7e5agj4lm7aj3mz ~]# sar -d 2 3Linux 3.10.0-693.2.2.el7.x86_64 (izuf6b0a7e5agj4lm7aj3mz) 08/29/2018 _x86_64_ (4 CPU)03:24:10 PM DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util03:24:12 PM dev253-0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:24:12 PM dev253-16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:24:12 PM DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util03:24:14 PM dev253-0 0.50 0.00 16.00 32.00 0.00 0.00 0.00 0.0003:24:14 PM dev253-16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:24:14 PM DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util03:24:16 PM dev253-0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.0003:24:16 PM dev253-16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00Average: DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %utilAverage: dev253-0 0.17 0.00 5.33 32.00 0.00 0.00 0.00 0.00Average: dev253-16 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 参数含义：123await--平均每次设备I/O操作等待时间（毫秒）svctm--平均每次设备I/O操作的服务时间（毫秒）%util--一秒中有百分之几的时间用于I/O操作 对磁盘IO性能评判标准：正常svctm应小于await值，而svctm和磁盘性能有关，CPU、内存符合也会对svctm值造成影响，过多的情趣也会间接导致svctm值的增加1234await值取决于svctm和I/O队列长度以及I/O请求模式如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，如果await的值远高于svctm的值，则表示I/O队列等待太长，系统上运行的应用程序将变慢，此时可以通过更换更快的硬盘来解决问题。 %util–衡量磁盘I/O重要指标：1如%util接近100%，表示磁盘产生的I/O请求太多，I/O系统已经满符合工作，该磁盘可能存在瓶颈 可优化程序或者通过更换更高、更快的磁盘 网络性能评估1234（1）通过ping命令检测网络的连通性（2）通过netstat –i组合检测网络接口状况（3）通过netstat –r组合检测系统的路由表信息（4）通过sar –n组合显示系统的网络运行状态 Linux服务器性能调优为磁盘I/O调整Linux内核电梯算法选择文件系统之后，该算法可以平衡低延时需求，搜集足够数据，有效组织对磁盘读写请求 禁用不必要的守护进程，节省内存和CPU资源123许多守护进程或服务通常非必需，消耗宝贵内存和CPU时间，将服务器置于险地。禁用可加快启动时间，释放内存减少CPU要处理的进程数 一些被禁用的Linux守护进程，默认自动启动：Apmd 高级电源管理守护进程Nfslock 用于NFS文件锁定Isdn ISDN Moderm支持Autofs 在后台自动挂载文件系统(如自动挂载CD-ROM)Sendmail 邮件传输代理Xfs X Window的字体服务器 关掉GUI清理不需要的模块或功能服务器软件包中太多被启动的功能或模块实际上是不需要的（如Apache中的许多功能模块），禁用掉有助于提高系统内存可用量，腾出资源给哪些真正需要的软件 禁用控制面板在Linux中，有许多流行的控制面板，如Cpanel，Plesk，Webmin和phpMyAdmin等，禁用释放出大约120MB内存 改善Linux Exim服务器性能使用DNS缓存守护进程，可降低解析DNS记录需要的带宽和CPU时间，DNS缓存通过消除每次都从根节点开始查找DNS记录的需求，从而改善网络性能。 Djbdns是一个非常强大的DNS服务器，它具有DNS缓存功能，Djbdns比BIND DNS服务器更安全，性能更好，可以直接通过http://cr.yp.to/下载，或通过Red Hat提供的软件包获得。 使用AES256增强gpg文件加密安全为提高备份文件或敏感信息安全，许多Linux系统管理员都使用gpg进行加密，在使用gpg时，最好指定gpg使用AES256加密算法，AES256使用256位密钥，它是一个开放的加密算法，美国国家安全局(NSA)使用它保护绝密信息 远程备份服务安全安全是选择远程备份服务最重要的因素，大多数系统管理员都害怕两件事：(黑客)可以删除备份文件，不能从备份恢复系统。 为了保证备份文件100%的安全，备份服务公司提供远程备份服务器，使用scp脚本或RSYNC通过SSH传输数据，这样，没有人可以直接进入和访问远程系统，因此，也没有人可以从备份服务删除数据。在选择远程备份服务提供商时，最好从多个方面了解其服务强壮性，如果可以，可以亲自测试一下。 更新默认内核参数设置为了顺利和成功运行企业应用程序，如数据库服务器，可能需要更新一些默认的内核参数设置，例如，2.4.x系列内核消息队列参数msgmni有一个默认值(例如，共享内存，或shmmax在Red Hat系统上默认只有33554432字节)，它只允许有限的数据库并发连接，下面为数据库服务器更好地运行提供了一些建议值(来自IBM DB2支持网站)： kernel.shmmax=268435456 (32位)kernel.shmmax=1073741824 (64位)kernel.msgmni=1024fs.file-max=8192kernel.sem=”250 32000 32 1024″ 优化TCP优化TCP协议有助于提高网络吞吐量，跨广域网的通信使用的带宽越大，延迟时间越长时，建议使用越大的TCP Linux大小，以提高数据传输速率，TCP Linux大小决定了发送主机在没有收到数据传输确认时，可以向接收主机发送多少数据 选择正确的文件系统1使用ext4文件系统代替ext3 Ext4是ext3文件系统的增强版，扩展了存储限制 具有日志功能，保证高水平的数据完整性(在非正常关闭事件中) 非正常关闭和重启时，它不需要检查磁盘(这是一个非常耗时的动作) 更快的写入速度，ext4日志优化了硬盘磁头动作 使用noatime文件系统挂载选项在文件系统启动配置文件fstab中使用noatime选项，如果使用了外部存储，这个挂载选项可以有效改善性能。 调整Linux文件描述符限制Linux限制了任何进程可以打开的文件描述符数量，默认限制是每进程1024，这些限制可能会阻碍基准测试客户端(如httperf和apachebench)和Web服务器本身获得最佳性能，Apache每个连接使用一个进程，因此不会受到影响，但单进程Web服务器，如Zeus是每连接使用一个文件描述符，因此很容易受默认限制的影响。 打开文件限制是一个可以用ulimit命令调整的限制，ulimit -aS命令显示当前的限制，ulimit -aH命令显示硬限制(在未调整/proc中的内核参数前，你不能增加限制)。 Linux第三方应用程序性能技巧 对于运行在Linux上的第三方应用程序，一样有许多性能优化技巧，这些技巧可以帮助你提高Linux服务器的性能，降低运行成本。 正确配置Mysql为了给MySQL分配更多的内存，可设置MySQL缓存大小，要是MySQL服务器实例使用了更多内存，就减少缓存大小，如果MySQL在请求增多时停滞不动，就增加MySQL缓存。 正确配置Apache检查Apache使用了多少内存，再调整StartServers和MinSpareServers参数，以释放更多的内存 分析Linux服务器性能提高系统效率最好的办法是找出导致整体速度下降的瓶颈并解决掉，下面是找出系统关键瓶颈的一些基本技巧： 当大型应用程序，如OpenOffice和Firefox同时运行时，计算机可能会开始变慢，内存不足的出现几率更高 如果启动时真的很慢，可能是应用程序初次启动需要较长的加载时间，一旦启动好后运行就正常了，否则很可能是硬盘太慢了。 CPU负载持续很高，内存也够用，但CPU利用率很低，可以使用CPU负载分析工具监控负载时间。 学习5个linux性能命令使用几个命令就可以管理Linux系统的性能了，下面列出了5个最常用的Linux性能命令，包括top、vmstat、iostat、free和sar，它们有助于系统管理员快速解决性能问题。 将日志文件转移到内存中当一台机器处于运行中时，最好是将系统日志放在内存中，当系统关闭时再将其复制到硬盘，当你运行一台开启了syslog功能的笔记本电脑或移动设备时，ramlog可以帮助你提高系统电池或移动设备闪存驱动器的寿命，使用ramlog的一个好处是，不用再担心某个守护进程每隔30秒向syslog发送一条消息，放在以前，硬盘必须随时保持运转，这样对硬盘和电池都不好。 先打包，后写入在内存中划分出固定大小的空间保存日志文件，这意味着笔记本电脑硬盘不用一直保持运转，只有当某个守护进程需要写入日志时才运转，注意ramlog使用的内存空间大小是固定的，否则系统内存会很快被用光，如果笔记本使用固态硬盘，可以分配50-80MB内存给ramlog使用，ramlog可以减少许多写入周期，极大地提高固态硬盘的使用寿命 一般调优技巧尽可能使用静态内容替代动态内容，如果你在生成天气预告，或其它每隔1小时就必须更新的数据，最好是写一个程序，每隔1小时生成一个静态的文件，而不是让用户运行一个CGI动态地生成报告。 为动态应用程序选择最快最合适的API，CGI可能最容易编程，但它会为每个请求产生一个进程，通常，这是一个成本很高，且不必要的过程，FastCGI是更好的选择，和Apache的mod_perl一样，都可以极大地提高应用程序的性能。 转自原博客]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7搭建SonarQube]]></title>
    <url>%2F2018%2F08%2F23%2FCentos7%E6%90%AD%E5%BB%BASonarQube%2F</url>
    <content type="text"><![CDATA[Centos7搭建代码质量管理平台SonarQube SonarQube是当前比较热门的代码质量管理平台，平台开源，支持多种语言。 搭建之前首先，要确保当前安装服务器已经安装了jdk（最好1.8+），以及MySQL数据库安装jdk：1yum install java-1.8.0-openjdk* -y 安装MySQL1234567891011下载源包：wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm安装mysql源:yum localinstall mysql57-community-release-el7-8.noarch.rpm检查是否安装成功：yum repolist enabled | grep &quot;mysql.*-community.*&quot;安装yum install mysql-community-server 下载安装包 sonarqube下载地址sonar-runner下载地址sonar-scanner下载扫描器地址 搭建SonarQube首先：SonarQube是服务器端，它主要有两个功能：1.分析源代码；2.因为它内嵌了Apache模块，所以提供Web端的界面访问。SonarQube Runner是一个利用SonarQube服务端分析代码的命令行工具，可以把它简单理解为客户端。所以，为了安装和调试方便，建议SonarQube和SonarQube Runner都下载。 创建sonar数据库mysql -uroot -p进入控制台，创建sonar用户及数据库：123456789CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;CREATE USER &apos;sonar&apos; IDENTIFIED BY &apos;Sonar_1234&apos;;GRANT ALL PRIVILEGES ON `sonar`.* TO &apos;sonar&apos;@&apos;%&apos; IDENTIFIED BY &apos;Sonar_1234&apos;;GRANT ALL PRIVILEGES ON `sonar`.* TO &apos;sonar&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;Sonar_1234&apos;;FLUSH PRIVILEGES; 安装SonarQube进入安装目录，这边用的是/usr/local，rz（yum install lrzsz）将下载的sonarqube-6.7.5.zip,sonar-runner-dist-2.4.zip,sonar-scanner-cli-3.0.3.778-linux.zip上传到服务器，解压sonarqube-6.7.5.zip1unzip sonarqube-6.7.5.zip 顺便其他两个也解压了：123unzip sonar-runner-dist-2.4.zipunzip sonar-scanner-cli-3.0.3.778-linux.zip 配置环境变量vim /etc/profile，到文件底部，添加环境变量：1234export SONAR_HOME=/usr/local/sonarqube-6.7.5export SONAR_RUNNER_HOME=/usr/local/sonar-runner-2.4PATH=$PATH:$SONAR_HOME/bin:$SONAR_RUNNER_HOME/binexport PATH 生效配置：source /etc/profile 验证：1sonar-runner -v 1234[root@localhost workflow]# sonar-runner -vSonarQube Runner 2.4Java 1.8.0_181 Oracle Corporation (64-bit)Linux 3.10.0-862.9.1.el7.x86_64 amd64 修改配置文件配置SonarQube进入配置文件mulu：cd /usr/local/sonarqube-6.7.5/conf修改配置文件：vim sonar.properties，修改内容如下：123456789sonar.jdbc.username=sonar （第16行）sonar.jdbc.password=Sonar_1234 （第17行）sonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false （第26行）sonar.web.host=192.168.0.91 （第105行）sonar.web.port=9000 （第111行） 配置 sonar-runner进入目录cd /usr/local/sonar-runner-2.4/conf，修改配置文件：vim sonar-runner.properties修改内容：12345678910111213141516171819202122232425262728#Configure here general information about the environment, such as SonarQube DB details for example 2 #No information about specific project should appear here 3 4 #----- Default SonarQube server 5 sonar.host.url=http://192.168.0.91:9000 6 7 #----- PostgreSQL 8 #sonar.jdbc.url=jdbc:postgresql://localhost/sonar 9 10 #----- MySQL11 sonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf812 13 #----- Oracle14 #sonar.jdbc.url=jdbc:oracle:thin:@localhost/XE15 16 #----- Microsoft SQLServer17 #sonar.jdbc.url=jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor18 19 #----- Global database settings20 sonar.jdbc.username=sonar21 sonar.jdbc.password=Sonar_123422 23 #----- Default source code encoding24 #sonar.sourceEncoding=UTF-825 26 #----- Security (when &apos;sonar.forceAuthentication&apos; is set to &apos;true&apos;)27 sonar.login=admin28 sonar.password=admin 启动sonarqubesonarqube需要普通用户才能启动，不能使用root用户，这个比较好办，新建用户和组，更改属组就可以：12useradd -g elasticsearch elasticsearch （前一个elasticsearch是组，后一个是用户）chown -R elasticsearch：elasticsearch sonarqube-6.7.5 修改elasticsearch配置cd /usr/local/sonarqube-6.7.5/elasticsearch/config，修改配置为：123456#network.host: 192.168.0.91## Set a custom port for HTTP:#http.port: 9200 启动cd /usr/local/sonarqube-6.7.5/bin/linux-x86-64./sonar.sh start启动完成~ 项目部署在没有用到jenkins以及git情况下，只有手动将代码上传到服务器进行打分，后期再弄CI，这边介绍的也就是最简单的上传代码的形式。首先，有一个项目需要sonar进行分析，将代码上传到sonar服务器自定义存放代码的位置，例如/root/sourceCode，上传的项目为QATest，然后在项目根目录创建sonar-runner的配置文件sonar-project.properties1vim sonar-project.properties 内容：1234567891011121314# must be unique in a given SonarQube instancesonar.projectKey=my:project# this is the name displayed in the SonarQube UIsonar.projectName=My projectsonar.projectVersion=1.0 # Path is relative to the sonar-project.properties file. Replace &quot;\&quot; by &quot;/&quot; on Windows.# Since SonarQube 4.2, this property is optional if sonar.modules is set. # If not set, SonarQube starts looking for source code from the directory containing # the sonar-project.properties file.sonar.sources=. # Encoding of the source code. Default is default system encoding#sonar.sourceEncoding=UTF-8 保存退出。 启动sonar-runner：sonar-runner -e -X(打印详细日志) 进入SonarQube查看分析结果：http://192.168.0.91:9000/projects（账密：admin/admin）]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7搭建influxdb+chronograf]]></title>
    <url>%2F2018%2F08%2F20%2FCentos7%E6%90%AD%E5%BB%BAinfluxdb-chronograf%2F</url>
    <content type="text"><![CDATA[Centos7搭建influxdb+Chronograf elasticsearch实验过后，今天尝试了另一种时序数据库influxdb 安装Influxdbcentos7 64位：12wget https://dl.influxdata.com/influxdb/releases/influxdb-1.6.1.x86_64.rpmsudo yum localinstall influxdb-1.6.1.x86_64.rpm (附卸载方式，曾经想卸载东西，找半天：ipm包：rpm -qa xxxx(查询安装包)rpm -e xxxx（卸载） yum install 安装的包：yum remove xxx) 配置安装完成后，相应配置文件位于：/usr/bin12345influxd influxdb服务器influx influxdb命令行客户端influx_inspect 查看工具influx_stress 压力测试工具influx_tsm 数据库转换工具（将数据库从b1或bz1格式转换为tsm1格式） 数据文件夹：/var/lib/influxdb123data 存放最终存储的数据，文件以.tsm结尾meta 存放数据库元数据wal 存放预写日志文件 以及，配置文件：1/etc/influxdb/influxdb.conf 启动1234加自启动：systemctl enable influxdb启服务：systemctl start influxdb 非服务方式启动：1234[root@localhost influxdb]# influxConnected to http://localhost:8086 version 1.6.1InfluxDB shell version: 1.6.1&gt; 安装Chronograf好像是1.4版本（具体不记得了），influxdb就去掉了自带的web页面（influxdb.conf中没有admin栏），想要从web页面查看数据，可以安装官方配套的展示工具Chronograf，用着感觉和grafana很像。 Cnetos 7下安装：12wget https://dl.influxdata.com/chronograf/releases/chronograf-1.6.1.x86_64.rpmsudo yum localinstall chronograf-1.6.1.x86_64.rpm 启动：systemctl start chronograf默认开启8888端口，浏览器访问http://IP:8888即可（若是在虚拟机安装，打不开，可以尝试用nginx转服务） 简单语法influxdb与传统数据库的比较 influxdb MySQL database 数据库 measurement 数据库中的表 points 表里面的一行数据 influxdb数据的构成：Point由时间戳（time）、数据（field）、标签（tags）组成。 Point属性 传统数据库中的概念 time 每个数据记录时间，是数据库中的主索引(会自动生成) fields 各种记录值（没有索引的属性）也就是记录的值：温度， 湿度 tags 各种有索引的属性：地区，海拔 简单操作influx进入命令行模式：1234567891011121314151617181920#创建数据库create database &quot;db_name&quot;#显示所有的数据库show databases#删除数据库drop database &quot;db_name&quot;#使用数据库use db_name#显示该数据库中所有的表show measurements#创建表，直接在插入数据的时候指定表名insert test,host=127.0.0.1,monitor_name=test count=1#删除表drop measurement &quot;measurement_name&quot; 123INSERT cpu,host=serverA,region=us_west value=0.64 //在cpu表中插入相关的数据SELECT * FROM cpu ORDER BY time DESC LIMIT 3 //查询最近的三条数据delete from cpu where time=1480235366557373922 //删除某条数据 用户操作：12345678910111213用户管理可以通过Chronograf页面做操作，也可以命令行。#显示用户 show users#创建用户create user &quot;username&quot; with password &apos;password&apos;#创建管理员权限用户create user &quot;username&quot; with password &apos;password&apos; with all privileges#删除用户drop user &quot;username&quot; 导入测试数据CREATE DATABASE NOAA_water_database下载官方数据集：1curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt 写数据1influx -import -path=./NOAA_data.txt -precision=s -database=NOAA_water_database 配置文件参考 influxdb.conf]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>influxdb</tag>
        <tag>Chronograf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些常用网站]]></title>
    <url>%2F2018%2F08%2F15%2F%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[记一些常用的网站 zabbix 模板大全 zabbix各模板 APM鼻祖论文 APM平台的鼻祖 正则表达式 在线正则表达式工具 网页测试工具 WebPagetest Pingdom 论坛 stackoverflow testerhome 51CTO 掘金 思否（segmentfault） 电子书网站 稀酷客Project Gutenberg 数据科学项目练习 Kaggle python 3 cookbook Python3 cookbook Hacker News Hacker News 免费图片 Pixabay 运维 运维生存时间 运维网 Rancher Rancher 娱乐部分 ACG动漫种子 52破解 蜂鸟摄影 TO BE CONTINUED …]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7开启nginx status]]></title>
    <url>%2F2018%2F08%2F15%2FCentos7%E5%BC%80%E5%90%AFnginx-status%2F</url>
    <content type="text"><![CDATA[Centos 7开启nginx status 这段时间需要研究APM相关，整理到中间件部分，想到用zabbix来监控Nginx，一般情况下，中间件都有自己的计数器，我们只需要获取计数器的数值即可完成监控。 安装nginx还是啰嗦一下，安装nginx，一条命令即可：1yum install nginx 配置文件路径：默认配置：/etc/nginx/nginx.conf可自建配置:/etc/nginx/conf.d/yourAPP.conf(需要修改nginx.conf最后的配置文件路径) 开启nginx status开启很简单，在配置中增加：1234567location /ngx_status &#123; stub_status on; access_log off; allow 127.0.0.1; deny all; &#125; 即可；由于之前有帮开发搭建了.net core的环境，就直接在之前搭建的配置文件（LiabTest.conf）里面改了：原文件：1234567891011server &#123; listen 80; location / &#123; proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; &#125;&#125; 增加status之后：123456789101112131415161718server &#123; listen 80; location / &#123; proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; &#125; location /ngx_status &#123; stub_status on; access_log off; allow 127.0.0.1; deny all; &#125;&#125; 查看效果重启nginx：1systemctl restart nginx 查看status:1curl http://127.0.0.1/ngx_status 看到信息：12345[root@gtp1 conf.d]# curl http://127.0.0.1/ngx_statusActive connections: 1199 server accepts handled requests 158761 158761 158757 Reading: 0 Writing: 1195 Waiting: 4 nginx status详解12345active connections – 活跃的连接数量server accepts handled requests — 总共处理了158761个连接 , 成功创建158761次握手, 总共处理了158757个请求reading — 读取客户端的连接数.writing — 响应数据到客户端的数量waiting — 开启 keep-alive 的情况下,这个值等于 active – (reading+writing), 意思就是 Nginx 已经处理完正在等候下一次请求指令的驻留连接.]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ELK环境搭建及测试数据导入]]></title>
    <url>%2F2018%2F08%2F09%2FELK%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%2F</url>
    <content type="text"><![CDATA[ELK一些前期准备 前面已经搭建过elasticsearch了，和它配套的，L和K：Logstash，Kibana三者关系：Logstash搜集日志，elasticsearch存储，kibana展示 搭建Logstash、kibana首先是官网下载安装包： elasic.co 下载对应的安装包：kibana-6.3.2-linux-x86_64.tar.gzlogstash-6.3.2.tar.gz 安装logstash解压缩下载的安装包logstash-6.3.2.tar.gz，进入logstash-6.3.2/config目录，创建配置文件logstash.conf1vim logstash.conf 内容：123456789101112131415161718input &#123; file &#123; type =&gt; &quot;log&quot; path =&gt; &quot;/logs/*.log&quot; start_position =&gt; &quot;beginning&quot; &#125;&#125;output &#123; stdout &#123; codec =&gt; rubydebug &#123; &#125; &#125; elasticsearch &#123; hosts =&gt; &quot;es地址IP，例如192.168.0.91&quot; index =&gt; &quot;log-%&#123;+YYYY.MM.dd&#125;&quot; &#125;&#125; 保存退出，进入bin目录，启动：1./logstash -f ../config/logstash.conf 安装Kibana解压缩安装包，修改config下配置文件：kibana.yml12345678910111213141516171819202122server.host: &quot;192.168.0.91&quot;# Enables you to specify a path to mount Kibana at if you are running behind a proxy.# Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath# from requests it receives, and to prevent a deprecation warning at startup.# This setting cannot end in a slash.#server.basePath: &quot;&quot;# Specifies whether Kibana should rewrite requests that are prefixed with# `server.basePath` or require that they are rewritten by your reverse proxy.# This setting was effectively always `false` before Kibana 6.3 and will# default to `true` starting in Kibana 7.0.#server.rewriteBasePath: false# The maximum payload size in bytes for incoming server requests.#server.maxPayloadBytes: 1048576# The Kibana server&apos;s name. This is used for display purposes.#server.name: &quot;your-hostname&quot;# The URL of the Elasticsearch instance to use for all your queries.elasticsearch.url: &quot;http://192.168.0.91:9200&quot; 需要更改的是两个地方：server.host和elasticsearch.url，更改保存退出~进bin目录，启动服务~ 添加测试数据官方教程 ElasticSearch的sample data： account.zipshakespeare.jsonlogs.json1.gz 首先加载account数据：1curl -H &quot;Content-Type: application/json&quot; -XPOST &apos;localhost:9200/bank/account/_bulk?pretty&amp;refresh&apos; --data-binary &quot;@accounts.json&quot; shaekspeare和logs，先做mapping1234567891011121314curl -X PUT &quot;192.168.0.91:9200/shakespeare&quot; -H &apos;Content-Type: application/json&apos; -d&apos;&#123; &quot;mappings&quot;: &#123; &quot;doc&quot;: &#123; &quot;properties&quot;: &#123; &quot;speaker&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;&#125;, &quot;play_name&quot;: &#123;&quot;type&quot;: &quot;keyword&quot;&#125;, &quot;line_id&quot;: &#123;&quot;type&quot;: &quot;integer&quot;&#125;, &quot;speech_number&quot;: &#123;&quot;type&quot;: &quot;integer&quot;&#125; &#125; &#125; &#125;&#125;&apos; logs1234567891011121314151617curl -X PUT &quot;localhost:9200/logstash-2015.05.18&quot; -H &apos;Content-Type: application/json&apos; -d&apos;&#123; &quot;mappings&quot;: &#123; &quot;log&quot;: &#123; &quot;properties&quot;: &#123; &quot;geo&quot;: &#123; &quot;properties&quot;: &#123; &quot;coordinates&quot;: &#123; &quot;type&quot;: &quot;geo_point&quot; &#125; &#125; &#125; &#125; &#125; &#125;&#125;&apos; 1234567891011121314151617curl -X PUT &quot;localhost:9200/logstash-2015.05.19&quot; -H &apos;Content-Type: application/json&apos; -d&apos;&#123; &quot;mappings&quot;: &#123; &quot;log&quot;: &#123; &quot;properties&quot;: &#123; &quot;geo&quot;: &#123; &quot;properties&quot;: &#123; &quot;coordinates&quot;: &#123; &quot;type&quot;: &quot;geo_point&quot; &#125; &#125; &#125; &#125; &#125; &#125;&#125;&apos; 1234567891011121314151617curl -X PUT &quot;localhost:9200/logstash-2015.05.20&quot; -H &apos;Content-Type: application/json&apos; -d&apos;&#123; &quot;mappings&quot;: &#123; &quot;log&quot;: &#123; &quot;properties&quot;: &#123; &quot;geo&quot;: &#123; &quot;properties&quot;: &#123; &quot;coordinates&quot;: &#123; &quot;type&quot;: &quot;geo_point&quot; &#125; &#125; &#125; &#125; &#125; &#125;&#125;&apos; 导入数据一样：123curl -H &apos;Content-Type: application/x-ndjson&apos; -XPOST &apos;localhost:9200/bank/account/_bulk?pretty&apos; --data-binary @accounts.jsoncurl -H &apos;Content-Type: application/x-ndjson&apos; -XPOST &apos;localhost:9200/shakespeare/doc/_bulk?pretty&apos; --data-binary @shakespeare_6.0.jsoncurl -H &apos;Content-Type: application/x-ndjson&apos; -XPOST &apos;localhost:9200/_bulk?pretty&apos; --data-binary @logs.jsonl 结束~]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
        <tag>logstash</tag>
        <tag>kibana</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[elasticsearch 6变更记录]]></title>
    <url>%2F2018%2F08%2F01%2Felasticsearch-6%E5%8F%98%E6%9B%B4%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[elasticsearch 6变更内容记录 原来没怎么接触过es，找了个教程，本来是按着教程上敲的练练手的，然后就我靠了，又回到当初碰Django时候的懵逼状态，新版本改好多。。 No handler for type [string] declared on field本来练手练得好好的：123456789101112131415161718PUT http://192.168.0.91:9200/index_test&#123; &quot;settings&quot;: &#123; &quot;number_of_shards&quot;: 3, &quot;number_of_replicas&quot;: 2 &#125;, &quot;mappings&quot;: &#123; &quot;Testlog&quot;: &#123; &quot;properties&quot;: &#123; &quot;logType&quot;: &#123; &quot;type&quot;: &quot;string&quot;, &quot;index&quot;: &quot;not_analyzed&quot; &#125; &#125; &#125; &#125;&#125; 然后就是悲剧：1234567&quot;error&quot;: &#123; &quot;root_cause&quot;: [ &#123; &quot;type&quot;: &quot;mapper_parsing_exception&quot;, &quot;reason&quot;: &quot;No handler for type [string] declared on field [logType]&quot; &#125; ], 研究半天，JSON没啥错啊，教程里就是这么干的啊，回忆起Django的版本悲剧，搜了下版本变更，唉~ElasticSearch 5.x开始就取消了string类型，取代的事text和keyward，text用于全文搜索的, 而keyword用于关键词搜索 找了段网上的解释：这个变动的根本原因是string类型会给我们带来很多困惑: 因为ElasticSearch对字符串拥有两种完全不同的搜索方式. 你可以按照整个文本进行匹配, 即关键词搜索(keyword search), 也可以按单个字符匹配, 即全文搜索(full-text search). 对ElasticSearch稍有了解的人都知道, 前者的字符串被称为not-analyzed字符, 而后者被称作analyzed字符串. 事实上, 同一种类型用于应对两种不同的使用场景是会让人崩溃的, 因为有些选项只对其一的场景设置有效.例如position_increment_gap对not-analyzed字符就不会起作用, 而像ignore_above对于analyzed字符串就很难区分它到底是对整个字符串的值有效还是对单独的每个分词有效(在这种场景, ignore_above确实只对整个字符串值有效, 而对单个分词的限制可以使用limit设置)，同样，index现在也只需要boolean的两种状态，所以可以修改为：12345678910111213141516&#123; &quot;settings&quot;: &#123; &quot;number_of_shards&quot;: 3, &quot;number_of_replicas&quot;: 2 &#125;, &quot;mappings&quot;: &#123; &quot;gaialog&quot;: &#123; &quot;properties&quot;: &#123; &quot;logType&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;index&quot;: &quot;false&quot; &#125; &#125; &#125; &#125;&#125; as the final mapping would have more than 1 type原因是6.x开始，取消了mapping type…具体原因可以看官方的解释：removal of mapping type需要的一些解释是：首先，很多人会把es和关系型数据库进行类比；1234index ——&gt; 数据库（database）type ——&gt; 表（table）document ——&gt; 数据记录（data）filed ——&gt; 列（column） 其实这样理解是有问题的，在关系型数据库中，每个表的列都是相互独立的，即使是同样列名的列，也毫无关系；但是在像es这样的映射型数据库中，即使是在不同的type下的field，只要field名字一样，它们所指向的Lucene字段都是同一个，所以是有影响的。在ES中，之前有type的情况下，在不同的type下可以建同样名字的field，比如test，type1下的field是string类型，type2下的field是boolean类型，由于同一个名字的field对应的Lucene字段一样，所以在进行field删除时，系统就会出错，不知道具体应该删的是哪个field。官方为了避免这样的情况，就直接开始了不要type~~~]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos 7安装elasticsearch head]]></title>
    <url>%2F2018%2F08%2F01%2FCentos-7%E5%AE%89%E8%A3%85elasticsearch-head%2F</url>
    <content type="text"><![CDATA[ElasticSearch安装可视化插件ElasticSearch head 依赖node.js首先是安装node.js 方案一可以用yum装：1yum install -y nodejs 再装npm：1npm install -g cnpm --registry=https://registry.npm.taobao.org 方案二或者是源码安装首先安装gcc用于编译：1yum -y install gcc gcc-c++ kernel-devel 开始安装node.js12wget https://nodejs.org/dist/v4.5.0/node-v4.5.0.tar.gztar -xf node-v4.5.0.tar.gz 解压缩之后，进入目录，编译：1234cd node-v4.5.0./configuremakemake install 完成！验证：12node -vnpm 安装完成的是4.5的版本，升级：12npm install -g nn stable 安装grunt1npm install -g grunt 可以查看版本1grunt -version 安装ES head下载git下载源码，可以直接到github下，也可以命令行weg或者git clone下载源码地址|：https://github.com/mobz/elasticsearch-head/建议要是在本地下载的zip包，传服务器时候，切换到es用户操作，使得head文件属主是es用户。然后解压：12unzip elasticsearch-head-master.zipcd elasticsearch-head-master 安装1npm install 配置首先要停掉ES服务 配置http对外服务修改elasticsearch.yml1vim config/elasticsearch.yml 添加：12http.cors.enabled: truehttp.cors.allow-origin: &quot;*&quot; 修改host进入elasticsearch-head文件夹，修改Gruntfile.js1vim Gruntfile.js 找到connect：server，添加hostname为你的静态IP，完成~12345678910connect: &#123; server: &#123; options: &#123; hostname: &apos;192.168.0.91&apos;, port: 9100, base: &apos;.&apos;, keepalive: true &#125; &#125; &#125; 启动先启动ES，再起ES headES head有两种启动方式：` grunt server 或者进入es head目录 npm run start浏览器访问:http://IP:9100即可打开页面]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>elasticsearch</tag>
        <tag>elasticsearch head</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos下搭建ElasticSearch]]></title>
    <url>%2F2018%2F07%2F31%2FCentos%E4%B8%8B%E6%90%AD%E5%BB%BAElasticSearch%2F</url>
    <content type="text"><![CDATA[Centos 7下搭建ElasticSearch JDK首先，ES是java开发的，所以，通性，懂得，装JDK，好在linux下一条命令行就可以解决：12# 安装1.8.0的所有文件yum install java-1.8.0-openjdk* -y 校验：12java -versionjavac 123openjdk version &quot;1.8.0_181&quot;OpenJDK Runtime Environment (build 1.8.0_181-b13)OpenJDK 64-Bit Server VM (build 25.181-b13, mixed mode) 很正常，完成。 ElasticSearch下载下载很简单：1wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.zip 然后解压缩就可以了1unzip elasticsearch-6.3.2.zip 启动12cd elasticsearch-6.3.2/bin./elasticsearch 嗯，然后问题就开始了~ 配置用root用户登录的系统，启es，会报错：123456789101112131415[2018-01-28T22:00:31,358][WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:125) ~[elasticsearch-6.1.2.jar:6.1.2] at org.elasticsearch.bootstrap.Elasticsearch.execute(Elasticsearch.java:112) ~[elasticsearch-6.1.2.jar:6.1.2] at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86) ~[elasticsearch-6.1.2.jar:6.1.2] at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124) ~[elasticsearch-cli-6.1.2.jar:6.1.2] at org.elasticsearch.cli.Command.main(Command.java:90) ~[elasticsearch-cli-6.1.2.jar:6.1.2] at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:92) ~[elasticsearch-6.1.2.jar:6.1.2] at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:85) ~[elasticsearch-6.1.2.jar:6.1.2]Caused by: java.lang.RuntimeException: can not run elasticsearch as root at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:104) ~[elasticsearch-6.1.2.jar:6.1.2] at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:171) ~[elasticsearch-6.1.2.jar:6.1.2] at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:322) ~[elasticsearch-6.1.2.jar:6.1.2] at org.elasticsearch.bootstrap.Elasticsearch.init(Elasticsearch.java:121) ~[elasticsearch-6.1.2.jar:6.1.2] ... 6 more 很明显，人家不让你用root启服务 创建es用户不让用root就创建一个es的用户：1234# 创建es组groupadd elasticsearch# 在es组下创建es用户，并设置密码为elasticsearchuseradd elasticsearch -g elasticsearch -p elasticsearch 然后将前面下载的elasticsearch-6.3.2.zip包拷贝到es家目录下：1cp elasticsearch-6.3.2.zip /home/elasticsearch 解压缩：1unzip elasticsearch-6.3.2.zip 更改文件夹属主和属组：1chown -R elasticsearch:elasticsearch elasticsearch-6.1.2/ 然后切换到es用户，启服务：12su - elasticsearch./bin/elasticsearch 然后就可以看见服务基本是正常起来了：12345678910111213141516171819202122232425262728293031[2018-07-31T22:11:06,918][INFO ][o.e.n.Node ] [] initializing ...[2018-07-31T22:11:07,161][INFO ][o.e.e.NodeEnvironment ] [qR5cyzh] using [1] data paths, mounts [[/ (rootfs)]], net usable_space [12.5gb], net total_space [17.6gb], types [rootfs][2018-07-31T22:11:07,162][INFO ][o.e.e.NodeEnvironment ] [qR5cyzh] heap size [1015.6mb], compressed ordinary object pointers [true][2018-07-31T22:11:07,163][INFO ][o.e.n.Node ] node name [qR5cyzh] derived from node ID [qR5cyzhRQUix7PbCNFViTw]; set [node.name] to override[2018-07-31T22:11:07,163][INFO ][o.e.n.Node ] version[6.1.2], pid[7200], build[5b1fea5/2018-01-10T02:35:59.208Z], OS[Linux/3.10.0-514.el7.x86_64/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_141/25.141-b15][2018-07-31T22:11:07,163][INFO ][o.e.n.Node ] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -XX:+HeapDumpOnOutOfMemoryError, -Des.path.home=/home/elasticsearch/elasticsearch-6.1.2, -Des.path.conf=/home/elasticsearch/elasticsearch-6.1.2/config][2018-07-31T22:11:09,295][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [aggs-matrix-stats][2018-07-31T22:11:09,295][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [analysis-common][2018-07-31T22:11:09,295][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [ingest-common][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [lang-expression][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [lang-mustache][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [lang-painless][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [mapper-extras][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [parent-join][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [percolator][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [reindex][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [repository-url][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [transport-netty4][2018-07-31T22:11:09,296][INFO ][o.e.p.PluginsService ] [qR5cyzh] loaded module [tribe][2018-07-31T22:11:09,297][INFO ][o.e.p.PluginsService ] [qR5cyzh] no plugins loaded[2018-07-31T22:11:13,791][INFO ][o.e.d.DiscoveryModule ] [qR5cyzh] using discovery type [zen][2018-07-31T22:11:14,926][INFO ][o.e.n.Node ] initialized[2018-07-31T22:11:14,927][INFO ][o.e.n.Node ] [qR5cyzh] starting ...[2018-07-31T22:11:15,582][INFO ][o.e.t.TransportService ] [qR5cyzh] publish_address &#123;127.0.0.1:9300&#125;, bound_addresses &#123;[::1]:9300&#125;, &#123;127.0.0.1:9300&#125;[2018-07-31T22:11:15,598][WARN ][o.e.b.BootstrapChecks ] [qR5cyzh] max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536][2018-07-31T22:11:15,598][WARN ][o.e.b.BootstrapChecks ] [qR5cyzh] max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144][2018-07-31T22:11:18,915][INFO ][o.e.c.s.MasterService ] [qR5cyzh] zen-disco-elected-as-master ([0] nodes joined), reason: new_master &#123;qR5cyzh&#125;&#123;qR5cyzhRQUix7PbCNFViTw&#125;&#123;wRzc-CVaRmmdLNnPfT_LTA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;[2018-07-31T22:11:18,920][INFO ][o.e.c.s.ClusterApplierService] [qR5cyzh] new_master &#123;qR5cyzh&#125;&#123;qR5cyzhRQUix7PbCNFViTw&#125;&#123;wRzc-CVaRmmdLNnPfT_LTA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;, reason: apply cluster state (from master [master &#123;qR5cyzh&#125;&#123;qR5cyzhRQUix7PbCNFViTw&#125;&#123;wRzc-CVaRmmdLNnPfT_LTA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125; committed version [1] source [zen-disco-elected-as-master ([0] nodes joined)]])[2018-07-31T22:11:19,028][INFO ][o.e.g.GatewayService ] [qR5cyzh] recovered [0] indices into cluster_state[2018-07-31T22:11:19,097][INFO ][o.e.h.n.Netty4HttpServerTransport] [qR5cyzh] publish_address &#123;127.0.0.1:9200&#125;, bound_addresses &#123;[::1]:9200&#125;, &#123;127.0.0.1:9200&#125;[2018-07-31T22:11:19,097][INFO ][o.e.n.Node ] [qR5cyzh] started 验证：1curl &quot;127.0.0.1:9200&quot; 1234567891011121314151617&#123; &quot;name&quot; : &quot;snZNWBu&quot;, &quot;cluster_name&quot; : &quot;elasticsearch&quot;, &quot;cluster_uuid&quot; : &quot;9k1xyJl4S6uoosA_Ua0XEQ&quot;, &quot;version&quot; : &#123; &quot;number&quot; : &quot;6.3.2&quot;, &quot;build_flavor&quot; : &quot;default&quot;, &quot;build_type&quot; : &quot;zip&quot;, &quot;build_hash&quot; : &quot;053779d&quot;, &quot;build_date&quot; : &quot;2018-07-20T05:20:23.451332Z&quot;, &quot;build_snapshot&quot; : false, &quot;lucene_version&quot; : &quot;7.3.1&quot;, &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;, &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot; &#125;, &quot;tagline&quot; : &quot;You Know, for Search&quot;&#125; 更改静态IP本地是可以用，但是试了下，由于centos是在虚拟机里面，在外面机器，访问虚拟机ip就打不开es了，没办法，将es设置成静态IP修改配置文件/confif/elasticsearch.yml，修改IP为静态IP：1234567891011# ---------------------------------- Network -----------------------------------## Set the bind address to a specific IP (IPv4 or IPv6):#network.host: 192.168.0.91## Set a custom port for HTTP:#http.port: 9200## For more information, consult the network module documentation. 然后重启es，发现，嗯，还是起不来，又报了俩错：123ERROR: [2] bootstrap checks failed[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536][2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144] max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]切到root下，修改对应配置文件：12345cd /etc/security/# 日常备份cp limits.conf limits.conf.bak# 修改配置vim limits.conf 增加内容：123456# elasticsearch config start* soft nofile 65536* hard nofile 131072* soft nproc 2048* hard nproc 4096# elasticsearch config end max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]也是切root改配置123cd /etccp sysctl.conf sysctl.conf.bakvim sysctl.conf 增加内容：123# elasticsearch config startvm.max_map_count=262144# elasticsearch config end 重启系统 然后切到es用户，重启服务，完成~可以到本地浏览器试试访问”http://IP:9200“]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海贼王TV版目录]]></title>
    <url>%2F2018%2F07%2F19%2F%E6%B5%B7%E8%B4%BC%E7%8E%8BTV%E7%89%88%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[来点和技术无关的~作为最爱的动漫，没有之一，整理的一点TV版目录，大海贼！ 一 海贼和小偸（BOSS：小丑巴基。SPECIAL：海军克比）新船员：路飞 索隆 娜美 1:我是路飞,未来的海贼王.2:大剑客现身.海贼猎人_罗罗亚索隆.3:蒙卡VS路飞,神秘的美少年是谁?4:路飞的过去。红发登场!5:恐怖.神奇的力量,海贼小丑巴基船长.6:史上最厉害的怪人.催眠师杰克斯.7:绝命追杀.骑兽师摩奇VS路飞.8:壮烈战斗.剑客索隆VS杂技卡巴吉. 9:谁是胜者.恶魔果实能力者大对决. 二 不虚假的事（BOSS：船长洛克。SPECIAL：可雅）新船员：骗人布 梅利 10:正义的骗子?骗人布船长.11:揭发阴谋.海贼管家洛克船长12:正面冲突!黑猫海贼团斜坡大攻防13:恐怖2人组,黑猫兄弟VS索隆14:路飞复活.可雅小姐冒死奋战15:打倒洛克.骗人布男子的决心16:保护可雅.骗人布海贼团大展身手17:怒气冲天.洛克VS路飞18:你就是珍禽异兽.卡蒙和奇妙的伙伴.19:3刀流的过去.索隆与克伊娜的誓言. 三 ALL BLUE之梦（BOSS：克利克。SPECIAL：红脚哲普）新船员：山治 20:招牌厨师.海上餐厅的山治21:不速之客.山治的饭与啊金的恩.22:最强海贼滥队.克利克提督23:保卫芭拉缔.大海贼_红脚哲普.24:鹰眼米霍克.剑豪索隆命丧大海.25:必杀足技招爆发,山治VS铁壁帕路26:路飞和山治的梦想.梦幻般的ALL BIUE27:冷酷无情的鬼人.海贼滥队总队长啊金28:不会死的.路飞VS克利克的激战29:死斗的结果!肚皮里的一把枪30:起程.海上厨师和路飞他们一起出发 四 橘子和风车（BOSS：鱼人阿龙。SPECIAL：贝尔梅尔）新船员：娜美 31:东海最坏的男人.鱼人海贼恶龙32:可可亚西存的魔女.恶龙的女干部33:骗人布死了?路飞还没登陆吗.34:全员集合,骗人布道出娜美的实情35:不为人知的过去.女战士_贝尔梅尔36:求生.妈妈贝尔梅尔与娜美的亲情.37:路飞站出来.食言的结果38:路飞危险.鱼人VS路飞海贼团39:路飞沉入海底.索隆VS章鱼小八40:伟大的战士.激战山治与骗人布.41:路飞动力全开.娜美的决心与草帽42:爆裂.鱼人恶龙来自海底的猛攻.43:终结鱼人帝国.娜美是我的伙伴44:带着笑容的起航.再见了故乡可可亚西村.45:悬赏犯.草帽路飞闻名全世界 番外编 小巴基大冒险 46:追捕草帽小子.小丑巴基的大冒险.47:久等咯.巴基船长复活. 五 伟大的传说开始（SPECIAL：达斯琪） 48:开始与结束的镇.登陆罗格镇.49:3代鬼撤和雪走.索隆的新刀和女上士.50:骗人布对带小孩的达迪.正午的决斗51:炽热的料理比赛!香吉士VS美人厨师52:巴其复仇!在死刑台上笑的男人Special:路飞落下!秘境.海肚脐之大冒险53:传说开始!目标伟大的航路 TV原创 千年龙的传说 54:全新冒险的预感!神秘少女阿碧丝55:奇迹般的生物!阿碧丝的秘密和传说之岛56:艾力克出击!突破重围冲出军舰岛57:绝海孤岛!传说中的失落之岛58:废墟的决斗!紧张的索隆VS艾力克59:路飞完全包围!尼尔森提督的秘招60:在天空中飞舞!苏醒的千年传说 六 进入伟大航路 开端（SPECIAL：鲸鱼拉布）新船员：薇薇公主 超卡鲁鸭卡鲁 61:愤怒的决斗!跨越红土大陆62:第一道难关!出现巨大的鲸鱼拉布63:男人的约定!路飞与鲸鱼再会的誓言64:欢迎海贼的小镇!登陆威士忌山峰65:三刀流爆发!索隆VS巴洛克工作社66:一决胜负!路飞VS索隆谜样的大决斗67:护送薇薇公主!路飞海贼团出航 番外编 海军奋斗记 68:加油!克比,贝鲁梅伯海军奋斗记69:克比,贝鲁梅伯的决心!格普中将的父母心 七 巨人的小花园 （BOSS：MR.3。SPECIAL：巨人东利 布洛基） 70:太古之岛!潜藏在小花园的黑影71:巨人的决斗!巨人东利与布洛基72:路飞生气了!神圣决斗中的卑鄙陷阱73:布洛基胜利狂哭!艾尔帕布决战74:魔鬼蜡烛!不甘心的眼泪与愤怒的泪水75:袭击路飞的魔法!颜色调配的陷阱76:毅然反击!乌索普的机智与火炎星77:再见了,巨人岛!朝阿拉巴斯坦出发78:娜美生病了!朝海上之雪前进 八 没有名字的国家（BOSS：瓦尔波。SPECIAL：多尔顿）新船员：驯鹿乔巴 79:奇袭!布里基克号与布里基的瓦尔波80:没有医生的岛!在没有名字的国家冒险81:开心吗?人称魔女的医生82:多尔顿的觉悟!瓦尔波军团登陆83:雪之岛!登上磁鼓山顶84:蓝鼻子的驯鹿!乔巴的秘密85:痴人说梦话!庸医西尔尔克86:西尔尔克的樱花与继承的遗志87:VS瓦尔波军团!吞吞果实的实力88:动物系恶魔果实!乔巴的七段变形89:王国的支配终将结束!旗子的信念直到永远90:西尔尔克的樱花!磁鼓炮射的奇迹91:再见了磁鼓岛!我要向大海出发了 九 沙漠的鳄鱼（BOSS：七武海沙鳄鱼。SPECIAL：火拳艾斯 上校斯摩格）新船员：罗宾 92:阿拉巴斯坦的英雄和船上的芭蕾女伶93:朝着沙漠之国前进!呼唤雨之粉与叛乱军94:各路英雄的再次相遇!他的名字叫火拳艾斯95:艾斯和路飞!热情的理想与兄弟情谊96:绿之城!爱尔马尔与功夫海牛97:沙之国的冒险!住在炎热大地的怪物98:沙漠海贼团登场!为自由而生的男人们99:冒牌货的骨气!真心的叛乱军卡缪100:叛乱军战士窥沙!对薇薇发誓的梦101:艳阳的决斗!艾斯VS蝎子男102:遗迹里迷路!薇薇,同伴和国家生存之道103:蜘蛛人咖啡店!8点敌方特务集合104:路飞VS薇薇!赌下同伴之泪的誓言105:阿拉巴斯坦战线!梦之城雨地106:一筹莫展的陷阱!突人雨宴当中107:理想乡作战开始!开始活动的叛乱108:恐怖的香蕉鳄鱼与Mr.王子109:通过逆转大逃亡的关键!蜡烛球110:无情的死斗!路飞VS克洛克达尔111:向着奇迹奔跑!阿拉巴斯坦动物岛112:叛乱军VS国王军!决战在阿尔巴那113:叹息的阿尔巴那!激斗,跑得快队长114:为了同伴的梦想发誓!决斗鼹鼠土堆第四街115:本日大公开!模仿模仿合成脸116:变身为娜美!冯.克雷连打芭蕾拳法117:娜美的旋风注意报告!天候棒炸裂118:皇族的秘宝!古代兵器冥王119:豪剑的精髓!斩钢铁之力与万物的呼吸120:战争结束了!窥沙举起了白旗121:薇薇声音的归宿!英雄从天而降122:沙鳄鱼VS水路飞!决斗第二回合123:鳄鱼!向着王家之墓飞奔吧,路飞124:恶梦之时逼近!这里是沙沙团秘密基地125:伟大之翼!我的名字是国家守护神贝尔126:超越!雨水降落在阿拉巴斯坦127:放下武器吧!海贼和坚守的正义128:海贼的宴会!阿拉巴斯坦逃出计划129:离别的日子!薇薇的冒险结束了130:危险的香气!第七位伙伴-妮可.罗宾 TV原创 彩虹色的雾 131:第一个患者!蓝波球的秘密132:航海士的反乱!为了不曾割舍的梦想133:被继承的梦想!咖哩的铁人香吉士134:让花朵绽放!男子汉乌索普的八尺烟花135:传说中的海贼猎人!流浪的剑士索隆136:羊之岛的赛尼和山中的海贼船137:赚了一笔啊!高利货赛尼的野心138:岛上宝物的线索!赛尼海贼团出击139:彩虹颜色雾的传说!露露嘉岛的老人半藏140:永远之国的居民!盘普今海贼团141:回想故乡!逃离不出的海贼墓场142:乱战必死!贝特的野心与彩虹之塔143:就这样传说开始了!去彩虹的那面 十 空海漫游（BOSS：神艾尼路。SPECIAL：库力克 战鬼瓦夷帕 原神科尔） 144:被夺走的记录!打捞之王人猿145:怪物登场!别对白胡子出手146:别小看梦想!嘲笑之镇”魔谷镇”147:海贼的最高峰!谈梦想的男人和海底探索王148:传说的一族!大话王诺兰德149:向云大满驼!追击南南见鸟150:梦想已完结了吗?贝拉密VS猿山联合军151:一亿的男人!世界最高权力和黑胡子海贼152:让船航向天空!搭上突激的海流153:这里是空之海!空之骑士和天国之门154:神之国!住在云上的天使们155:禁断的大地!神所居住的岛屿和天的制裁156:这么快就成罪犯了!SKYPIEA的执法者157:要逃跑吗!已经开始进行的神的试练158:可爱大道的陷阱!万能的神.艾涅尔159:向前,乌鸦丸号!目标活祭坛160:生存率10%!心网使者的神官大悟161:球的试练的威协!迷失森林的死斗162:乔巴危险!原来的神VS神官修罗163:越来越不可思议!绳的试练和爱的试练164:点燃香朵拉的灯吧!战士瓦夷帕165:天空的黄金乡加雅!目标神之社166:寻找黄金前夜的祭尊!对”大地”的想法167:神.艾涅尔登场!生存战斗的夜鸣曲168:长牙蟒蛇!终于到了生存者游戏的时间169:舍命的排击!(战鬼)瓦夷帕的觉悟170:空中的激战!海贼索隆VS战士布拉哈姆171:呼叫的燃烧炮!路飞VS战鬼瓦夷帕172:沼的试练!乔巴VS神官涅磐173:无敌的能力!艾涅尔的真面目174:幻之都市!雄伟的香多拉遗迹175:生存率0%!乔巴VS神官欧姆176:登上”巨大豆蔓”!上层遗迹的死斗177:铁的试练的重头戏!白荆死亡决斗178:迸出火花的斩击!索隆VS神官欧姆179:崩溃的上层遗迹!走向曲终的五重奏180:古代遗迹的对决!神.艾涅尔的目的181:前往无边无际大地的野心!方舟箴言 182 最后的激战!海贼路飞对神艾尼路!!183 MAXIM浮出水面!起动Despair184 路飞落下!神之载决和娜美的愿望!!185 苏醒的二人！燃烧吧爱情的救援前线！！186 走向绝望的狂想曲，空岛灭亡迫在眉睫！！187 钟声的引导！大战士与探险家的故事 188 从诅咒的束缚中解放！大战士流下热泪！！189 你是我永远的挚友！响彻广阔无边大海的誓约之钟190 天使岛毁灭！雷迎降临的恐怖！！191 放倒巨大豆蔓！逃出空岛的最后希望！192 神之国的奇迹！响彻天堂的岛之歌193 战争结束！响彻远方 充满自豪地幻想曲194 我来到了这里！历史正文的编织者195 走吧，回青海去！！编织出幻想的最终乐章 TV原创 G8要塞 196:发布非常事态命令!恶名昭著海贼船潜人197:料理人香吉士!在海军食堂发挥厨师的真正价值198:被囚的索隆与乔巴的紧急手术199:逼近的海军搜查网!第二名被囚者200:拼命的路飞和香吉士!救出大作战201:热血特种部队参战!桥上的攻防战202:突破包围网!夺回黄金梅利号203:消失的海贼船!要塞攻防第二回合204:黄金夺回作战与威霸回收作战205:一网打尽计划!强纳森自信的秘策206:别了海军要塞!逃出的最后攻防战 十一 长链岛冒险（BOSS：银狐福克西。） 207:长链岛的大冒险208:福克西海贼团与DAVY BACK FIGHT争霸战209:第一回战!环岛皮划艇赛210:银狐福克西!猛烈的干扰攻势211:第二回合!GROGGY RING赛212:连续的红牌!GROGGY RING213:第三回战!滚轴溜冰追逐战214:白热化爆走比赛!突人最终轮215:轰鸣的热球刚球!海贼躲避球赛216:悬崖的决战!不倒翁摔倒了217:船长对决!最终战单挑格斗218:迟缓攻击全开VS不死身的路飞219:壮绝激烈的单挑对决!命运何去何从 TV原创 失忆岛 220:失去了,被夺走了!你是谁?221:抱着笛子的谜之少年和罗宾的推理222:出击,夺回记忆!海贼团上陆223:露出獠牙的索隆!堵在面前的野兽224:原形毕露!记忆小偷最后的攻击225:自尊心强大的男人!银狐福克西226:最接近无敌的男人!最危险的男人 十二 水之都（BOSS：CP9路奇。SPECIAL：冰山 帕裏 青雉）新船员：罗宾 弗兰奇 阳光万里号 227:海军总部大将青雉!最强战斗力的威胁228:橡胶与冰的决斗!路飞VS青雉229:飞驰的海列车与水之都WATER SEWEW230:水上都市的冒险!目标巨大的造船厂231:福兰克一家与冰山先生232:格雷勒公司!壮观的一号船坞233:海贼诱拐事件与等待死亡的海贼船234:救出伙伴!猛攻福兰克屋235:月下的大干戈!悲伤下飘动的海贼旗236:路飞VS乌索普!男儿气魄的大碰撞237 激震水之都!被袭击的冰山!238 橡皮人对喷火的改造人239 犯人是草帽海贼团?水之都的护卫240 永远的离别?招来黑暗的女子尼可.罗宾241 抓住罗宾!草帽海贼团的决议242 信号伴随着炮击！开始行动的CP9243 取下面具的CP9！惊人的真面目244:隐藏的羁绊！冰山与福兰奇245:回来吧罗宾！与CP9的对决246:草帽海贼团全灭？豹型的威胁！247:被船所爱的男人！乌索普的眼泪！248:福兰奇的过去！海列车起航之日249:斯潘达姆的阴谋！海列车颠簸之日250:传说男人的末日！海列车哭泣之日251:背叛后面的真相！罗宾悲伤的决意！252:分离同伴的汽笛！飞驰而去的海列车253:香吉士突入！暴风雨中的海列车大战！254:娜美的全力呼唤！草帽小子路飞复活！255:另一辆海列车？火箭人出击！256.拯救同伴！向拳头发誓的敌我之羁绊！257.击碎大浪！路飞和索隆的最强合体技258.谜之男登场！？他的名为狙击王！259.厨师间的对决！香吉士对拉面拳法！260.车顶上的决斗！福兰奇对内罗261.鬼斩索隆对斩船人T骨262.罗宾争夺战！狙击王的奇策！！263.司法之岛！Eneas Lobby的全貌！264.登陆作战开始！突击！草帽小子海贼团！265.路飞猛冲！司法之岛的大决战！266.与巨人族的攻防！打开第二道门！267.杀出活路！腾空而起的火箭人！268.跟上路飞的步伐！草帽小子一伙全力作战269.路飞海贼团奔向新的战场！270.还我罗宾！路飞对布鲁诺！271.不要停止脚步！点起反击的狼烟！272.路飞就在眼前！前往法院前广场集结273.为了捍卫同伴!二档发动274.回答我罗宾!草帽小子海贼团的呼唤!275.罗宾的过去！被称为恶魔的少女！276.宿命的母女！母亲之名奥尔维亚！277.奥哈拉的悲剧278.说你想活下去!279,跳下瀑布吧！路飞的信念!280.男人的生存之道！索隆的野心和乌索普的梦想！281.泪水编织而成的同伴的羁绊！娜美的世界地图！282.离别造就了男子汉！香吉与乔巴.283.一切都为了伙伴！黑暗中的女人罗宾！284.绝不交出设计图！福兰奇的决断！285.夺取五把钥匙！草帽海贼团 VS CP9！286.恶魔果实的能力！卡库加布拉大变身287.死也不踢女人！男子汉香吉的骑士道！288.猫头鹰的失算！我的可乐是生命之水！289.索隆的新招炸裂登场！剑名：狙击王！290.无法控制！乔巴的蓝波球大变身!291.捕头路飞再登场！是梦境还是现实彩票大骚动！292.城内的散年糕大竞赛！大红鼻子的阴谋！293.泡沫使用者卡里法！逼近娜美的肥皂危机！294.凶报传来,屠魔令发动295.五个娜美？伴随幻象的反击！296.娜美的决断,攻击暴走的乔巴297.猎人香吉登场？赠送给谎言狼的挽歌298.灼热的足技,SANJI的反击299.白刃之间的猛袭!ZORO和KAKU强力斩击对决300.鬼神索隆,气势逼人的阿修罗化身301.斯潘达姆惊愕！屹立于司法塔上的英雄302.罗宾解放！路飞与路奇的激战303.犯人是捕头路飞？追寻消失的大樱花304.不战胜对手就保护不了任何人!3档发动305.战栗的过去！黑暗的正义与罗布·路奇306.梦幻的人鱼出现？在渐渐失去意识之时307.炮火中沉没的岛屿！福兰奇绝望的呼喊！308.等待路飞！踌躇之桥上的死斗！309.充满愿望之拳！路飞拼尽全力的[机关枪]！310.来自大海的朋友！草帽小子一伙最深的友情311.全员大逃亡!海贼的胜利之道312.感谢你,梅利!朦胧之雪中的离别之海313.打破宁静！持有爱之拳的海军中将314.最强的家族!路飞父亲的惊人身份315.新世界!伟大航路的去向316.香克斯的行动!连接暴走时代的纽带317.寻找箭鱼的少女！水之都大搜查318.坚强的妈妈！索隆家务活闹剧！ 319.山治惊愕！谜之老头与超美味料理320.终于全体悬赏！超过6亿的一伙人！321.君临大海的百兽之王！梦想之船终于完成！322.再见了亲爱的小弟们！弗兰奇起航323.走出水之都！男子汉乌索普决斗的了断 324.巡回的悬赏令！欢声雀跃的故乡 向前迈进的船！ 番外篇 艾斯被秒 325.最凶险的能力！袭击艾斯的黑胡子的黑暗 TV原创 海贼旗猎人（BOSS：爸爸？） 326.谜一般的海贼一行！阳光号和危险的陷井327.SUNNY号大难当前！咆哮的超速秘密机器328.沉没于新世界中的梦想！失意的海贼帕泽鲁329.袭击而来的刺客们！冰上的大决斗330 草帽一伙陷入苦战！嵌入旗帜的海贼魂331 酷热全开!迫近的双子磁力量332.混乱不堪的公馆！发怒的首领与被囚的一伙人333.重生的不死鸟！向同伴许下的誓言海贼旗之梦334.炽热的决战！路飞VS灼热的首领335.相会新世界！与勇猛的海贼的告别 TV 原创 336.乔巴人出动！保卫海滨的电视台 十三僵尸岛（BOSS：奥兹 月光莫利亚。 SPECIAL：罗拉）新船员：音乐家布鲁克 337 闯进魔之海！ 浮现于浓雾中的迷之骷髅338 遇见人的喜悦！骷髅绅士的真面目339 怪现象频发！登录[Thriller Bark]340 被称作天才的男人！霍古巴克现身341 娜美千钧一发！僵尸宅院和透明人342 僵尸之迷!恶梦般的霍古巴克研究所343 他的名字是莫里亚！操纵影子的大海贼设下的陷阱344 僵尸歌的飨宴！夜袭钟的黑暗声音345 全是动物！贝罗娜的不可思议的花园346 消失的草帽一伙！出现了神秘的剑客347 残余的骑士道348 从天而降的男人!剑侠鼻歌349 路飞紧急事态!最强影子的去向350 被称为魔人的战士奥兹复活351 500年后的苏醒!!奥兹开眼352 信念的祈求!! 死守爆炸头的布鲁克353 男子汉不灭的誓言！！在远方的天空下等待的朋友354 定将再会!!布鲁克许下誓言的海岬355 食物 娜美和影子！！路飞愤怒的大反击356 乌索普最强?消极之灵就交给我了357 将军僵尸被秒杀!奥兹的冒险心情358 炎之骑士山治！！踢毁虚假的婚礼359 透明的恩怨?山治被夺走的梦360 救命啊英雄 不死之身的敌人幽灵公主361 吓破胆的佩罗纳！！名副其实的牛皮大王乌索普362 屋顶上飞舞的斩击 索隆与龙马的决斗363 激怒的乔巴！霍古巴克魔鬼般的医术364 奥滋的巨吼！死出来草帽小子一伙365 敌人是路飞？最强僵尸对草帽小子一伙366 受死吧阿布萨罗姆！娜美的友情雷击367 扳回一城！必杀草帽合体技368 无声无息的袭击！迷之访问者暴君熊！369 奥滋加莫里亚！力量与智慧的最凶合体370 逆转战局的秘策！梦魇 路飞登场371 草帽小子一伙全军覆没！影影能力全开372 超绝战斗开始！路飞VS路飞373 决战迫近 重撞 最后的一击374 身体消失 照射在恶魔之岛上的朝阳375 永不完结的危机 草帽小子以获得抹杀命令376 全部弹开 熊的肉垫果实能力377 伙伴的痛苦就是我的痛苦 佐隆奋不顾身的战斗378 遥远的誓言 海贼之歌与小鲸鱼379 布鲁克的过去 欢乐的伙伴悲伤的离别380 宾克斯的美酒 连接过去和现在的歌381 新的伙伴音乐家鼻歌布鲁克 TV原创 382 迟缓果实的威胁 银狐福克西再现383 宝藏争夺战 崩溃的SPA ISLAND号384 布鲁克大奋斗 成为真正伙伴的艰辛道路？ 十四（香波地群岛篇） 385 环绕伟大航路半圈！到达！红土大陆386 憎恨草帽小子一伙的男人！铁面男迪巴鲁登场！387 再次相会！救出被囚的鱼人388 悲剧！隐藏在面具下的迪巴鲁的真面目389 爆炸！桑尼号超级秘密武器狮吼炮390 目标直指鱼人岛！肥皂泡群岛登陆391 暴虐！香波迪群岛的支配者天龙人392 全新的对手集结！超新星11人393 目标是凯米！！人贩子的魔手迫近394 救出凯米 群岛上残留着黑暗的历史395 UTIME LIMIT 人类拍卖会开幕396 铁拳炸裂！勇闯竞拍场397 特大恐慌！拍卖会场的死斗！398 大将黄猿出动！ 香波迪群岛的骚乱！399 突破包围网！ 海军VS三名船长！400 罗杰和雷利 海贼王和他的右手腕401 无法回避？大将黄猿的光速踢！402 压倒性优势！海军战斗兵器和平主义者403 新的强敌出现！挑着斧头的战桃丸404 大将黄猿的猛攻 草帽一伙一筹莫展！405 消失的伙伴们 草帽小子一伙的末日406 时代剧特别篇 捕头路飞再次登场407 时代剧特别篇 打破！斯里拉商会的圈套408 登陆！男子禁忌之岛 亚马逊·百合409 急迫！伙伴们的去向 女人岛的冒险410 全体一塌糊涂！海贼女帝汉库克411 后背隐藏的秘密 路飞遭遇蛇姬412 无情的判决！被石化的玛格雷特413 路飞大苦战！蟒蛇姐妹霸气的力量！！414 全力以赴的战斗！橡胶VS蛇蛇415 汉库克的告白 姐妹们难言的过去416 拯救艾斯！新的目的地是大监狱417 恋爱就象暴风雨！婀娜的汉库克418 伙伴们的行踪 气象科学与机关岛419 伙伴们的行踪 巨鸟之岛与桃色乐园！420 伙伴们的行踪 连接岛屿的桥与食人植物421 伙伴们的行踪 消极公主与恶魔王 推进城 Impel Down 422 决死的潜入！海底监狱 Impel Down423 地狱里重逢！？四分五裂果实的能力者！424 粉碎！红莲地狱 巴基的华丽大作战425 监狱最强的男人！毒人·麦哲伦登场426 剧场版联动特别篇 蠢蠢欲动 金狮子的野心427 剧场版联动特别篇 被盯上的小东海428 剧场版联动特别篇 阿密格海贼团的猛攻429 剧场版联动特别篇 激战！路飞VS拉鲁格430 被囚禁的王下七武海！海侠甚平431 牢头萨鲁德得斯的陷阱 LV3·饥饿地狱432 解放的白鸟！再会！冯·克雷433 署长麦哲伦出动 完成！草帽小子包围网434 全部战力集合！LV4·灼热地狱的决战435 麦哲伦够强！冯·克雷临阵逃亡436 一决雌雄！路飞孤注一掷的最后一击437因为是朋友！冯?克雷拼死的营救行动！438 地狱中的乐园！因佩尔LV5.5（2010年2月14日放送）439「路飞治疗开始 伊万小姐奇迹的力量!!」440 相信奇迹！冯·克雷魂的声援441「路飞复活伊娃的越狱计划启动」442 艾斯压送开始 最下层的LV6攻防443 最强小队结成 震憾！推进城444 更加混乱 黑胡子蒂奇袭来445 危险的相遇 黑胡子和雨之希留446 凭意志也不能倒下 认真起来的汉尼拔447 愤怒的JET手枪 路飞VS黑胡子448 阻止麦哲伦！伊万小姐绽放奥义449 麦哲伦的奇策 受阻的越狱计划450 越狱小队 危在旦夕 禁断招术 毒之巨兵451 发生吧 最后的奇迹 突破正义之门452 目标海军本部 营救艾斯之旅453 同伴的下落 空岛报告和改造动物454 伙伴们的下落!巨岛的比奈与桃色的对决455 伙伴们的行踪 革命军和暴食森林的陷阱456 伙伴们的行踪 巨大的墓碑与内裤的恩情 海军本部篇（顶上战争） 457 到达海军总部之前的回想特别篇 兄弟的誓言（动画原创）458 到达海军总部之前的回想特别篇 集合！三大将（动画原创）459 决战临近 海军最强布阵完成460 巨大舰队出现 袭来！白胡子海贼团461 决战拉开帷幕 艾斯和白胡子的过去462 毁灭世界的力量！地震果实的能力463 燃尽一切！大将赤犬的能力464 恶魔的后代！小奥兹 Jr. 勇往直前！465 只有胜者才是正义 发动！战国的作战466 草帽小队登场!风云突变的战场467 就算死也要救你！路飞VS海军 战斗开始468 激战的连续！能力者军团VS能力者军团469 熊发生的异变 伊万愤怒的一击470 剑豪米霍克 逼近路飞的黑刀的斩击471 歼灭作战启动 和平主义者军团的威力472 赤犬的谋略！被陷害的白胡子473 包围作战运作！白胡子海贼团陷入危机！474 处刑执行命令下达 突破包围壁！475 突入最终局面 白胡子起死回生的一招476 路飞拼尽全力 奥里斯广场的全力一战477 消减生命的力量 兴奋·荷尔蒙再次使用478 为了约定！！激斗！路飞与可比479 处刑台就在眼前！开启通往艾斯的道路480 各自选择的道路 路飞VS卡普481 艾斯救出!四皇白胡子最后的船长命令！482 烧尽火焰的能力!赤犬无情的追击!483 寻找答案 火拳艾斯死于战场484 海军本部崩溃 白胡子无言的愤怒！485 一决胜负 白胡子VS黑胡子海贼团486 演出开幕 黑胡子显示出的真正目的487 大将赤犬的执着 袭向路飞的岩浆铁拳488 拼命的呐喊 改变命运的充满勇气的数秒489 香克斯出现！巅峰对决终于结束 大事件后篇 490 群雄割据 新时代开始！491 登陆女儿岛 逼近路飞的残酷现实 海贼王×美食猎人 特别联合篇 492 最强组合！奋斗 路飞和阿虏（1小时特别篇） 兄弟相遇的回忆篇 493 路飞和艾斯 兄弟相遇的故事！494 萨博登场 不确定之物终点站的少年495 我不会逃！艾斯拼死的营救作战496 有朝一日要出海！三顽童推杯换盏结兄弟！497 告别达旦一家？建成！秘密基地（动画原创）498 路飞拜师？和海贼王交锋过的男人（动画原创）499 和巨虎的决战 成为船长的人是谁？（动画原创）500 被夺去的自由！逼近三兄弟的贵族的陷阱！501 被释放的火炎 Gray terminal的危机502 自由在哪里? 少年悲剧的出航!503 拜托你了！兄弟寄来的信504 为了兑现约定 各自开始旅程！505 好想见他们！路飞泪的呼喊！506 草帽一伙儿 震惊！传来的噩耗 修行与两年后 第507话 和冥王雷利重逢 路飞决断之时第508话 回到船长身边！空岛逃离与浮游岛的案件第509话 接触！大剑豪米霍克 索隆 意气用事的决斗！第510话 山治受难，返回王国的女王！第511话 竟然再次登陆！路飞来到海军本部！第512话 传达给伙伴们 四处传播的大新闻！第513话 海贼们开始行动！惊天动地的新世界！第514话 地狱中求生还 山治，赌上男人尊严的一战！第515话 还要变得更强 索隆向船长的发誓！第516话 路飞开始修行 2年后前往约定之地第517话 新章开幕 草帽一伙再集结！第518话 一触即发！路飞VS伪路飞第519话 被阻击的草帽一伙第520话 假草帽一伙的威胁第521话 见识修行的成果 鱼人岛篇 第522话 路飞踏上前往新世界的航程第523话 守卫桑尼号的男人！第524话 大海原的恶魔现身第525话 失散的草帽一伙第526话 海底火山喷发第527话 登陆鱼人岛！美丽的人鱼们第528话 香吉士生命垂危第529话 鱼人岛灭亡？夏利的预言第530话 鱼人岛之王 海神尼普顿第531话 龙宫城 被所救的鲨鱼带过来第532话 爱哭的胆小鬼！硬塔壳的人鱼公主第533话 发生紧急事态 被占领的龙宫城第534话 龙宫城震动 白星诱拐事件第535话 霍迪袭来 复仇计划开始第536话 龙宫城的决战 卓洛VS霍迪第537话 守护白星！邓肯的追击第538话 草帽一伙战败？霍迪掌控龙宫城第539话 复苏的因缘 娜美和鱼人海贼团第540话 解放奴隶的英雄 冒险家泰格第541话 黄猿登场！瞄准泰格的陷阱 美食的俘虏特别篇第542话 再会 阿虏和路飞 寻找海鲜果实（46分钟特别篇） 继续============================================ 第543话 英雄的末路 泰格令人震惊的真相第544话 海贼团分裂 甚平VS阿龙第545话 鱼人岛震动！漂流而来的天龙人第546话 突然的悲剧！封闭未来的凶杀第547话 再回到现在 霍迪开始行动第548话 王国震惊 尼普顿处刑命令第549话 产生的裂痕！路飞VS甚平第550话 霍迪的异变 凶药真正的力量第551话 决战开始 乔克尔特广场第552话 震惊的告白 乙姬暗杀的真相第553话 白星的眼泪！路飞终于登场第554话 大激战！草帽小子一伙VS10万敌人第555话 绝招炸裂！索隆、香吉出击！第556话 初次亮相！桑尼号的秘密武器！第557话 钢铁海贼！弗兰奇将军登场第558话 诺亚接近！鱼人岛毁灭的危机第559话 快点！路飞！白星危在旦夕！第560话 激斗开始！路飞VS霍迪！第561话 大乱站！草帽小子一伙VS新鱼人海贼团！第562话 路飞败北！？霍迪复仇的时刻第563话 令人震惊的真相！霍迪的真实身份！第564话 一切归零！对路飞强烈的愿望！第565话 路飞全力的一击！火拳枪炸裂第566话 终于了结！与霍迪的最终决战第567话 停下诺亚！拼命的橡皮机关枪！第568话 迈向未来！通向太阳的道路！第569话 被揭开的秘密 古代兵器的真相第570话 草帽小子一伙惊愕！新的海军元帅！第571话 最爱糖果！四皇毕古麻姆第572话 前途多艰 新世界的陷阱第573话 终于出航！再见鱼人岛第574话 迈向新世界！目标最强海域 Z的野心篇第575话 Z的野心篇 小小巨人莉莉！第576话 Z的野心篇 谜之最强军团登场！第577话 Z的野心篇 决死的大脱逃作战！第578话 Z的野心篇 路飞VS修佐！ 燃烧岛篇（庞克哈扎德） 第579话 登陆！燃烧岛庞克哈萨德第580话 灼热的战斗！路飞VS巨大龙！第581话 一伙人骚然！令人震惊的独头武士登场！第582话 惊愕！终于显露出的岛上的秘密第583话 救出孩子们！全员战斗开始第584话 剑术对决 布鲁克VS神秘的躯体武士第585话 七武海！托拉法尔加·劳第586话 大危机 路飞沉入极寒之湖第587话 激斗！劳VS斯摩格中将第588话 2年后的重逢！路飞与劳第589话 世界最邪恶 恐怖科学家凯撒 TV原创（联合篇）第590话 奔跑吧最强军团！阿虏和路飞和悟空！ 继续================================ 第591话 乔巴震怒 主人惨无人道的实验第592话 全部抹杀！传说中的杀手袭来！第593话 拯救娜美！路飞的雪山之战第594话 结成！路飞·劳的海贼同盟！第595话 抓住MASTER 海贼同盟开始作战！第596话 全灭危机 死亡怪物飞来第597话 大激战 凯撒发动真正的能力！第598话 劈开火海的武士！狐火锦卫门第599话 冲击！神秘男人 维尔戈真正的身份第600话 守护孩子们！袭来的Master的魔爪第601话 震惊新世界 凯撒恶梦的实验第602话 史上最邪恶的杀戮武器！死亡国度第603话 反击开始！路飞?劳全部逃出第604话 目标R栋！海贼同盟急行军！第605话 达斯琪的泪 G-5的决死作战第606话 背叛的中将！鬼竹之维尔戈第607话 白热化激战！路飞对凯撒第608话 幕后黑手 多福朗明哥出手第609话 路飞冻死？恐怖的雪女 第610话 碰撞的双拳！两中将之战 第611话 小龙！桃之助现身 第612话 暴风雨中的死斗！草帽一伙儿VS雪女 第613话 奥义爆发！索隆最强的一刀流 第614话 保护朋友！莫查拼死奔逃 第615话 茶胡子的悲痛！路飞愤怒的一击 第616话 令人震惊的决斗！白猎VS维尔戈 第617话 击败凯撒！最强的灰熊铳 第618话 袭来！来自德雷斯罗萨的刺客 第619话 大爆发！无敌的弗兰奇将军第620话 穷途末路！PUNK HAZARD大爆炸 第621话 捕获凯撒！将军炮炸裂 第622话 感动再会！桃之助与锦卫门 第623话 离别之时 庞克哈萨德出航 第624话 G5全灭！多佛朗明哥急袭第625话 紧迫！青雉VS多弗朗明哥第626话 消失的凯撒！海贼同盟出击第627话 路飞命丧大海？海贼同盟瓦解第628话 炸裂！路飞愤怒的铁拳 德雷斯罗萨篇 第629话 激震！撼动新世界的超级新闻第630话 冒险！爱与热情的国度 德雷斯罗萨第631话 狂热的漩涡 斗牛竞技场第632话 危险的恋情 舞女维奥莱特第633话 最强的无名战士！路西登场第634话 海贼贵公子 卡文迪许第635话 命运的再会 鬣狗贝拉米第636话 超级新星！吃人的巴托洛米奥第637话 群雄割据！B组白热化！第638话 一击必杀！惊愕的国王之拳第639话 斗鱼袭来！突破死亡铁桥第640话 冒险！妖精之岛Green Bit第641话 不为人知的世界 冬塔塔王国第642话 世纪的谋略 多弗朗明哥行动！第643话 惊天动地！大将滕虎的实力第644话 愤怒的一击！巨人VS路西第645话 破坏炮炸裂！路西命悬一线第646话 传说中的海贼 首领青椒！第647话 光与影 潜藏于德雷斯罗萨的阴影！第648话 出击！传说中的英雄乌索兰德第649话 激战之胜负 路西对青椒第650话 路飞与 宿命的剑斗士蕾贝卡第651话 守护到底！蕾贝卡和玩具军人第652话 最后的激战区 D组开战第653话 决战！乔拉对草帽一伙第654话 美剑！白马的卡文迪许！第655话 激烈冲突！香吉士VS多福朗明哥第656话 蕾贝卡必杀剑！背水的剑舞第657话 最强的战士 罗根VS蕾贝卡第658话 震惊！玩具士兵的真正身份第659话 战栗的过去！德雷斯罗萨的秘密第660话 噩梦！德雷斯罗萨悲剧的一夜第661话 七武海对决 罗VS多弗朗明哥 2014-09-14第662话 两雄对峙！草帽VS天夜叉 2014-09-21第663话 路飞惊愕 继承艾斯意志之人 2014-09-28第664话 SOP作战开始 乌索兰度突击 2014-10-05第665话 心潮澎湃 蕾贝卡VS斯雷曼 2014-10-12第666话 决出胜者！？D区令人震惊的结果 2014-10-19第667话 大将的决断 藤虎VS多弗朗明哥 2014-10-26第668话 决赛开始 英雄迪亚曼蒂登场 2014-11-02第669话 移动的城堡！最高干部琵卡出现！ 2014-11-09第670话 龙之爪炸裂！路西使出惊人一击！ 2014-11-16第671话 打倒砂糖 小人军突击！ 2014-11-23第672话 最后的光明 我们队长的秘密！ 2014-11-30第673话 破裂人 古拉迪乌斯大爆炸！ 2014-12-07第674话 骗子乌索兰度正在逃亡！ 2014-12-14第675话 命运中的邂逅 居鲁士和力库王 2014-12-21第676话 作战失败！英雄乌索兰度逝世！？ 2014-12-28第677话 传说复活！居鲁士的全力一击 2015-01-11第678话 火拳炸裂！烧烧果实力量复活 2015-01-18第679话 飒爽登场 革命军参谋总长萨博！ 2015-01-25第680话 恶魔的陷阱 德雷斯罗萨歼灭作战 2015-02-01第681话 悬赏5亿的男人 被盯上的乌索兰度！ 2015-02-08第682话 突破敌阵 路飞索隆开始反击 2015-02-15第683话 大地轰鸣 破坏神巨大琵卡降临 2015-03-01第684话 大集结！路飞和凶恶战士军团 2015-03-15第685话 突飞猛进！路飞军团VS琵卡！ 2015-03-22第686话 冲击告白！罗对灵魂的热血誓言！ 2015-03-29第687话 大冲突！参谋总长萨博VS大将藤虎 2015-04-05第688话 命悬一线 中了圈套的路飞！ 2015-04-12第689话 奋力逃脱！路飞起死回生的象枪 2015-04-19第690话 共同战线 路飞通往胜利的突破口 2015-04-26第691话 第二位武士 阵雨勘十郎登场 2015-05-03第692话 激战琵卡战 索隆必杀一击！ 2015-05-10第693话 小人族的公主 被抓的曼雪莉 2015-05-17第694话 不死之身！恐怖的人头玩具军团 2015-05-24第695话 拼上性命！路飞是获胜的王牌 2015-05-31第696话 泪眼相逢 蕾贝卡和居鲁士！ 2015-06-07第697话 一击必杀 拯救德雷斯罗萨的男人 2015-06-14第698话 愤怒爆发 路飞和罗最强的秘计 2015-06-21第699话 高贵一族 多弗朗明哥的真正身份！ 2015-06-28第700话 究极的力量 手术果实的秘密！ 2015-07-05第701话 悲伤的记忆 白色城镇的少年罗！ 2015-07-12第702话 天龙人！多弗壮绝的过去 2015-07-19第703话 苦难之路 罗和柯拉松的命之旅程 2015-08-02第704话 时限迫近！夺取手术果实！ 2015-08-09第705话 觉悟之时 柯拉松告别的笑容！ 2015-08-16第706话 冲吧 罗 温柔男人最后的战斗！ 2015-08-23第707话 冲向自由！罗 注射射击爆发 2015-08-30第708话 狂热之战 罗VS多弗朗明哥 2015-09-06第709话 干部决斗 崇高的海尔丁 2015-09-13第710话 爱之决战 新栋梁老蔡 VS BABY5 2015-09-20第711话 男子汉的坚持 贝拉米最后的突击！ 2015-09-27第712话 疾风怒涛 哈库巴VS德林杰 2015-10-04第713话 致敬神拳 屏障屏障手枪发动！ 2015-10-11第714话 拯救治愈公主 曼雪莉！ 2015-10-18第715话 男子汉的决斗 赛尼奥尔爱的挽歌 2015-10-25第716话 死亡星屑 迪亚曼蒂疾风骤雨般的猛攻 2015-11-01第717话 雷之破坏剑！居鲁士愤怒的一击！ 2015-11-08第718话 大地横断 巨像琵卡的奇袭战！ 2015-11-15第719话 空中决战 索隆新必杀奥义爆发！ 2015-11-22第720话 永别了！贝拉米 告别的一击！ 2015-11-29第721话 罗战死 路飞愤怒的猛攻！ 2015-12-06第722话 执念之刃 逆袭的伽马刀！ 2015-12-13第723话 霸气冲突 路飞VS多弗朗明哥 2015-12-20第724话 无法攻击 托雷波尔冲击的秘密 2015-12-27第725话 愤怒爆发 全部由我来承担 2016-01-10第726话 四档！惊异的弹力人！ 2016-01-17第727话 大逆袭！多弗朗明哥的觉醒！ 2016-01-24第728话 路飞！使尽全力的狮子火箭炮 2016-01-31第729话 火焰龙王 将路飞的性命守护到底 2016-02-14第730话 奇迹之泪 曼雪莉的战斗！ 2016-02-21第731话 生命的极限 阻止死之鸟笼！ 2016-02-28第732话 或生或死 命运的倒计时 2016-03-06第733话 讨伐天 路飞愤怒的大猿王枪 2016-03-20第734话 朝着自由！喜悦的德雷斯罗萨！ 2016-03-27第735话 前所未闻 大将藤虎冲击的决断！ 2016-04-03第736话 激烈暴走 极恶的世代出动！ 2016-04-10第737话 传说诞生 革命战士萨博的冒险！ 2016-04-17第738话 兄弟的羁绊 路飞?萨博重逢密谈 2016-04-24第739话 最强的生物 四皇?百兽凯多 2016-05-01第740话 藤虎出动 草帽一伙完全包围网 2016-05-08第741话 非常事态 被拐走的蕾贝卡！ 2016-05-15第742话 父女的羁绊 居鲁士和蕾贝卡！ 2016-05-22第743话 男子汉的坚持 路飞VS藤虎 决一雌雄 2016-05-29第744话 无处可逃 大将藤虎无情的追击！ 2016-06-05第745话 接纳酒 草帽大船团成立！ 2016-06-12第746话 群雄割据 狂暴的新世界怪物们 2016-06-19第747话 动画原创 银之要塞 路飞和巴托的大冒险 2016-06-26第748话 动画原创 地下迷宫 路飞VS推车人 2016-07-03第749话 动画原创 剑技白热 罗?索隆终于登场！ 2016-07-10第750话 动画原创 绝体绝命 路飞极限的灼热决战 2016-07-17 18th 佐乌篇第751话 冒险开幕 到达梦幻之岛佐乌岛！ 2016-07-31第752话 新七武海 传说?白胡子的儿子登场 2016-08-07第753话 拼死登象 巨象背上的大冒险！ 2016-08-21第754话 战斗开始 路飞VS毛皮族！ 2016-08-21第755话 卡鲁秋！草帽一伙重新团聚 2016-09-04第756话 反击开始 卷眉毛一伙大活跃！ 2016-09-11第757话 威胁来袭 百兽海贼团杰克！ 2016-09-25第758话 日间之王 犬岚公爵登场！ 2016-10-02第759话 夜间之王 猫蝮蛇老大登场 2016-10-09第760话 首都毁灭 卷眉毛一伙登陆！ 2016-10-16第761话 极限逼近 毛皮族和一伙的羁绊！ 2016-10-23第762话 恶童返乡 四皇BIG MOM的刺客 2016-10-30第763话 失踪的真相 山治惊愕的请贴 2016-11-06第764话 给伙计们 山治离别的纸条 2016-11-13第765话 去见猫蝮蛇老大 2016-11-20第766话 路飞决断 山治退出的危机！ 2016-11-27第767话 一触即发 犬和猫和武士！ 2016-12-04第768话 第三个人！忍者?雾之雷藏登场 2016-12-11第769话 赤之石！通往大秘宝的路标 2016-12-18第770话 和之国的秘密 光月家和历史正文 2016-12-25第771话 男人的誓言 路飞和光月桃之助 2017-01-08第772话 传说中的航海 犬和猫和海贼王！ 2017-01-15第773话 恶梦重现 不死之身杰克强袭 2017-01-22第774话 佐乌防卫战 路飞和象主！ 2017-01-29第775话 拯救巨象 草帽急救大作战！ 2017-02-05第776话 离别的下象 夺回山治的出海！ 2017-02-12第777话 参加世界会议 薇薇公主和白星公主 2017-02-19第778话 参加世界会议 蕾贝卡和樱花王国 2017-02-26第779话 凯多再次来袭 威胁重重极恶的世代！ 2017-03-05第780话 动画原创 空腹战线 路飞和海军超新星！ 2017-03-19第781话 动画原创 执着的3人 草帽一伙大追击战！ 2017-03-26第782话 动画原创 恶魔之拳 决战！路飞VS古兰特 2017-04-02 19th 蛋糕岛篇第783话 山治还乡 去BIG?MOM海域！ 2017-04-09第784话 0和4 遭遇！杰尔玛66 2017-04-16第785话 剧毒的危机 路飞和蕾玖！ 2017-04-23第786话 万国！四皇BIG?MOM登场 2017-04-30第787话 四皇之女 山治的未婚妻布琳 2017-05-07第788话 大进击！思食病的MOM 2017-05-14第789话 首都崩溃 BIG MOM和甚平 2017-05-21第790话 四皇之城 到达蛋糕岛 2017-05-28第791话 点心森林 路飞VS路飞！？ 2017-06-04第792话 妈妈的刺客 路飞和诱惑森林！ 2017-06-11第793话 海游国家 杰尔玛之王伽治 2017-06-18第794话 父子对决 伽治VS山治！ 2017-06-25第795话 巨大的野心 BIG MOM与凯撒 2017-07-02第796话 万国的真相 妈妈的恐怖能力！ 2017-07-09第797话 大干部！三将星克力架登场 2017-07-16第798话 8亿之敌 路飞VS千手克力架 2017-07-23第799话 全力对决 四档VS饼干果实能力 2017-07-30第800话 1和2集合 文斯莫克家 2017-08-06第801话 恩人之命 山治与主厨哲普 2017-08-13第802话 恩人之命 山治与主厨哲普 2017-08-20第803话 丢弃的过去 文斯莫克?山治 2017-08-27第804话 向着东海出发 山治下定决心出海 2017-09-03第805话 极限对决 路飞和无限饼干 2017-09-17第806话 饱食之力 新4档坦克人！ 2017-09-24第807话 悲哀的决斗 路飞VS山治（前篇） 2017-10-01第808话 悲哀的决斗 路飞VS山治（后篇） 2017-10-01第809话 复仇的暴风雨 愤怒军团袭来！ 2017-10-15第810话 冒险结束 山治下定决心的求婚 2017-10-22第811话 在此等待 路飞VS愤怒军团 2017-10-29第812话 潜入城堡内 抢夺！路标历史正文 2017-11-05第813话 因缘的对决 路飞与BIG MOM 2017-11-12第814话 灵魂的呐喊 布鲁克 佩德洛 闪电作战 2017-11-19第815话 再见了 布琳泪的决心 2017-11-26第816话 左眼的渊源 佩德洛VS蛋蛋男爵 2017-12-03第817话 烟蒂 山治的结婚前夜 2017-12-10第818话 不屈的灵魂 布鲁克 VS BIG MOM 2017-12-17第819话 母亲的愿望 杰尔玛的失败作品山治第820话 狂奔向山治身边 路飞开始逆袭!第821话 城内动乱 路飞前往约定之地第822话 离别的决心 山治和草帽便当第823话 四皇翻身 拯救布鲁克大作战第824话 约定之地 路飞极限的单枪匹马厮杀第825话 骗子 路飞和山治第826话 山治复活 破坏吧 地狱的茶会第827话 密会 路飞VS火焰坦克海贼团第828话 死之协定 路飞 贝基联合军第829话 路飞暗中行动 茶会即将开始 阴谋的结婚仪式第830话 家人集结 宴会开始 地狱的茶会第831话 假面夫妻 山治 布琳 登场第832话 死亡之吻 四皇暗杀作战开始第833话 归还酒杯 侠客甚平的了断第834话 作战失败 发起反击的BIG MOM海贼团第835话 奔跑吧山治 SOS 杰尔马66第845话：布琳的决心 大起火!诱惑的森林第846话：反击之雷，娜美和雷云宙斯第847话：偶然的再会，山治和陷入恋爱的坏布琳第848话：守护桑尼号 奋战！乔巴&amp;布鲁克]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>One Piece</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loadrunner判断接口返回]]></title>
    <url>%2F2018%2F07%2F11%2Floadrunner%E5%88%A4%E6%96%AD%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%2F</url>
    <content type="text"><![CDATA[loadrunner判断前一个接口返回，执行第二个接口 Action(){ /*关联获取接口返回结果，true或者false*/ web_reg_save_param(&quot;Text&quot;,&quot;LB=\&quot;result\&quot;:&quot;,&quot;RB=,&quot;,LAST); /*开始事务*/ lr_start_transaction(&quot;01_api_1&quot;); web_custom_request(&quot;api_1&quot;, &quot;URL=https://webapp-n2.test.com/api/test&quot;, &quot;Method=GET&quot;, &quot;TargetFrame=&quot;, &quot;Resource=0&quot;, &quot;Snapshot=t2.inf&quot;, &quot;RecContentType=text/html&quot;, LAST); lr_end_transaction(&quot;01_api_1&quot;,LR_AUTO); /*测试一下输出，用error只是因为会标红。。*/ lr_error_message(lr_eval_string(&quot;{Text}&quot;)); /*判断第一个接口返回是否为true*/ if (strcmp(lr_eval_string(&quot;{Text}&quot;),&quot;true&quot;) == 0){ lr_start_transaction(&quot;01_api_2&quot;); web_reg_find(&quot;Text=false&quot;, LAST); web_custom_request(&quot;api_2&quot;, &quot;URL=https://webapp-n2.test.com/api/test&quot;, &quot;Method=GET&quot;, &quot;TargetFrame=&quot;, &quot;Resource=0&quot;, &quot;Snapshot=t2.inf&quot;, &quot;RecContentType=text/html&quot;, LAST); lr_end_transaction(&quot;01_api_2&quot;,LR_AUTO); lr_output_message(&quot;第二接口完&quot;); }else{ lr_error_message(&quot;请求失败&quot;); return 0; }; return 0; }]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>loadrunner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jmeter压测socket close异常]]></title>
    <url>%2F2018%2F07%2F06%2FJmeter%E5%8E%8B%E6%B5%8Bsocket-close%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[jmeter压测执行过程中报错：java.net.SocketException: Socket operation on nonsocket: connect 原因使用jmeter进行接口压测，http请求，默认是勾选了use keepAlive，但是在Jmeter.properties配置文件中的时间设置默认是注释的状态，也就是说，一旦发生连接空闲，则立刻断开，导致压测过程中出现事务失败。 解决办法在网上直接搜这个报错，有几个解决办法，说实话，有点懒，没看原理，就都照样该了下，重启jmeter之后就报错了。 Jmeter.properties取消注释：1hc.parameters.file=hc.parameters 取消注释并修改：1httpclient4.retrycount=1 取消注释并修改：1httpclient4.idletimeout=300 单位毫秒 hc.parameters取消注释并修改：1http.connection.stalecheck$Boolean=true 网上普遍的说法是httpclient4.idletimeout=300，其他几个是科学上网，在外网找到的。 参考资料 Jmeter WikiJmeter-Socket closed]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vultr安装锐速]]></title>
    <url>%2F2018%2F07%2F05%2FVultr%E5%AE%89%E8%A3%85%E9%94%90%E9%80%9F%2F</url>
    <content type="text"><![CDATA[Vultr专用破解版锐速安装 因为Vultr机房都位于国外，当上网高峰期来临时，连接速度会比较慢，所以就需要安装锐速来加速连接。 安装shadowsocks因为SSR搭建完成之后，在手机和mac上都找不到对应的客户端用，没办法，降级到比较老的shadowsocks安装方式类似：123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 这次只要配置个密码和端口，再选个加密方式即可~ 配置TCP Fast Open搭建完成shadowsocks之后，为了优化连接，可以增加一点配置：1vim /etc/rc.local 最后一行增加1echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen 1vim /etc/sysctl.conf 最后一行增加1net.ipv4.tcp_fastopen = 3 1vim /etc/shadowsocks.json 修改&quot;fast_open&quot;:true 多端口配置修改/etc/shadowsocks.json文件：12345678910111213&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:&#123; &quot;8088&quot;:&quot;xxx&quot;, &quot;8089&quot;:&quot;xxx&quot;, &quot;32123&quot;:&quot;xxx&quot; &#125;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;:true&#125; 重启：/etc/init.d/shadowsocks restart 注意事项1、安装锐速需降级系统内核，而安装 Google BBR 则需升级系统内核，故两者不能同时安装。 2、安装锐速需降级系统内核，有可能造成系统不稳定，故不建议将其应用在重要的生产环境中。 3、本教程只支持 CentOS6 x64 及 CentOS7 x64 系统，不支持任何 Debian &amp; Ubuntu 系统！ 系统判断1uname -r 1、结果以 2 开头，例如 2.6.32-696.18.7.el6.x86_64。 这种输出结果说明我们的服务器为 CentOS6 x64 系统，大家直接查看第三步进行锐速安装即可。 2、结果以 3 开头，例如 3.10.0-693.11.6.el7.x86_64。 这种输出结果说明我们的服务器为 CentOS7 x64 系统，大家直接查看第四步进行锐速安装即可。 3、结果以 4 开头，例如 4.12.10-1.el7.elrepo.x86_64。 这种输出结果说明我们的服务器已经安装 Google BBR 拥塞控制算法，此时已经无法继续安装锐速。 Centos X64安装锐速执行：1wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh 直接回车，安装完成系统会自动重启系统重启之后，重新连接服务器，执行：1yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install 遇到选择直接回车，完成安装，并且开机启动 参考连接]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>Vultr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix3.4配置邮件告警]]></title>
    <url>%2F2018%2F06%2F28%2Fzabbix3-4%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%91%8A%E8%AD%A6%2F</url>
    <content type="text"><![CDATA[zabbix3.4配置邮件告警使用zabbix配置邮件告警，当系统资源到达触发器设定阈值，邮件报警 触发器添加监控项测试用模板是zabbix自带的Template OS Linux模板，模板中原先就有监控CPU的监控项，这边测试就用CPU idle time（获取服务器空闲CPU百分比），如果当前安装的zabbix没有该监控项，就新建一个：1234567名称： CPU $2 time类型：Zabbix 客户端键值：system.cpu.util[,idle]信息类型：浮点数单位：%更新间隔：1m自定义时间间隔：灵活 保存即可 添加触发器添加完监控项之后，就要为该监控项添加触发器，当达到设定的阈值时，报警。配置-模板-找到Template OS Linux，点击触发器，创建新触发器。测试想要监控服务器的空闲CPU，当空闲CPU小于50%，时就会告警（为了效果明显，设大点。。）触发器信息如下：123名称：CPU usr% gt 50%严重性：严重表达式：&#123;Template OS Linux:system.cpu.util[,idle].avg(1m)&#125;&lt;50（表达式可以自己写，也可以用构造器，格式挺简单） 其他默认即可 添加图形为了方便观察，添加一个cpu空闲率的图形：配置-模板-选择Template OS Linux-图形，创建图形；1234名称：CPU空闲百分比纵轴Y最小值MIN：可计算的纵轴最大值：可计算的监控项：Template OS Linux：CPU idle time 保存，完成。可以试验下：1echo &quot;scale=5000; 4*a(1)&quot; | bc -l -q 计算圆周率后5000位，手工在服务器top可以看到cpu使用率到80%以上（小破虚拟机，纯试验用，1C），在监测中-仪表板-问题可以看见该问题告警。 邮件配置sendmail邮件发送需要安装几个小工具（可能本地装系统就已经装完了）12yum -y install sendmailsystemctl start sendmail.service mailx安装邮件发送工具1yum -y install mailx 配置zabbix服务外部邮箱编辑文件/etc/mail.rc（没有就新建），添加以下内容(以163邮箱为例)：12345set from=xxx@163.com #邮箱账号set smtp=smtp.163.com #smtp服务器set smtp-auth-user=xxx@163.com #邮箱帐号set smtp-auth-password=xxx #邮箱密码(163邮箱密码是你客户端登录的密码，不是mail.163.com登录的密码)set smtp-auth=login 配置完成，测试一下：1echo &quot;zabbix test...&quot; |mail -s &quot;zabbixssss&quot; xxx@163.com 进入邮箱，可以看见收到一封测试邮件~ 文件发送脚本zabbix提供了几种方式来发送告警信息，这边选择用脚本，在zabbix_server.conf文件中有定义脚本保存路径，例如我的测试服务器上的/etc/zabbix_server.conf中大约在第490行有定义（你也可以注释掉，自己加）:AlertScriptsPath=/usr/lib/zabbix/alertscripts 进入/usr/lib/zabbix/alertscripts文件夹，创建邮件发送脚本sendmail.sh，内容如下：1234#!/bin/bashmessages=`echo $3 | tr &apos;\r\n&apos; &apos;\n&apos;`subject=`echo $2 | tr &apos;\r\n&apos; &apos;\n&apos;`echo &quot;$&#123;messages&#125;&quot; | mail -s &quot;$&#123;subject&#125;&quot; $1 &gt;&gt;/tmp/sendmail.log 2&gt;&amp;1 需要注意的是/tmp/sendmail.log这个日志文件，需要有写和执行的权限，如果不放心，直接chmod 777 /tmp/sendmail.log即可。 可以用脚本测试一下邮件发送：sh sendmail.sh xxxx@163.com &quot;zabbix cesscdssss&quot; &quot;这是内容。。。&quot; 告警设置报警媒介类型进入zabbix web，管理-报警媒介类型，点击创建媒体类型，内容如下：12345678名称： sendmail类型：脚本脚本名称：sendmail.sh脚本参数： &#123;ALERT.SENDTO&#125;&#123;ALERT.SUBJECT&#125;&#123;ALERT.MESSAGE&#125;勾选已启用 点击新增。 用户添加媒介管理-用户，可以使用原来的管理员账号，也可以创建一个用户：12别名：user群组：zabbix administrators 报警媒介，点击添加：1234类型：sendmail收件人：xxxx@163.com当启用时：1-7,00:00-24:00（24小时全年无休~）剩下全勾上结束 点击添加，保存用户。 创建动作配置-动作，创建动作：动作：1名称：自己起，monitor cpu 操作：123456789101112默认操作步骤持续时间：1h默认标题：故障&#123;TRIGGER.STATUS&#125;,服务器:&#123;HOSTNAME1&#125;发生: &#123;TRIGGER.NAME&#125;故障!消息内容：告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;操作，新增发送消息给用户，选择之前创建的user，点击新增 恢复操作（系统恢复之后的邮件提示）：1234567891011默认标题：恢复&#123;TRIGGER.STATUS&#125;, 服务器:&#123;HOSTNAME1&#125;: &#123;TRIGGER.NAME&#125;已恢复!消息内容：告警主机:&#123;HOSTNAME1&#125;告警时间:&#123;EVENT.DATE&#125; &#123;EVENT.TIME&#125;告警等级:&#123;TRIGGER.SEVERITY&#125;告警信息: &#123;TRIGGER.NAME&#125;告警项目:&#123;TRIGGER.KEY1&#125;问题详情:&#123;ITEM.NAME&#125;:&#123;ITEM.VALUE&#125;当前状态:&#123;TRIGGER.STATUS&#125;:&#123;ITEM.VALUE1&#125;事件ID:&#123;EVENT.ID&#125;操作，添加发送消息给用户，选择创建的user，点击新增 这样就完工了！！！ 测试在服务器，执行：1echo &quot;scale=10000; 4*a(1)&quot; | bc -l -q 配置的邮箱就会收到邮件告警：12345678910故障PROBLEM,服务器:Zabbix server发生: CPU user% gt 50故障!告警主机:Zabbix server 告警时间:2018.06.28 10:23:19告警等级:High告警信息: CPU user% gt 50告警项目:system.cpu.util[,idle]问题详情:CPU idle time:3.64 %当前状态:PROBLEM:3.64 %事件ID:110 在报表-动作日志，可以看见报警日志；服务器恢复之后，会收到恢复的邮件：12345678910恢复OK, 服务器:Zabbix server: CPU user% gt 50已恢复!告警主机:Zabbix server告警时间:2018.06.28 10:23:19告警等级:High告警信息: CPU user% gt 50告警项目:system.cpu.util[,idle]问题详情:CPU idle time:90.08 %当前状态:OK:90.08 %事件ID:110 参考链接 zabbix配置监控项，触发器zabbix3.2.6部署邮件报警]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>zabbix3.4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix3.4监控linux内存]]></title>
    <url>%2F2018%2F06%2F27%2Fzabbix3-4%E7%9B%91%E6%8E%A7linux%E5%86%85%E5%AD%98%2F</url>
    <content type="text"><![CDATA[zabbix3.4监控linux内存情况 linux内存在linux下命令行可以直接获取当前系统的内存信息：1cat /proc/meminfo 展示如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445MemTotal: 997948 kBMemFree: 82436 kBMemAvailable: 122756 kBBuffers: 0 kBCached: 155512 kBSwapCached: 62072 kBActive: 352832 kBInactive: 354784 kBActive(anon): 271604 kBInactive(anon): 284732 kBActive(file): 81228 kBInactive(file): 70052 kBUnevictable: 0 kBMlocked: 0 kBSwapTotal: 2097148 kBSwapFree: 1329916 kBDirty: 12 kBWriteback: 0 kBAnonPages: 503976 kBMapped: 34672 kBShmem: 4232 kBSlab: 81628 kBSReclaimable: 33496 kBSUnreclaim: 48132 kBKernelStack: 8432 kBPageTables: 43468 kBNFS_Unstable: 0 kBBounce: 0 kBWritebackTmp: 0 kBCommitLimit: 2596120 kBCommitted_AS: 10619316 kBVmallocTotal: 34359738367 kBVmallocUsed: 190780 kBVmallocChunk: 34359310332 kBHardwareCorrupted: 0 kBAnonHugePages: 38912 kBCmaTotal: 0 kBCmaFree: 0 kBHugePages_Total: 0HugePages_Free: 0HugePages_Rsvd: 0HugePages_Surp: 0Hugepagesize: 2048 kBDirectMap4k: 89984 kBDirectMap2M: 958464 kB zabbix自定义监控项zabbix在/etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf中增加监控内存的item：12# 获取内存UserParameter=memory.usage[*],/bin/cat /proc/meminfo | awk &apos;/^$1:/&#123;print $$2&#125;&apos; 重启zabbix-agent：systemctl restart zabbix-agent使用zabbix_get查看数据：1zabbix_get -s 192.168.85.132 -k memory.usage[Active] 可以获取到当前active内存：12[root@localhost zabbix_agentd.d]# zabbix_get -s 192.168.85.132 -k memory.usage[Active]337468 zabbix web配置进入zabbix web页面，配置-模板，创建模板，创建一个linux meninfo的模板，群组选择Linux servers;点击监控项，创建该模板下面的监控项，示例：12345名称：Meminfo Active memory类型：Zabbix 客户端键值：memory.usage[Active]信息类型：数值（无正负）更新间隔：1m 类似的创建几个你需要关注的监控项；点击图形，创建图形，输入图形名称，添加监控项，完成。 添加模板配置-主机，选择主机，点击模板，在链接指示器中搜索上步创建的模板，点击添加，点击更新。监测中-最新数据，可以查看到前面创建的监控项的最新数据；检测中-图形，图形选择创建的图形，可以看见实时的内存信息。]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>zabbix3.4</tag>
        <tag>memory</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix3.4监控mysql5.7]]></title>
    <url>%2F2018%2F06%2F27%2Fzabbix3-4%E7%9B%91%E6%8E%A7mysql5-7%2F</url>
    <content type="text"><![CDATA[zabbix3.4监控mysql5.7 zabbix_agent尝试使用zabbix3.4监控mysql5.7，首先需要在mysql所在服务器，安装agent，安装方法很简单：1yum -y install zabbix-agent 安装完成之后在本地服务器下会有zabbix-agent的配置相关生成（本地测试用的centos7，生成目录在/etc/zabbix下） 配置MySQL首先，为了避免接下来可能出现的把数据库账号密码写死在命令行中的情况，可以先在MySQL配置文件中配置一下，/etc/my.cnf文件中新增配置：123[mysqladmin] user=zabbixpassword=11111 这样在执行/usr/bin/mysqladmin -uuser -ppwd -Pport -hhost ping时候就不用加上用户名密码了，由于zabbix-agent也是安装在本机，所以该命令在配置完mysql账密之后可以简化为mysqladmin ping 配置zabbix-agentzabbix_agentd.conf配置zabbix-agent的文件是/etc/zabbix/zabbix_agentd.conf，所有需要的修改都在这里面执行，列一下可能用到的修改项：12345Server=192.168.85.132(大约97行)ServerActive=192.168.85.132（大约138行）Hostname=Zabbix server（大约149行）Include=/etc/zabbix/zabbix_agentd.d/*.conf（大约269行（如果是注释状态，释放即可））UnsafeUserParameters=1（大约288行，默认是0，修改为1） userparameter_mysql.conf在上步Include=/etc/zabbix/zabbix_agentd.d/*.conf释放之后，zabbix-agent可以从指定的文件夹（zabbix_agentd.d）中读取配置，该文件夹中默认就有userparameter_mysql.conf文件，里面就是zabbix用到的监控的item（监控项），每个监控项写一行，创建监控项格式：123UserParameter=&lt;key&gt;,&lt;shell command&gt;或者 UserParameter=&lt;key&gt;,&lt;script dir&gt; 示例：12UserParameter=mysql.version,mysql -VUserParameter=mysql.status[*],/etc/zabbix/script/mysql/chk_mysql.sh $1 第一条item，key是mysql.version，意思就是这是监控MySQL版本的一个item，后面的mysql -V是具体执行的shell命令，通过执行该命令获取MySQL的版本；第二个item，key是mysql.status[*]，意思是该监控项监控的是，mysql的状态，通过执行/etc/zabbix/script/mysql/chk_mysql.shshell 脚本来获取MySQL的各状态。 附上我的userparameter_mysql.conf配置（网上一堆这样的配置，我也是参考的）123UserParameter=mysql.version,mysql -VUserParameter=mysql.status[*],/etc/zabbix/script/mysql/chk_mysql.sh $1UserParameter=mysql.ping,mysqladmin ping | grep -c alive chk_mysql.sh上步，配置项中配置的是脚本文件的，就是将获取监控项的各个脚本写在一个文件中，避免userparameter_mysql.conf文件太杂太乱，如上步配置的，获取MySQL状态的脚本是/etc/zabbix/script/mysql/chk_mysql.sh默认安装的zabbix是没有该文件的，需要手动创建mkdir -p /etc/zabbix/script/mysql,cd /etc/zabbix/script/mysql,vim chk_mysql.sh完成创建脚本，编辑，附上我的脚本（来自互联网）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#!/bin/bash# -------------------------------------------------------------------------------# FileName: check_mysql.sh# Revision: 1.0# Date: 2018/06/20# Author: kyle# Email: # Website: # Description: # Notes: ~# -------------------------------------------------------------------------------# Copyright: # License: GPL# 主机地址/IPMYSQL_HOST=&apos;192.168.85.132&apos;# 端口MYSQL_PORT=&apos;3306&apos;# 数据连接MYSQL_CONN=&quot;/usr/bin/mysqladmin&quot;# 参数是否正确if [ $# -ne &quot;1&quot; ];then echo &quot;arg error!&quot; fi# 获取数据case $1 in Uptime) result=`$&#123;MYSQL_CONN&#125; status|cut -f2 -d&quot;:&quot;|cut -f1 -d&quot;T&quot;` echo $result ;; Com_update) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Com_update&quot;|cut -d&quot;|&quot; -f3` echo $result ;; Slow_queries) result=`$&#123;MYSQL_CONN&#125; status |cut -f5 -d&quot;:&quot;|cut -f1 -d&quot;O&quot;` echo $result ;; Com_select) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Com_select&quot;|cut -d&quot;|&quot; -f3` echo $result ;; Com_rollback) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Com_rollback&quot;|cut -d&quot;|&quot; -f3` echo $result ;; Questions) result=`$&#123;MYSQL_CONN&#125; status|cut -f4 -d&quot;:&quot;|cut -f1 -d&quot;S&quot;` echo $result ;; Com_insert) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Com_insert&quot;|cut -d&quot;|&quot; -f3` echo $result ;; Com_delete) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Com_delete&quot;|cut -d&quot;|&quot; -f3` echo $result ;; Com_commit) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Com_commit&quot;|cut -d&quot;|&quot; -f3` echo $result ;; Bytes_sent) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Bytes_sent&quot; |cut -d&quot;|&quot; -f3` echo $result ;; Bytes_received) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Bytes_received&quot; |cut -d&quot;|&quot; -f3` echo $result ;; Com_begin) result=`$&#123;MYSQL_CONN&#125; extended-status |grep -w &quot;Com_begin&quot;|cut -d&quot;|&quot; -f3` echo $result ;; *) echo &quot;Usage:$0(Uptime|Com_update|Slow_queries|Com_select|Com_rollback|Questions|Com_insert|Com_delete|Com_commit|Bytes_sent|Bytes_received|Com_begin)&quot; ;;esac 脚本其实很简单，通过mysqladmin获取MySQL自带的计数器数值即可~ zabbix-server进入zabbix web页面，Configuration-Hosts，选择主机，打开主机的配置页面，选择Templates（模板），在Link new templates栏输入MySQL，在跳转出的模板中选择Template DB MySQL，点击add，完成模板配置，然后回到服务器，重启agent端：1systemctl restart zabbix-agent 测试数据获取：1zabbix_get -s yourHostIp -k mysql.status[Com_insert] 可以成功获取到数据。 图形查看返回zabbix web端，在Monitoring-Graphs下可以看见配置完成的监控项的实时图形。 可能遇到的问题以下是可能会遇见的问题： Using a password on the command line interface can be insecure.首先是这个[warning]，这是因为在命令行中写死了数据库的用户名和密码，所以有这个不安全的提示；解决办法，只需要将数据库的账密添加到/etc/my.cnf中，并且在命令行中去掉账密即可。 2539” of type “string”: cannot convert value to numeric type这个问题，很明显，是字符格式的问题，shell脚本获取的监控项数据，设置的为string类型，但是选择的zabbix绘图要求的item的数据类型是numeric类型，只要转换下格式即可；解决办法，Configuration-Templtes，点击items，跳转到item页面，选择item，点击开，编辑类型Type of information；具体的类型可以先通过Configuration-Templtes-Graphs查看。]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>zabbix3.4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix配置]]></title>
    <url>%2F2018%2F06%2F26%2Fzabbix%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[zabbix的一些常用配置 zabbix-agent首先，安装完zabbix-web之后，想要监控系统，还需要在系统安装一个agent端：1yum -y install zabbix-agent 命令行安装即可，安装完成之后，可以在本地服务器下找到配置文件，我的是在:/etx/zabbix在：12zabbix_agentd.confzabbix_agentd.d 其中zabbix_agentd.d是文件夹，里面是具体的监控配置文件userparameter_mysql.conf，这个文件里面就是一系列zabbix可用的监控指标的配置，这个后面再专门写写zabbix的配置。 如果找不到包： 一. 配置yum源rpm -i http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm二．安装zabbix agentyum -y install zabbix-agent zabbix_getzabbix有个工具：zabbix_get，可以用来获取监控指标，用法示例：1zabbix_get -s IP -k mysql.status[Com_insert] 上面这条命令在配置文件配置完成的情况下，可以用来获取服务器上MySQL执行的insert数量。 图像乱码问题在第一次使用zabbix，图形显示，中文是一个个的方框，也就是乱码，这是因为zabbix的汉化不是很完全，可以手工替换字体来解决乱码问题。首先在本地windows机器下拿到中文字体，例如楷体:simkai.ttf(文件路径：C:\Windows\Fonts)然后把windows上下载完成的字体上传到zabbix服务器中，路径：/usr/share/zabbix/fonts该目录下本来有一个系统字体，并且软链接到zabbix-web，也就是页面显示的字体，现在要做的就是用自己上传的楷体替换到系统原来的字体123[root@localhost fonts]# lltotal 11512lrwxrwxrwx. 1 root root 33 Jun 26 15:46 graphfont.ttf -&gt; /etc/alternatives/zabbix-web-font 首先是将系统原字体备份mv graphfont.ttf graphfont.ttf.back然后修改配置文件/usr/share/zabbix/include/defines.inc.php将文件中的FONT_NAME从原来的graphfont修改为simkai，一共有两处，修改完成之后页面上就可以看见乱码解决了~ （关于zabbix的东西，后面肯定是要写一个监控配置的，待续~~~）]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>zabbix3.4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机基础知识系列（一）]]></title>
    <url>%2F2018%2F06%2F19%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[程序员基础，性能测试需要知道的一些底层概念（一） 进程、线程、程序对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元，线程和进程都是由系统内核管理。 进程定义程序被加载到内存中并准备执行，就是一个进程，它是操作系统动态执行的基本单元，在传统的操作系统中，进程既是基本的分配单元，也是基本的执行单元。关于进程有两点需要注意：一、进程是一个实体。每一个进程都有它自己的地址空间，一般情况下，包括文本区域（text region）、数据区域（data region）和堆栈（stack region）。文本区域存储处理器执行的代码；数据区域存储变量和进程执行期间使用的动态分配的内存；堆栈区域存储着活动过程调用的指令和本地变量；二、进程是一个“执行中的程序”。程序是一个没有生命的实体，只有处理器赋予程序生命时，它才能成为一个活动的实体，我们称其为进程。 进程状态进程有三个状态，就绪-运行-阻塞。就绪状态其实就是获取除CPU之外的所有资源，只要处理器分配资源就可以马上执行；运行状态就是获取了处理器分配的资源，开始运行程序；阻塞状态，当程序条件不够时，需要等待条件满足才能继续执行，例如I/O。 程序程序其实本身没有任何运行的含义，程序是指令和数据的有序集合。 线程定义单个进程中执行中的每个任务就是一个线程，线程是进程中执行运算的最小单位。一个线程只能属于一个进程，但是一个进程可以拥有多个线程。多线程处理就是允许一个进程中在同一时刻执行多个任务。 进程与线程的区别1，线程没有地址空间，线程包含在进程的地址空间中。线程上下文只包含一个堆栈、一个寄存器、一个优先权，线程文本包含在他的进程的文本片段中。同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程拥有自己的栈段，寄存器的内容（栈段又叫运行时段，用来存放所有局部变量和临时变量）。2，线程在执行过程中与进程还是有区别的。每个独立的进程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。3，从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。4，线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。（进程就像火车，线程就是火车的车厢） 多进程与多线程多线程多线程，顾名思义，同时运行多个线程；多任务可以由多进程完成，也可以由一个进程内的多线程完成。 线程状态首先，线程大致有五种状态:初始化，就绪，运行，阻塞，死亡； 线程锁在多线程中，每个线程都有自己的资源，但是代码区是共享的，即每个线程都可以执行相同的函数。这可能带来的问题就是几个线程同时执行一个函数，导致数据的混乱，产生不可预料的结果，因此我们必须避免这种情况的发生。例如：有两个线程，同时操作一个列表， 列表中数值都是0，一个线程是更新（update），操作为从前往后顺序更新值为1；线程二为打印（print），操作为从后往前倒序打印列表，当两个线程同时操作列表时就会出现打印时一半0，一半1，出现了数据不同步，为了避免这样的情况，就引进了线程锁的概念。 锁有两种状态——锁定和未锁定。每当一个线程比如”update”要访问共享数据时，必须先获得锁定；如果已经有别的线程比如”print”获得锁定了，那么就让线程”update”暂停，也就是同步阻塞；等到线程”print”访问完毕，释放锁以后，再让线程”update”继续。经过这样的处理，打印列表时要么全部输出0，要么全部输出1，不会再出现一半0一半1的混乱数据。 线程通信（条件变量）列表并不是一开始就有的；而是通过线程”create”创建的。如果”update”或者”print” 在”create”还没有运行的时候就访问列表，将会出现一个异常。使用锁可以解决这个问题，但是”update”和”print”将需要一个无限循环——他们不知道”create”什么时候会运行，让”create”在运行后通知”update”和”print”显然是一个更好的解决方案。于是，引入了条件变量。 条件变量允许线程比如”update”和”print”在条件不满足的时候（列表为None时）等待，等到条件满足的时候（列表已经创建）发出一个通知，告诉”update” 和”print”条件已经有了，你们该起床干活了；然后”update”和”print”才继续运行。 线程运行和阻塞状态转换阻塞有三种状态：同步阻塞（锁定池）是指处于竞争锁定的状态，线程请求锁定时将进入这个状态，一旦成功获得锁定又恢复到运行状态；等待阻塞（等待池）是指等待其他线程通知的状态，线程获得条件锁定后，调用“等待”将进入这个状态，一旦其他线程发出通知，线程将进入同步阻塞状态，再次竞争条件锁定；而其他阻塞是指调用time.sleep()、anotherthread.join()或等待IO时的阻塞，这个状态下线程不会释放已获得的锁定。 多进程为啥会想看多进程这么个东西，那是因为，python说实话，有点坑的地方是，实质上python没有多线程。python虽然可以通过threading模块来实现多线程编程，但是Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。而通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。所以使用python实现并发多线程，不太现实。。 不过即使如此，我们也可以使用多进程来实现多核任务，毕竟当前多核处理器满大街都是。 实现多进程首先，unix中有个fork()函数，这玩意就可以实现多进程，这函数产生的效果就是把当前进程复制一份，普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。 python的os模块封装了fork()，可以很简单就实现创建子进程；但是由于windows系统没有fork()，在windows上就不能执行包含fork()调用的脚本，在windows上就用multiprocessing替代。 multiprocessing 示例使用multiprocessing模块进行多进程编程，可以支持跨平台。123456789101112131415161718192021222324252627#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@Auther Kyle@Time 2018/6/19 13:10&quot;&quot;&quot;from multiprocessing import Poolimport os, time, randomdef LongTimeTask(name): print(&quot;Run task&#123;0&#125; &#123;1&#125;&quot;.format(name, os.getpid())) start = time.time() time.sleep(random.random() * 3) end = time.time() print(&quot;Task &#123;0&#125; runs &#123;1&#125; seconds.&quot;.format(name, (end - start)))if __name__ == &apos;__main__&apos;: print(&quot;Parent process &#123;0&#125;&quot;.format(os.getpid())) p = Pool(4) for i in range(5): p.apply_async(LongTimeTask, args=(i, )) print(&quot;Waiting for all subprocesses done...&quot;) p.close() p.join() print(&quot;All subprocess done&quot;) 执行结果：12345678910111213Parent process 1692Waiting for all subprocesses done...Run task0 4464Run task1 5516Run task2 2388Run task3 8540Task 3 runs 0.22301292419433594 seconds.Run task4 8540Task 1 runs 0.463026762008667 seconds.Task 2 runs 1.3660781383514404 seconds.Task 4 runs 1.2180695533752441 seconds.Task 0 runs 1.7631008625030518 seconds.All subprocess done 进程间通信multiprocessing提供多种方法来交换数据：Queue，Pipes等。代码示例:12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@Auther Kyle@Time 2018/6/19 14:56&quot;&quot;&quot;from multiprocessing import Process, Queueimport os, time, randomdef write(q): &quot;&quot;&quot;写数据进程执行&quot;&quot;&quot; print(&quot;Process to write: &#123;0&#125;&quot;.format(os.getpid())) for value in [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]: print(&quot;Put &#123;0&#125; to queue.&quot;.format(value)) q.put(value) time.sleep(random.random())def read(q): &quot;&quot;&quot;读数据进程执行&quot;&quot;&quot; print(&quot;Process to read: &#123;0&#125;&quot;.format(os.getpid())) while True: value = q.get(True) print(&quot;Get &#123;0&#125; from queue.&quot;.format(value))if __name__ == &apos;__main__&apos;: # 父进程创建Queue，传给各个子进程 q = Queue() pw = Process(target=write, args=(q,)) pr = Process(target=read, args=(q,)) # 启动子进程pw，写入 pw.start() # 启动子进程pr，读取 pr.start() # 等待写进程执行结束 pw.join() # pr进程里是死循环，无法等待其结束，只能强行终止 pr.terminate() 运行结果：12345678Process to read: 7616Process to write: 4948Put A to queue.Get A from queue.Put B to queue.Get B from queue.Put C to queue.Get C from queue. 以上代码均来自于网络~ 协程协程，又称微线程，英文Coroutines，是一种比线程更加轻量级的存在。正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程。（关于协程，真的不太懂，之后有空再研究，看到一句话:子程序就是协程的一种特例）多线程编程中，为了防止数据不同步，需要添加锁机制，但是协程应为就用了一个线程，在协程之间共享资源是不用加锁机制的，只需要判断状态。 参考链接 廖雪峰关于多进程教程Python线程指南廖雪峰-协程教程]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>进程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos下切换MySQL数据到数据盘]]></title>
    <url>%2F2018%2F06%2F12%2FCentos%E4%B8%8B%E5%88%87%E6%8D%A2MySQL%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E7%9B%98%2F</url>
    <content type="text"><![CDATA[centos 7对ECS进行挂载数据盘，并切换MySQL数据保存目录到数据盘 测试需要，申请了阿里云的ECS服务器，用来搭建MySQL，搭建时候没有注意，没想到运维大哥那么体贴的申请了数据盘，还是SSD的，这样也就需要把原来MySQL数据存储路径换到数据盘。 操作数据盘首先查看当前服务器是否有数据盘：fdisk -l1234567891011121314Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x0008d73a Device Boot Start End Blocks Id System/dev/vda1 * 2048 104855551 52426752 83 LinuxDisk /dev/vdb: 107.4 GB, 107374182400 bytes, 209715200 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes 可以看到当前服务上面有两个盘/dev/vda和/dev/vdb，其中/dev/vda是系统盘，并且已经有分区/dev/vda1，经常使用的查看磁盘的命令是df -h，但是有个问题，如果你的数据盘没有分区、挂载，使用df -h是不会显示的，只会展示这样：1234567Filesystem Size Used Avail Use% Mounted on/dev/vda1 50G 3.1G 44G 7% /devtmpfs 16G 0 16G 0% /devtmpfs 16G 0 16G 0% /dev/shmtmpfs 16G 520K 16G 1% /runtmpfs 16G 0 16G 0% /sys/fs/cgrouptmpfs 3.2G 0 3.2G 0% /run/user/0 数据盘分区查找到数据盘/dev/vdb之后，对它进行分区：fdisk /dev/vdb，1234567Welcome to fdisk (util-linux 2.23.2).Changes will remain in memory only, until you decide to write them.Be careful before using the write command.Device does not contain a recognized partition tableBuilding a new DOS disklabel with disk identifier 0x39e32289. 接下来是有几个选项，选择适合的选项即可：12345Command (m for help): 输入&apos;n&apos;，创建一个新分区Partition type: 输入&apos;p&apos;，选择主分区Partition number (1-4, default 1): 输入&apos;1&apos;，仅创建一个分区First sector (2048-209715199, default 2048): 我用的默认Last sector, +sectors or +size&#123;K,M,G&#125; (2048-209715199, default 209715199): 同样默认 接下来wq保存退出即可。然后这个时候fdisk -l，就能看见新的分区：12345678910111213141516171819Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x0008d73a Device Boot Start End Blocks Id System/dev/vda1 * 2048 104855551 52426752 83 LinuxDisk /dev/vdb: 107.4 GB, 107374182400 bytes, 209715200 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x39e32289 Device Boot Start End Blocks Id System/dev/vdb1 2048 209715199 104856576 83 Linux 格式化分区首先新建文件夹：cd /home、mkdir mysql挂载：mount /dev/vdb1 /home/mysql在新分区上创建文件系统：mkfs.ext4 /dev/vdb1备份/etc/fstab：cp /etc/fstab /etc/fstab.bak查找当前磁盘分区的UUID：blkid向 /etc/fstab 写入新分区信息:vim /etc/fstab，写入UUID=ec7443b1-14e4-4174-ae8a-2194484a754b /home/mysql ext4 defaults 0 0(UUID是之前获得的) 复制MySQL数据复制数据：mv /var/lib/mysql/* /home/mysql修改配置：vim /etc/my.cnf，修改数据文件到/home/mysql重启MySQLOVER~]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用fiddler抓iphone包]]></title>
    <url>%2F2018%2F06%2F07%2F%E4%BD%BF%E7%94%A8fiddler%E6%8A%93iphone%E5%8C%85%2F</url>
    <content type="text"><![CDATA[使用fiddler抓包iphone 亲测可用，系统及版本：12Fiddler: Telerik Fiddler Web Debugger (v2.6.3.48898)iphone 6s(ios 11.3.1) Fiddler设置首先，需要设置下fiddler，至于fiddler的下载安装就不说了。 配置监听https需要配置fiddler，使得允许监听https，因为fiddler默认是抓http格式的。(再次声明，受不了七牛云之类的手持身份证实名认证的措施，由于之前工作做过征信相关，对这方面有点在乎，能少泄露一点就少一点。。。所以，基本blog中一直是无图片~)1Tools ——&gt; （Telerik）Fiddler Options ——&gt; https 勾选Decrypt Https traffic，此时系统会提示你是否要安装fiddler的证书之类的，安装一下即可~ 远程连接配置配置完https之后，需要设置允许远程连接，还是在Tools ——&gt; （Telerik）Fiddler Options选择Connections，监听端口使用默认的8888即可，勾选Allow remote computers to connect，此时会弹出一个warning，提示你会开启远程连接，并且需要重启fiddler才会生效，点击确定即可； 重启fiddler iphone设置获取PC端ip这个就比较简单了，cmd ——&gt; ipconfig拿到ip即可，例如192.168.100.10 iphone安装证书首先确保手机和PC处于同一网络（直接连接同一wifi最简单），然后在手机浏览器中输入上述步骤获取的ip和端口1http://192.168.100.10:8888 页面会出现Fiddler Echo Service该页面，看到一条You can download the FiddlerRoot certificate，点击下载证书，然后信任安装证书即可（安装完的证书可以在iphone-设置-通用-描述文件中看到）（证书名字，我当时装的时候叫DO_NOT_TRUST_FiddlerRoot） 设置代理安装完成证书，进入手机设置-无限局域网，选择连接的wifi，配置代理选择手动，输入服务器，端口，点击存储。完成~ 抓包手机浏览器访问页面，可以使用fiddler抓到包，看到请求和返回~以下抓到的示例：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697HTTP/1.1 200 OKServer: nginxDate: Thu, 07 Jun 2018 03:07:22 GMTContent-Type: text/html; charset=UTF-8Connection: keep-aliveVary: Accept-EncodingX-Powered-By: PHP/7.1.5Set-Cookie: upv2=20180607%2C4; expires=Sat, 09-Jun-2018 03:07:22 GMT; Max-Age=172800; path=/Content-Length: 7346&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;title&gt;古墓丽影：源起之战迅雷下载,百度网盘,高清迅雷下载 - 97电影网&lt;/title&gt;&lt;meta name=&quot;keywords&quot; content=&quot;古墓丽影：源起之战迅雷下载,古墓丽影：源起之战百度网盘资源,古墓丽影：源起之战高清迅雷下载 - 97电影网&quot; /&gt;&lt;meta name=&quot;description&quot; content=&quot;这里有电影《古墓丽影：源起之战》的百度网盘资源，还有《古墓丽影：源起之战》的迅雷下载链接,演员：艾丽西亚·维坎德,多米尼克·威斯特,沃尔顿·戈金斯,吴彦祖,克里斯汀·斯科特·托马斯,汉娜·乔恩-卡门,尼克·弗罗斯特,德里克·雅各比,安东尼奥·阿克儿,亚历山大·维尧姆,杰美·温斯顿,迈克尔·奥拜奥拉,艾米丽·凯里,肯尼思·霍&quot; /&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt; &lt;link rel=&quot;icon&quot; href=&quot;http://www.id97.com/favicon.ico&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/amazeui.min.css&quot;&gt; &lt;script src=&quot;http://libs.baidu.com/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;/static/js/amazeui.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; rev=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;all&quot; href=&quot;http://www.id97.com/static/mobile/mobile.css&quot;&gt; &lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&gt; &lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt; &lt;!--[if lt IE 9]&gt; &lt;script src=&quot;http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;am-topbar-inverse&quot;&gt; &lt;header class=&quot;am-container&quot;&gt; &lt;h1 class=&quot;am-topbar-brand&quot;&gt; &lt;a href=&quot;http://www.id97.com/&quot;&gt;97电影网&lt;/a&gt; &lt;/h1&gt; &lt;button class=&quot;am-topbar-btn am-topbar-toggle am-btn am-btn-sm am-btn-success am-show-sm-only&quot; data-am-collapse=&quot;&#123;target: &apos;#doc-topbar-collapse&apos;&#125;&quot;&gt;&lt;span class=&quot;am-sr-only&quot;&gt;97电影网&lt;/span&gt; &lt;span class=&quot;am-icon-bars&quot;&gt;&lt;/span&gt;&lt;/button&gt; &lt;div class=&quot;am-collapse am-topbar-collapse&quot; id=&quot;doc-topbar-collapse&quot;&gt; &lt;ul class=&quot;am-nav am-nav-pills am-topbar-nav&quot;&gt; &lt;li&gt;&lt;a href=&quot;http://www.id97.com/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.id97.com/movie&quot;&gt;电影&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;am-topbar-right&quot;&gt; &lt;form action=&quot;/search&quot; method=&quot;GET&quot; class=&quot;am-topbar-form am-topbar-left am-form-inline&quot; role=&quot;search&quot;&gt; &lt;div class=&quot;am-form-group&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;am-form-field am-input-sm&quot; name=&quot;q&quot; placeholder=&quot;搜索&quot;&gt; &lt;/div&gt; &lt;/form&gt; &lt;div class=&quot;am-dropdown&quot; data-am-dropdown=&quot;&#123;boundary: &apos;.am-topbar&apos;&#125;&quot;&gt; &lt;button class=&quot;am-btn am-btn-secondary am-topbar-btn am-btn-sm am-dropdown-toggle&quot; data-am-dropdown-toggle&gt;登入/注册 &lt;span class=&quot;am-icon-caret-down&quot;&gt;&lt;/span&gt;&lt;/button&gt; &lt;ul class=&quot;am-dropdown-content&quot;&gt; &lt;li&gt;&lt;a href=&quot;/signup&quot;&gt;注册&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/signin&quot;&gt;登入&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/header&gt;&lt;/div&gt;&lt;div class=&quot;am-container&quot;&gt; &lt;h3 class=&quot;am-article-title&quot;&gt; 古墓丽影：源起之战 &lt;/h3&gt; &lt;div class=&quot;am-g&quot;&gt; &lt;div class=&quot;am-u-sm-5&quot;&gt;&lt;img class=&quot;img-responsive&quot; width=&quot;100%&quot; src=&quot;http://img1.xmspc.com/uploads/movie-poster/8ltxwirll3g7.jpg&quot;&gt;&lt;/div&gt; &lt;div class=&quot;am-u-sm-7&quot; style=&quot;padding-left:0;font-size:14px;color:#666;&quot;&gt;&lt;strong&gt;主演：&lt;/strong&gt;艾丽西亚·维坎德 / 多米尼克·威斯特 / 沃尔顿·戈金斯 ...&lt;br/&gt;&lt;strong&gt;类型：&lt;/strong&gt;动作 / 冒险&lt;br/&gt;&lt;strong&gt;上映：&lt;/strong&gt;2018-03-16(美国/中国大陆)&lt;br/&gt;&lt;strong&gt;豆瓣：&lt;/strong&gt;6.3分&lt;br/&gt; &lt;/div&gt; &lt;div class=&quot;am-u-sm-12&quot; style=&quot;padding-top:15px;font-size:14px;color:#666;&quot;&gt;&lt;strong&gt;简介：&lt;/strong&gt;劳拉（艾丽西亚·维坎德 Alicia Vikander 饰）的父亲一生都致力于研究古墓，在劳拉尚且年幼的时候，父亲在一场冒险之中失踪了。一晃眼多年过去，劳拉一直拒绝承认父亲已死的消息，也拒绝接手父亲手下的商业帝国。&lt;br /&gt;一次偶然中，劳拉发现了父亲遗留下的冒险笔记，父亲希望劳拉能把这些资料付之一炬，但为了寻找父亲的下落，劳拉决定寻找笔记中记载的岛屿。劳拉找到了名为陆仁（吴彦祖 饰）的男子，两人结伴踏上了旅途。刚一上岛，劳拉和陆仁就遇见了一直和父亲作对的马赛亚斯（沃特·戈金斯 Walton Goggins 饰）以及他的雇佣兵团队。马赛亚斯一心想要找到古墓的踪迹，不惜杀死了不肯透露半点消息的劳拉的父亲，如今，劳拉亦落入了他的魔爪之中，会遭遇怎样的命运呢？&lt;/div&gt; &lt;/div&gt; &lt;h3 class=&quot;res-h3&quot;&gt;资源列表：&lt;/h3&gt; &lt;ul class=&quot;am-list res-list&quot;&gt;&lt;li class=&quot;list-group-item&quot;&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;text-break&quot; style=&quot;margin:0;&quot;&gt;&lt;a href=&quot;https://pan.baidu.com/s/14V_KvaJcMIzwY3Octe4WDQ&quot;&gt;古墓丽影：源起之战 - 百度云，网盘资源，密码：3xvh&lt;/a&gt;&lt;/p&gt;&lt;textarea style=&quot;width:100%;&quot;&gt;https://pan.baidu.com/s/14V_KvaJcMIzwY3Octe4WDQ&lt;/textarea&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;text-break&quot; style=&quot;margin:0;&quot;&gt;&lt;a href=&quot;ed2k://|file|%E5%8F%A4%E5%A2%93%E4%B8%BD%E5%BD%B1.%E6%BA%90%E8%B5%B7%E4%B9%8B%E6%88%98.Tomb.Raider.2018.HD1080P.%E4%B8%AD%E8%8B%B1%E5%8F%8C%E5%AD%97.mp4|2207922795|225513B29378FAEC5871822A46DE2F8D|h=NEFWJ3E5TL6ALZV2O63HVU5GALU6IGBI|/&quot;&gt;古墓丽影.源起之战.Tomb.Raider.2018.HD1080P.中英双字.mp4&lt;/a&gt;&lt;/p&gt;&lt;textarea style=&quot;width:100%;&quot;&gt;ed2k://|file|%E5%8F%A4%E5%A2%93%E4%B8%BD%E5%BD%B1.%E6%BA%90%E8%B5%B7%E4%B9%8B%E6%88%98.Tomb.Raider.2018.HD1080P.%E4%B8%AD%E8%8B%B1%E5%8F%8C%E5%AD%97.mp4|2207922795|225513B29378FAEC5871822A46DE2F8D|h=NEFWJ3E5TL6ALZV2O63HVU5GALU6IGBI|/&lt;/textarea&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;p class=&quot;text-break&quot; style=&quot;margin:0;&quot;&gt;&lt;a href=&quot;ed2k://|file|%E5%8F%A4%E5%A2%93%E4%B8%BD%E5%BD%B1.%E6%BA%90%E8%B5%B7%E4%B9%8B%E6%88%98.Tomb.Raider.2018.HD720P.%E4%B8%AD%E8%8B%B1%E5%8F%8C%E5%AD%97.mkv|1574630029|9D61330E39013720310FD4FBE83807FB|h=35M7EUX7TERZMN4QCYGSWIGC7F5JS4ZV|/&quot;&gt;古墓丽影.源起之战.Tomb.Raider.2018.HD720P.中英双字.mkv&lt;/a&gt;&lt;/p&gt;&lt;textarea style=&quot;width:100%;&quot;&gt;ed2k://|file|%E5%8F%A4%E5%A2%93%E4%B8%BD%E5%BD%B1.%E6%BA%90%E8%B5%B7%E4%B9%8B%E6%88%98.Tomb.Raider.2018.HD720P.%E4%B8%AD%E8%8B%B1%E5%8F%8C%E5%AD%97.mkv|1574630029|9D61330E39013720310FD4FBE83807FB|h=35M7EUX7TERZMN4QCYGSWIGC7F5JS4ZV|/&lt;/textarea&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;footer class=&quot;footer&quot;&gt; &lt;p&gt;免责声明：本网站将逐步删除和规避程序自动搜索采集到的不提供分享的版权影视。本站仅供测试和学习交流。请大家支持正版。&lt;/p&gt; &lt;p&gt;唯一网址：&lt;a href=&quot;http://www.id97.com/&quot;&gt;97电影网&lt;/a&gt;&lt;/p&gt;&lt;/footer&gt;&lt;script src=&quot;https://www.szshouzhai.com/kdksd/c-5270-22.js&quot;&gt;&lt;/script&gt;&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?a6cc69b245346a568ba6088ab53ff7ac&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; OVER!]]></content>
      <categories>
        <category>just for fun</category>
      </categories>
      <tags>
        <tag>fiddler</tag>
        <tag>iphone</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3.6安装basemap]]></title>
    <url>%2F2018%2F06%2F01%2Fpython3-6%E5%AE%89%E8%A3%85basemap%2F</url>
    <content type="text"><![CDATA[python3.6安装basemap 很久没碰matplotlib了，想看看有没有中国地图加人口，这样绘制一张图，找白天，貌似basemap里面有，basemap需要：from mpl_toolkits.basemap import Basemap，然后就尝试安装mpl_toolkits，不出所料，失败了。。。 折腾半天，附上windows下python3.6安装basemap步骤： 下载首先，一个神奇的网站，经常逛： python包下载 下载对应python版本的文件，cp36表示3.6版本： 12basemap‑1.1.0‑cp36‑cp36m‑win_amd64.whl pyproj‑1.9.5.1‑cp36‑cp36m‑win_amd64.whl 安装windows进入cmd模式，进入保存上述俩文件的路径，使用pip安装：12pip install pyproj‑1.9.5.1‑cp36‑cp36m‑win_amd64.whlpip install basemap‑1.1.0‑cp36‑cp36m‑win_amd64.whl 验证打开简单的世界地图：12345678import matplotlib.pyplot as pltfrom mpl_toolkits.basemap import Basemapplt.figure(figsize=(16, 8))m = Basemap()m.drawcoastlines()plt.show()]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】loadrunner请求三种格式API]]></title>
    <url>%2F2018%2F05%2F22%2F%E3%80%90%E8%BD%AC%E3%80%91loadrunner%E8%AF%B7%E6%B1%82%E4%B8%89%E7%A7%8D%E6%A0%BC%E5%BC%8FAPI%2F</url>
    <content type="text"><![CDATA[loadrunner请求API，http POST三种请求格式的脚本 本篇文章主要针对POST请求的三种数据请求格式，组织不同的脚本: （1）、application/x-www-form-urlencoded 键值对 （2）、multipart/form-data 表单 （3）、application/json Json串 PS：loadrunner body参数中的引号，需要自己加\转义。 application/x-www-form-urlencoded 键值对12345678910111213141516171819202122232425262728293031323334353637383940414243444546Action() &#123; lr_start_transaction(&quot;checkPerson&quot;); /* 注册获取返回参数，该方法可以配合打印返回数据，检测数据内容 */ web_reg_save_param(&quot;Para&quot;, &quot;LB=&quot;, &quot;RB=&quot;, LAST); /* 注册断言： Text=断言内容 */ /* 该方法会判断后面的web请求方法的返回值 */ web_reg_find(&quot;Text=成功&quot;, LAST); /* 汉字进行UTF-8编码 */ lr_convert_string_encoding(&quot;需要进行UTF-8加密的中文字符串&quot;,LR_ENC_SYSTEM_LOCALE,LR_ENC_UTF8,&quot;result&quot;); /* 向后面的web请求函数增加请求头 */ /* 如果web请求方法中已经设置了相同的头，则优先使用web请求方法中的头，例如web请求方法中的EncType参数，对应请求投中的Content-Type。由于下面的方法已经设置了EncType参数，所以这里的设置并没有什么X用 */ /* 表单直接使用方法自带参数，键值对和json建议使用该方法 */ web_add_header(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded; charset=utf-8&quot;); /* 主要针对form表单和键值对两种格式的web请求 */ web_submit_data(&quot;checkPerson&quot;, &quot;Action=http://130.1.11.105:9080/ibis/faceService/checkPerson&quot;, &quot;Method=POST&quot;, /* 该方法支持常见的两种请求数据格式 */ /* （1）&quot;EncType=multipart/form-data&quot;。form表单提交数据 */ /* （1）&quot;EncType=application/x-www-form-urlencoded&quot;。默认使用键值对提交数据 */ //&quot;EncType=&quot;, &quot;TargetFrame=&quot;, &quot;Referer=&quot;, ITEMDATA, &quot;Name=Name1&quot;, &quot;Value=Value1&quot;, ENDITEM, &quot;Name=Name2&quot;, &quot;Value=Value2&quot;, ENDITEM, LAST); /* 打印相应结果 */ /* lr_eval_string(&quot;&#123;result&#125;&quot;) 使用loadrunner引用外部函数，只有这样才能取出上面web_reg_save_param方法的返回值 */ lr_log_message(lr_eval_string(&quot;&#123;result&#125;&quot;)); lr_end_transaction(&quot;checkPerson&quot;, LR_AUTO); return 0; &#125; multipart/form-data 表单12345678910111213141516171819202122232425262728293031323334353637383940414243444546Action() &#123; lr_start_transaction(&quot;checkPerson&quot;); /* 注册获取返回参数，该方法可以配合打印返回数据，检测数据内容 */ web_reg_save_param(&quot;Para&quot;, &quot;LB=&quot;, &quot;RB=&quot;, LAST); /* 注册断言： Text=断言内容 */ /* 该方法会判断后面的web请求方法的返回值 */ web_reg_find(&quot;Text=成功&quot;, LAST); /* 汉字进行UTF-8编码 */ lr_convert_string_encoding(&quot;需要进行UTF-8加密的中文字符串&quot;,LR_ENC_SYSTEM_LOCALE,LR_ENC_UTF8,&quot;result&quot;); /* 向后面的web请求函数增加请求头 */ /* 如果web请求方法中已经设置了相同的头，则优先使用web请求方法中的头，例如web请求方法中的EncType参数，对应请求投中的Content-Type。由于下面的方法已经设置了EncType参数，所以这里的设置并没有什么X用 */ /* 表单直接使用方法自带参数，键值对和json建议使用该方法 */ //web_add_header(&quot;Content-Type&quot;, // &quot;multipart/form-data; boundary = --------BORN3QKNRTS4; charset=UTF-8&quot;); /* 主要针对form表单和键值对两种格式的web请求 */ web_submit_data(&quot;checkPerson&quot;, &quot;Action=http://130.1.11.105:9080/ibis/faceService/checkPerson&quot;, &quot;Method=POST&quot;, /* 该方法支持常见的两种请求数据格式 */ /* （1）&quot;EncType=multipart/form-data&quot;。form表单提交数据 */ /* （1）&quot;EncType=&quot;。默认使用键值对提交数据 */ &quot;EncType=multipart/form-data&quot;, &quot;TargetFrame=&quot;, &quot;Referer=&quot;, ITEMDATA, &quot;Name=Name1&quot;, &quot;Value=Value1&quot;, ENDITEM, &quot;Name=Name2&quot;, &quot;Value=Value2&quot;, ENDITEM, LAST); /* 打印相应结果 */ /* lr_eval_string(&quot;&#123;result&#125;&quot;) 使用loadrunner引用外部函数，只有这样才能取出上面web_reg_save_param方法的返回值 */ lr_log_message(lr_eval_string(&quot;&#123;result&#125;&quot;)); lr_end_transaction(&quot;checkPerson&quot;, LR_AUTO); return 0; &#125; application/json Json串12345678910111213141516171819202122232425262728293031323334353637383940414243444546Action() &#123; lr_start_transaction(&quot;checkPerson&quot;); /* 注册获取返回参数，该方法可以配合打印返回数据，检测数据内容 */ web_reg_save_param(&quot;Para&quot;, &quot;LB=&quot;, &quot;RB=&quot;, LAST); /* 注册断言： Text=断言内容 */ /* 该方法会判断后面的web请求方法的返回值 */ // web_reg_find(&quot;Text=成功&quot;, // LAST); /* 汉字进行UTF-8编码 */ lr_convert_string_encoding(&quot;需要进行UTF-8加密的中文字符串&quot;,LR_ENC_SYSTEM_LOCALE,LR_ENC_UTF8,&quot;result&quot;); /* 向后面的web请求函数增加请求头 */ /* 如果web请求方法中已经设置了相同的头，则优先使用web请求方法中的头，例如web请求方法中的EncType参数，对应请求投中的Content-Type。由于下面的方法已经设置了EncType参数，所以这里的设置并没有什么X用 */ /* 表单直接使用方法自带参数，键值对和json建议使用该方法 */ web_add_header(&quot;Content-Type&quot;, &quot;application/json; charset=UTF-8&quot;); /* 主要针对form表单和键值对两种格式的web请求 */ web_custom_request(&quot;web_custom_request&quot;, &quot;URL=http://www.baidu.com&quot;, &quot;Method=POST&quot;, &quot;TargetFrame=&quot;, &quot;Resource=0&quot;, &quot;Referer=&quot;, &quot;Mode=HTTP&quot;, /* json和键值对数据格式，建议使用web_add_header方法添加Content-Type头 */ //&quot;EncType=application/json&quot;, &quot;Body=&#123;\&quot;Name1\&quot;:\&quot;Value1\&quot;,\&quot;Name2\&quot;:\&quot;Value2\&quot;&#125;&quot;, LAST); /* 打印相应结果 */ /* lr_eval_string(&quot;&#123;result&#125;&quot;) 使用loadrunner引用外部函数，只有这样才能取出上面web_reg_save_param方法的返回值 */ lr_log_message(lr_eval_string(&quot;&#123;result&#125;&quot;)); lr_end_transaction(&quot;checkPerson&quot;, LR_AUTO); return 0; &#125;]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>loadrunner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】windows性能监控指标]]></title>
    <url>%2F2018%2F05%2F16%2F%E3%80%90%E8%BD%AC%E3%80%91windows%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87%2F</url>
    <content type="text"><![CDATA[使用loadrunner进行性能测试，需要监控服务器，当IIS和sqlserver位于windows服务器时，就需要使用windows自带的性能监控工具进行性能数据收集，之后进行分析，以下为各指标详解： 内存分析内存分析需要使用的计数器：Memory性能对象和Physical Disk性能对象的计数器。内存分析的主要方法和步骤： 查看Memory-&gt;Available Mbytes指标Available Mbytes：描述：Available MBytes 指能立刻分配给一个进程或系统使用的物理内存数量，以 MB 为单位表示。它等于分配给待机(缓存的)、空闲和零分页列表内存的总和。建议指标：该值不宜低于400。一般要保留10%的可用内存，假设系统有8G内存，则该值最好不要低于800M说明：过高说明内存资源即将耗尽，应考虑增加内存如果该指标的数据比较小，系统可能出现了内存方面的问题，需要继续下面步骤进一步分析 注意Memory-&gt;Pages/sec、Memory-&gt;Page Reads/sec和Memory-&gt;Page Fault/sec的值操作系统会利用磁盘较好的方式提高系统可用内存量或者提高内存的使用效率。这三个指标直接反应了操作系统进行磁盘交换的频度 Pages/sec：描述：Pages/sec 是指为解决硬页错误从磁盘读取或写入磁盘的速度。这个计数器是可以显示导致系统范围延缓类型错误的主要指示器。它是 Memory\Pages Input/sec 和 Memory\Pages Output/sec 的总和。是用页数计算的，以便在不用做转换的情况下就可以同其他页计数如: Memory\Page Faults/sec 做比较，这个值包括为满足错误而在文件系统缓存(通常由应用程序请求)的非缓存映射内存文件中检索的页建议指标：该值不宜超过20 说明：此值持续高于几百，说明内存中有很多东西需要与硬盘交换，可能有内存问题，应考虑增加内存或更换内存 Page Fault/sec：说明：每秒发生页面失效次数，页面失效次数越多，说明操作系统向内存读取的次数越多。此时需要查看Page Reads/sec的计数值，该计数器的阀值为5，如果计数值超过5，则可以判断存在内存方面的问题。 根据Physical Disk性能对象的计数器值分析性能瓶颈对Physical Disk计数器对象的分析包括对Page Reads/sec和%Disk Time及Average Disk Queue Length的分析。如果Page Reads/sec很低，同时%Disk Time和Average Disk Queue Length的值很高，则可能有磁盘瓶颈。但是队列长度增加的同时Page Reads/sec并未降低，则是内存不足 内存计数器阀值Memory-&gt;Available Bytes建议的阀值：对于具有较大内存的计算机&gt;=10%可用空间对于较小内存也需要大于4MB空间可用说明：Available Bytes剩余的可用物理内存，单位是兆字节，表明进程当前可使用的内存字节数 Memory-&gt;Pages/sec建议的阀值：Pages/sec&lt;=20说明：操作系统经常会利用磁盘交换的方式提高系统的可用的内存量或是提高内存的使用效率。Pages/sec是指为解决硬页错误从磁盘读取或写入磁盘的速度。这个计数器是可以显示导致系统范围延缓类型错误的主要计数器。它是Memory-&gt;Pages Input/sec和Pages Output/sec的总和。是用页数计算的，以便在不同做转换的情况下就可以同其他页计数，如：Memory-&gt;Pages Fault/sec做比较，这个值包括为错误而在文件系统缓存（通常由应用程序请求）的非缓存映射内存文件中检索的页。如果Pages/sec的值为20或更大，应进一步研究页交换活动。Pages/sec的值很大不一定表明内存有问题，而可能是运行使用内存映射文件的程序所致 Memory-&gt;Page Faults/sec建议的阀值：5说明： Page Fault/secPage Fault/sec值在这个进程中执行线程造成的页面错误出现的速度。当线程引用了不在主内存工作集中的虚拟内存页即会出现Page Fault。如果它在备用表中（即已经在主内存中）或另一个共享页的处理正在使用它，就会无法从磁盘中获取页 Paging File-&gt;%Usage建议的阀值：70%以上说明：与Available Bytes和Pages/sec一起复查该值，了解计算机的页交换活动 CPU监控首先看System-&gt;%Total Processor Time性能计数器的计数值该计数器的值体现服务器整体处理器利用率，对多处理器的系统而言，该计数器提醒所有CPU的平均利用率。如果该值持续超过90%，则说明整个系统面临着处理器方面的瓶颈，需要通过增加处理器来提高性能 %Total Processor Time：描述：% Processor Time 指处理器用来执行非闲置线程时间的百分比。计算方法是，度量处理器用来执行空闲线程的时间，然后用 100% 减去该值。(每个处理器有一个空闲线程，该线程在没有其他线程可以运行时消耗周期)。此计数器是处理器活动的主要指示器，显示在采样间隔期间所观察的繁忙时间平均百分比。应注意，对处理器是否空闲的计算是在系统时钟的内部采样间隔期间(10ms)执行的。考虑到现在的处理器速度非常快，因此，在处理器可能会用大量时间为系统时钟采样间隔之间的线程提供服务时，% Processor Time 会低估处理器利用率。当恰好进行采样后即向计时器发出信号时，更可能对应用程序做出不准确地度量，基于工作负荷的计时器应用程序是一个这样的示例。建议指标：该监控内容不宜超过80%说明：过高说明CPU资源即将耗尽，应增加CPU资源或实施分布式策略 查看每个CPU的Processor-&gt;%Processor Time和Processor-&gt;%UserTime和Processor-&gt;%Privileged TimeProcessor-&gt;%User Time是系统非核心操作消耗的CPU时间，如果该值较大，可以考虑是否能够通过友好算法等方法降低这个值。如果该服务器时数据库服务器，Processor-&gt;%User Time值较大的原因很可能是数据库的排序或是函数操作消耗了过多的CPU时间，此时可以考虑对数据库系统进行优化 研究系统处理器瓶颈查看System-&gt;Processor Queue Length计数器的值，当该计数器的值大于CPU数量的总数+1时，说明产生了处理器阻塞。在处理器的%Process Time很高时，一般都是处理器阻塞，但产生处理器阻塞时，Processor-&gt;%Process Time计数器的值不一定很大，此时就必须查找阻塞的原因 CPU计数器阀值Processor-&gt;%Processor Time建议的阀值：85%说明：查找占用处理器时间高百分比的进程。升级到更快的处理器或安装其他处理器 Processor-&gt;Interrupts/sec建议的阀值：取决于处理器，每秒1000次中断是好的起点说明：此计数器的值是明显增加，而系统活动没有相应的增加则表明存在硬件问题。确定引起中断的网络适配器、磁盘或者其他硬件 Server-&gt;Bytes Total/sec建议的阀值：/说明：如果所有的服务器Bytes Total/sec和与网络的最大传送速度几乎相等，则可能需要将网络分段 Server-&gt;Work Item Shortages建议的阀值：3说明：如果值达到该阀值，请考虑将DWORD项InitWorkItems（在启动期间分配给处理器的工作项数）或者MaxWorkItems（服务器可以分配的接收缓冲区的最大数）添加到注册表（在HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters 下面）。项InitWorkItems的范围可以是从1到512，同时MaxWorkItems的范围可以是从1到65535。以InitWorkItems的任何值以及MaxWorkItems的值4096开始，并一直加倍这些值，直到Server-&gt;Work Item Shortages阀值低于3 Server-&gt;Pool Paged Peak建议的阀值：物理RAM的数量说明：此值是最大页面文件大小和物理内存数量的指示器 Server Work Queue-&gt;Queue Length建议的阀值：4说明：如果值达到此阀值，则可能存在处理器瓶颈。这是即时计数器；观察在多个间隔上的值 磁盘监控与Processor-&gt;Privieged Time合并进行分析如果在Physical Disk计数器中，只有%Disk Time比较大，其他值都比较适中，硬盘可能会是瓶颈。若几个值都比较大，且数值持续超过80%，则可能是内存泄露 \PhysicalDisk(_Total)\% Disk Time：描述：Disk Time 指所选磁盘驱动器忙于为读或写入请求提供服务所用的时间的百分比。建议指标：此值不宜超过10说明：此值过高，说明硬盘响应效率较低，应换用更高性能的硬盘 根据Disk Transfers/sec进行分析一般来说，定义该数值小于15ms为优秀，介于15~30ms之间为良好，30~60之间为可接受，超过60ms则需要考虑更换或是硬盘的RAID方式 磁盘计数器阀值 Physical Disk-&gt;%Free Space和Logical Disk-&gt;%Free Space建议的阀值：15% Physical Disk-&gt;%Disk Time和Logical Disk-&gt;%Disk Time建议的阀值：90% Physical Disk-&gt;Disk Reads/sec和Physical Disk-&gt;Disk Writes/sec建议的阀值：取决于制造商的规格说明：检查磁盘的指定传送速度，以验证此速度没有超过规格。通常，Ultra WideSCSI磁盘每秒可以处理50到70次I/O操作。注意，无论I/O是顺序的还是随机的，都会对磁盘的每秒读写速率产生很大的影响 Physical Disk-&gt;Current Disk Queue Length建议的阀值：主轴数+2说明：这是即时计数器，观察在多个间隔上的值。对于随时间变化的平均值，可试用Physicial Disk-&gt;Avg.Disk Queue Length 进程分析方法查看进程的Process-&gt;%Processor Time值每个进程的%Processor Time反映进程所消耗的处理器时间。用不同进程所消耗的处理器时间进行对比，可以看出具体哪个进程在性能测试过程中消耗了最多的处理器时间，从而可以据此对应用进行优化 查看每个进程产生的页面失效、可以用每个进程产生的页面失效（通过Process-&gt;Page Faults/sec计数器获得）和系统页面失效（通过Memory-&gt;Page Faults/sec计数器获得）的比值，来判断哪个进程产生了最多的页面失效，这个进程要么是需要大量内存的进程，要么是非常活跃的进程，可以对其进行重点分析 了解进程的Process-&gt;Private BytesProcess-&gt;Private Bytes是指进程所分配的无法与其进程共享的当前字节数量。该计数器主要用来判断在性能测试过程中有无内存泄露。例如：对于一个IIS之上的Web应用，可以重点监控inetinfo进程的Private Bytes。如果在性能测试过程中，该进程的Private Bytes计数器值不断增加，或是性能测试停止一段时间，该进程的Private Bytes仍持续在高水平，则说明应用存在内存泄露 网络分析方法Network Interface-&gt;Bytes Total/sec发送和接收字节的速率，可以通过该计数器值来判断网络链接速度是否是瓶颈，具体操作方法是用该计数器的值和当前网络的带宽进行比较 与Processor-&gt;Privileged Time合并进行分析如果在Physical Disk计数器中，只有%Disk Time比较大，其他值都比较适中，硬盘可能会是瓶颈。若几个值都比较大，且数值持续超过80%，则可能是内存泄露。 ASP.NET监控Request Wait Time地址：\ASP.NET\Request Wait Time描述：最近的请求在队列中等待的毫秒数。建议指标：此值不宜超过10000说明：此值过高说明IIS已经无法承受更多的请求，应考虑实施分布式策略 原文地址]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7搭建zabbix]]></title>
    <url>%2F2018%2F05%2F11%2Fcentos7%E6%90%AD%E5%BB%BAzabbix%2F</url>
    <content type="text"><![CDATA[centos7搭建zabbix3.4 zabbix安装环境要求： zabbix安装要求 安装前置操作关闭selinux1sudo sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config 升级yum1sudo yum -y update 切换iptables防火墙查看防火墙状态1firewall-cmd --state 关闭防火墙1systemctl stop firewalld.service 禁止开机启动启动防火墙1systemctl disable firewalld.service iptables设置安装iptables服务1yum install iptables-services 开启iptables防火墙1systemctl start iptables.service 开启特定端口：编辑文件：/etc/sysconfig/iptables，加入想要开放的端口即可，例如开放10051端口：1-A INPUT -p tcp -m tcp --dport 8090 -j ACCEPT 保存退出，重启防火墙：1systemctl restart iptables.service 安装MySQL下载源包：1wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装mysql源:1yum localinstall mysql57-community-release-el7-8.noarch.rpm 检查是否安装成功：1yum repolist enabled | grep &quot;mysql.*-community.*&quot; 123mysql-connectors-community/x86_64 MySQL Connectors Community 51mysql-tools-community/x86_64 MySQL Tools Community 63mysql57-community/x86_64 MySQL 5.7 Community Server 267 可以修改源配置，安装你喜欢的版本：1vim /etc/yum.repos.d/mysql-community.repo 只需要把对应的enable改成1即可。安装1yum install mysql-community-server 启动服务12systemctl start mysqldsystemctl status mysqld #查看状态 配置开机启动12systemctl enable mysqldsystemctl daemon-reload 修改root密码查看默认密码：1grep &apos;temporary password&apos; /var/log/mysqld.log 修改密码很简单，mysql -uroot -p进入控制台，修改：1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;yourpwd&apos;; 修改权限：1GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;pwd&apos; WITH GRANT OPTION; 配置防火墙，开放3306端口，即可在windows使用工具连接数据库。 安装Apache123sudo yum -y install httpdsystemctl start httpd.service #启动systemctl enable httpd.service #开机启动 安装php1sudo yum install php 安装php扩展1sudo yum install php-mysqlnd php-gd libjpeg* php-snmp php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-bcmath php-mhash php-common php-ctype php-xml php-xmlreader php-xmlwriter php-session php-mbstring php-gettext php-ldap php-mysqli --skip-broken 1sudo yum install wget telnet net-tools python-paramiko gcc gcc-c++ dejavu-sans-fonts python-setuptools python-devel sendmail mailx net-snmp net-snmp-devel net-snmp-utils freetype-devel libpng-devel perl unbound libtasn1-devel p11-kit-devel OpenIPMI unixODBC 修改一些配置设置MySQL参数1vim /etc/my.cnf 在文件最后添加以下内容（8G内存为例，根据自己配置适当修改）123456789101112131415161718192021222324innodb_file_per_table = 1innodb_status_file = 1innodb_buffer_pool_size = 6Ginnodb_flush_log_at_trx_commit = 2innodb_log_buffer_size = 16Minnodb_log_file_size = 64Minnodb_support_xa = 0default-storage-engine = innodbbulk_insert_buffer_size = 8Mjoin_buffer_size = 16Mmax_heap_table_size = 32Mtmp_table_size = 32Mmax_tmp_tables = 48read_buffer_size = 32Mread_rnd_buffer_size = 16Mkey_buffer_size = 32Mthread_cache_size = 32innodb_thread_concurrency = 8innodb_flush_method = O_DIRECTinnodb_rollback_on_timeout = 1query_cache_size = 16Mquery_cache_limit = 16Mcollation_server = utf8_bincharacter_set_server = utf8 注：原则上 innodb_buffer_pool_size 需要设置为主机内存的 80%，如果主机内存不是 8GB，以上参数可依据相应比例进行调整，例如主机内存为 16GB，则 innodb_buffer_pool_size 建议设置为 12GB，innodb_log_buffer_size 建议设置为 32M，innodb_log_file_size 建议设置为 128M，以此类推。请注意innodb_buffer_pool_size的值必须是整数，例如主机内存是4G，那么innodb_buffer_pool_size可以设置为3G，而不能设置为3.2G 重启MySQL1systemctl restart mysqld 创建zabbix数据库用户进入mysql控制台1mysql -uroot -p 12345create database zabbix character set utf8;create user zabbix@&apos;%&apos; identified by &apos;yourpwd&apos;;GRANT ALL PRIVILEGES ON *.* TO &apos;zabbix&apos;@&apos;%&apos; IDENTIFIED BY &apos;yourpwd&apos; WITH GRANT OPTION;flush privileges;exit; 安装zabbix源1sudo rpm -ivh http://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm 安装zabbix1sudo yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-java-gateway zabbix-web 配置zabbix导入zabbix所需信息12cd /usr/share/doc/zabbix-server-mysql-3.4.3zcat create.sql.gz | mysql -uroot zabbix -p 配置zabbix参数1sudo vim /etc/zabbix/zabbix_server.conf 1234567891011121314151617181920DBPassword=yourpwd(125行左右)CacheSize=512M（在385行左右）HistoryCacheSize=128M（在410行左右）HistoryIndexCacheSize=128M（在419行左右）TrendCacheSize=128M（在428行左右）ValueCacheSize=256M（在438行左右）Timeout=30（在448行左右） 配置Apache中的php参数123456789sudo vim /etc/httpd/conf.d/zabbix.confphp_value max_execution_time 600php_value memory_limit 256Mphp_value post_max_size 32Mphp_value upload_max_filesize 32Mphp_value max_input_time 600php_value always_populate_raw_post_data -1date.timezone 去掉注释符号#，并将值修改为 Asia/Shanghai 重启系统1reboot 启动zabbix1sudo systemctl start httpd &amp;&amp; systemctl start zabbix-server 在浏览器中输入http://your_IP/zabbix，进入zabbix页面进行初始化配置，单击两次next step，填写正确数据库信息，继续next step，填写zabbix detail（相当于起名字），端口不变！！！然后finish，完成安装。 设置中文第一次登录zabbix监控系统，默认用户为admin，默认密码zabbix，正确登录系统。选择Administrator –&gt; Users –&gt; Admin，在Language栏选择Chinese(zh_CN)完成汉化。 OVER! 参考链接 centos7安装zabbix3.4]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>zabbix3.4</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos部署.net core]]></title>
    <url>%2F2018%2F05%2F10%2Fcentos%E9%83%A8%E7%BD%B2-net-core%2F</url>
    <content type="text"><![CDATA[Centos7部署.net core应用 安装dotnet产品提要首先需要注册Microsoft签名密钥并添加Microsoft产品提要，才能安装.net12rpm --import https://packages.microsoft.com/keys/microsoft.ascsh -c &apos;echo -e &quot;[packages-microsoft-com-prod]\nname=packages-microsoft-com-prod \nbaseurl= https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/dotnetdev.repo&apos; 默认使用root用户操作 安装.NET SDK首先更新yum1yum update 安装所需组件1yum install libunwind libicu 安装.NET SDK1yum install dotnet-sdk-2.1.200 完成安装，dotnet --version验证安装 部署应用将你的.net core应用随意放置在某个目录，进入目录，执行1dotnet YourApp.WebApi.dll 即可启动服务，默认启动端口为5000. nginx代理安装nginx安装nginx需要添加EPEL仓库，然后再安装：12yum install epel-releaseyum install nginx 启动nginx启动：1systemctl start nginx 设置nginx开机启动1systemctl enable nginx 修改配置将nginx的默认配置文件中的80端口内容注释掉，文件路径：/etc/nginx/nginx.conf,然后在nginx的配置加载目录下创建你需要代理的端口配置文件yourapp.conf，路径：/etc/nginx/conf.d，文件内容：1234567891011server &#123; listen 80; location / &#123; proxy_pass http://localhost:5000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection keep-alive; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; &#125;&#125; 重启nginx即可通过80端口访问部署的.net core服务。 配置守护进程由于.net core程序在linux上运行，一般都是需要在shell里运行，执行命令：dotnet app.dll，一旦窗口关闭了，程序就被杀了，所以需要配置个守护进程，微软推荐：Supervisor 安装安装很简单，一条命令：1yum install supervisor 配置修改默认配置文件：supervisord.conf，找到最后：12[include]files = supervisord.d/*.ini 修改为：12[include]files = supervisord.d/*.conf 进入supervisord.d文件夹，创建APP的配置文件YourAPP.conf12cd supervisord.dvim YourAPP.conf 内容为：1234567891011[program:HelloWebApp]command=dotnet YourAPP.dll #要执行的命令directory=/usr/local/YourAPP #命令执行的目录environment=ASPNETCORE__ENVIRONMENT=Production #环境变量user=root #进程执行的用户身份stopsignal=INTautostart=true #是否自动启动autorestart=true #是否自动重启startsecs=1 #自动重启间隔stderr_logfile=/var/log/HelloWebApp.err.log #标准错误日志stdout_logfile=/var/log/HelloWebApp.out.log #标准输出日志 保存退出 运行supervisord12supervisord -c /etc/supervisord.confps -ef | grep APPName 常用命令：12345supervisorctl shutdown #关闭所有任务supervisorctl stop|start program_namesupervisorctl status #查看所有任务状态 加自启动文件路径：/usr/lib/systemd/system/supervisord.service，安装时候已经存在，如果没有，就自己创建一个：1234567891011121314[Unit]Description=Supervisor daemon[Service]Type=forkingExecStart=/usr/bin/supervisord -c /etc/supervisord.confExecStop=/usr/bin/supervisorctl shutdownExecReload=/usr/bin/supervisorctl reloadKillMode=processRestart=on-failureRestartSec=42s[Install]WantedBy=multi-user.target 加载启动项：123systemctl enable supervisord验证systemctl is-enabled supervisord 问题记录由于安装在linux上，不同于windows，出现了一个现象，页面进行请求之后，消息队列中的消息一直无法被消费，查看日志，显示：123The handler does not support custom handling of certificates with this combination of libcurl (7.29.0) and its SSL backend (&quot;NSS/3.28.4&quot;).) ---&gt; System.PlatformNotSupportedException: The handler does not support custom handling of certificates with this combination of libcurl (7.29.0) and its SSL backend (&quot;NSS/3.28.4&quot;).at System.Net.Http.CurlHandler.SslProvider.SetSslOptionsForUnsupportedBackend(EasyRequest easy, ClientCertificateProvider certProvider)at System.Net.Http.CurlHandler.SslProvider.SetSslOptions(EasyRequest easy, ClientCertificateOption clientCertOption 原因就是linux不支持ssl（貌似是这样），搜了一堆答案，大部分是建议升级curl 解决linux netcore https请求使用自签名证书忽略安全检查方法开始：首先安装openssl和gcc1yum install openssl-devel gcc 然后是最新版本的curl：123456wget https://curl.haxx.se/download/curl-7.59.0.tar.gztar -zxf curl-7.59.0.tar.gzcd curl-7.59.0./configure --prefix=/usr/local/curl/ --without-nss --with-ssl=/usr/local/ssl/makemake install 备份原来的curl：1mv /usr/bin/curl /usr/bin/curl.bak 新安装的curl创建软链接1ln -s /usr/local/curl/bin/curl /usr/bin/curl 查看此时curl版本1curl --version 编辑搜索目录：1vim /etc/ld.so.conf 增加一行：/usr/local/curl/lib 重启服务，完成！ Supervisor详细配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128; Sample supervisor config file.;; For more information on the config file, please see:; http://supervisord.org/configuration.html;; Notes:; - Shell expansion (&quot;~&quot; or &quot;$HOME&quot;) is not supported. Environment; variables can be expanded using this syntax: &quot;%(ENV_HOME)s&quot;.; - Quotes around values are not supported, except in the case of; the environment= options as shown below.; - Comments must have a leading space: &quot;a=b ;comment&quot; not &quot;a=b;comment&quot;.; - Command will be truncated if it looks like a config file comment, e.g.; &quot;command=bash -c &apos;foo ; bar&apos;&quot; will truncate to &quot;command=bash -c &apos;foo &quot;.[unix_http_server]file=/tmp/supervisor.sock ; socket 文件路径;chmod=0700 ; socket 文件 模式 (默认 0700);chown=nobody:nogroup ; socket file uid:gid owner;username=user ; 使用supervisorctl连接的用户;password=123 ; 上条用户的密码;[inet_http_server] ; Web Server和远程的supervisorctl 配置块(默认关闭);port=127.0.0.1:9001 ; 监听的地址和端口;username=user ; 登录时用的用户;password=123 ; 上条用户的密码[supervisord]logfile=/tmp/supervisord.log ; supervisord进程日志路径logfile_maxbytes=50MB ; supervisord进程日志的大小 当超过50M时，会生成一个新的日志( 0 表示不限制)logfile_backups=10 ; 日志文件保持的数量，启动supervisor时 会自动创建10个buckup文件，用于log rotate ( 0 表示不限制)loglevel=info ; 日志级别pidfile=/tmp/supervisord.pid ; supervisord的pid文件路径。nodaemon=false ; 如果是true，supervisord进程将在前台运行 默认为false(后台运行)minfds=1024 ; 这个是最少系统空闲的文件描述符，低于这个值supervisor将不会启动minprocs=200 ; 最小可用的进程描述符，低于这个值supervisor也将不会正常启动;umask=022 ; 进程创建文件的掩码 (默认 022);user=chrism ; 该参数指定的用户也可以对supervisord进行管理;identifier=supervisor ; supervisord的标识符;directory=/tmp ; 当supervisord以守护进程运行的时候，启动supervisord进程之前，会先切换到这个目录;nocleanup=true ; false的时候 supervisord进程启动的时候 会在把以前子进程产生的日志文件(路径为AUTO的情况下)清除掉(true不清除);childlogdir=/tmp ; 当子进程日志路径为AUTO的时候，子进程日志文件的存放路径 (默认 $TMP);environment=KEY=&quot;value&quot; ; 这个是用来设置环境变量的，supervisord在linux中启动默认继承了linux的 环境变量，在这里可以设置supervisord进程特有的其他环境变量supervisord启动子进程时，子进程会拷贝父进程的内存空间内容。 所以设置的这些环境变量也会被子进程继承 (默认不设置);strip_ansi=false ; 这个选项如果设置为true，会清除子进程日志中的所有ANSI(\n,\t) 序列[rpcinterface:supervisor] ; 这个选项是给XML_RPC用的，果想使用supervisord或者web server 必须要开启supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl=unix:///tmp/supervisor.sock ; supervisorctl本地连接supervisord，本地UNIX socket;serverurl=http://127.0.0.1:9001 ; supervisorctl远程连接supervisord的时候，用到的地址和端口;username=chris ; 连接登录的用户名;password=123 ; 密码;prompt=mysupervisor ; 输入用户名密码时候的提示符 默认:mysupervisor ;history_file=~/.sc_history ; 指定历史命令的文件;[program:theprogramname] ; 案例 [program:给要管理进程起的一个名字];command=/bin/cat ; 要执行的进程 可带参数 $1 $2 $3 注意!! 执行的进程不能是守护进程 ! !;process_name=%(program_name)s ; 进程名 下条numprocs参数为1，就不用管这个参数 默认值%(program_name)s也就是上面的那个program冒号后面的名字;numprocs=1 ; 启动进程的数目。当不为1时，就是进程池的概念，默认为1;directory=/tmp ; 进程运行前，会前切换到这个目录;umask=022 ; 进程掩码 (default None);priority=999 ; 子进程启动关闭优先级，优先级低的，最先启动，关闭的时候最后关闭 (default 999);autostart=true ; 设置为true 子进程将在supervisord启动后被自动启动;startsecs=1 ; 设置子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了;startretries=3 ; 进程启动失败后，最大尝试启动的次数 当超过3次后，supervisor将把此进程的状态置为FAIL;autorestart=unexpected ; 设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在上面的exitcodes里面定义的退出码的时候，&gt;才会被自动重启。当为true的时候，只要子进程挂掉，将会被无条件的重启;exitcodes=0,2 ; 注意和上面的的autorestart=unexpected对应 exitcodes里面的定义的退出码是expected的。;stopsignal=QUIT ; 进程停止信号，可以为TERM, HUP, INT, QUIT, KILL, USR1, or USR2等信号 默认为TERM 当用设定的信号去杀掉进程，退出码会被认为是expected;stopwaitsecs=10 ; 这个是当我们向子进程发送stopsignal信号后，到系统返回信息给supervisord，所等待的最大时间。 超过这个时间，supervisord会向该子进程发送一个强制kill的信号(默认10秒);stopasgroup=false ; 这个东西主要用于，supervisord管理的子进程，这个子进程本身还有子进程 那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程有可能会变成孤儿进程 所以咱们可以设置可个选项，把整个该子进程的整个进程组都干掉 设置为true的话，一般killasgroup也会被设置为true 该选项发送的是stop信号(def false);killasgroup=false ; 这个和上面的stopasgroup类似，不过发送的是kill信号(def false);user=chrism ; 如果supervisord是root启动，我们在这里设置这个非root用户，可以用来管理该program 默认不设置;redirect_stderr=true ; 为true，则stderr的日志会被写入stdout日志文件中 (default false);stdout_logfile=/a/path ; 子进程的stdout的日志路径，可以指定路径，AUTO，none等三个选项 设置为none的话，将没有日志产生。设置为AUTO的话，将随机找一个地方成日志文件，而且当supervisord重新启动的时候，以前的日志文件会被清空。当 redirect_stderr=true的时候，sterr也会写进这个日志文件;stdout_logfile_maxbytes=1MB ; 日志文件最大大小，和[supervisord]中定义的一样 (default 50MB);stdout_logfile_backups=10 ; 和[supervisord]定义的一样 (0 means none, default 10);stdout_capture_maxbytes=1MB ; 这个东西是设定capture管道的大小，当值不为0的时候，子进程可以从stdout发送信息，而supervisor可以根据信息，发送相应的event (default 0);stdout_events_enabled=false ; 为ture的时候，当子进程由stdout向文件描述符中写日志的时候，将触发supervisord发送PROCESS_LOG_STDOUT类型的event(default false);stderr_logfile=/a/path ; 设置stderr写的日志路径，当redirect_stderr=true。这个就不用设置了，设置了也是白搭。因为它会被写入stdout_logfile的同一个文件中 default AUTO(随便找个地存，supervisord重启被清空);stderr_logfile_maxbytes=1MB ; max # logfile bytes b4 rotation (default 50MB);stderr_logfile_backups=10 ; # of stderr logfile backups (0 means none, default 10);stderr_capture_maxbytes=1MB ; number of bytes in &apos;capturemode&apos; (default 0);stderr_events_enabled=false ; emit events on stderr writes (default false);environment=A=&quot;1&quot;,B=&quot;2&quot; ; 这个是该子进程的环境变量，和别的子进程是不共享的;serverurl=AUTO ; override serverurl computation (childutils);[eventlistener:theeventlistenername] ;这个东西其实和program的地位是一样的，也是suopervisor启动的子进程，不过它干的活是订阅supervisord发送的event。他的名字就叫listener了。我们可以在listener里面做一系列处理，比如报警....;command=/bin/eventlistener ; 和上面的program一样，表示listener的可执行文件的路径;process_name=%(program_name)s ; 这个也一样，进程名，当下面的numprocs为多个的时候，才需要。否则默认就OK了;numprocs=1 ; 相同的listener启动的个数;events=EVENT ; event event事件的类型，也就是说，只有写在这个地方的事件类型。才会被发送;buffer_size=10 ; event队列缓存大小 (default 10);directory=/tmp ; 进程执行前，会切换到这个目录下执行 (def no cwd);umask=022 ; umask for process (default None);priority=-1 ; 启动优先级 (default -1);autostart=true ; true supervisord启动一起启动 (default: true);startsecs=1 ; 设置子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了 (def. 1);startretries=3 ; 失败最大尝试次数 (default 3);autorestart=unexpected ; 和program一样 (def: unexpected);exitcodes=0,2 ; &apos;expected&apos; exit codes used with autorestart (default 0,2);stopsignal=QUIT ; signal used to kill process (default TERM);stopwaitsecs=10 ; max num secs to wait b4 SIGKILL (default 10);stopasgroup=false ; send stop signal to the UNIX process group (default false);killasgroup=false ; SIGKILL the UNIX process group (def false);user=chrism ; setuid to this UNIX account to run the program;redirect_stderr=false ; redirect_stderr=true is not allowed for eventlisteners;stdout_logfile=/a/path ; stdout log path, NONE for none; default AUTO;stdout_logfile_maxbytes=1MB ; max # logfile bytes b4 rotation (default 50MB);stdout_logfile_backups=10 ; # of stdout logfile backups (0 means none, default 10);stdout_events_enabled=false ; emit events on stdout writes (default false);stderr_logfile=/a/path ; stderr log path, NONE for none; default AUTO;stderr_logfile_maxbytes=1MB ; max # logfile bytes b4 rotation (default 50MB);stderr_logfile_backups=10 ; # of stderr logfile backups (0 means none, default 10);stderr_events_enabled=false ; emit events on stderr writes (default false);environment=A=&quot;1&quot;,B=&quot;2&quot; ; process environment additions;serverurl=AUTO ; override serverurl computation (childutils);[group:thegroupname] ; 这个东西就是给programs分组，划分到组里面的program。我们就不用一个一个去操作了 我们可以对组名进行统一的操作。 注意：program被划分到组里面之后，就相当于原来的配置从supervisor的配置文件里消失了supervisor只会对组进行管理，而不再会对组里面的单个program进行管理了;programs=progname1,progname2 ; 组成员，用逗号分开;priority=999 ; 优先级，相对于组和组之间 (default 999);[include] ; 跟Nginx虚拟主机一个样;files = relative/directory/*.ini 参考链接 centos部署.net core]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>.net core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用webpagetest测试不同国家登录响应]]></title>
    <url>%2F2018%2F05%2F08%2F%E4%BD%BF%E7%94%A8webpagetest%E6%B5%8B%E8%AF%95%E4%B8%8D%E5%90%8C%E5%9B%BD%E5%AE%B6%E7%99%BB%E5%BD%95%E5%93%8D%E5%BA%94%2F</url>
    <content type="text"><![CDATA[使用webpageTest模拟不同国家进行登录操作 产品boss提了个从不同国家测试系统访问响应时间的需求，目前完成的是不同国家登录操作。 先来个套话：网站的打开速度直接影响用户体验，据悉，网站若没有在4秒内读取出来，大多数的访客就会选择离开，而且网页的载入速度也会影响网站的排名，因此，网站的打开速度极其重要。根据不同的需求去分析网站的加载速度，有助于促进网站高效运行 工具拿到需求之后，上网搜过很多工具，接触了的有： Pingdomsucuri 以及正在使用的： webpagetest webpagetest其他的就不介绍了，只介绍怎么使用webpagetest进行不同国家的登录操作。说实话，刚开始接触时候有点懵，webpagetest自己有个Auth模块，原以为可以直接通过这个来进行登录鉴权，结果可以预料，压根没用，后来就开始琢磨Script模块。看了n久官方文档之后，实验出来了，鼓励大家看官方文档啊。。。上链接： script模块 webpagetest提供脚本的形式，帮助用户使用脚本来填充表单，达到登录的目的。这点看下来有点类似于自动化测试时候，先看页面源码，找到用户名/密码源码的唯一标识，在script代码框中使用该唯一标识来指代需要用到的元素，例如：登录页面源码展示的用户名：1&lt;input name=&quot;username&quot; class=&quot;ant-input ng-not-empty ng-dirty ng-valid-parse userInput ng-touched&quot; id=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;用户名或邮箱&quot; ng-model=&quot;model.username&quot; ng-change=&quot;onChange()&quot;&gt; 从上面的源码可以看出，使用id可以唯一标志该字段，在自动化测试中使用find_element_by_id(&#39;username&#39;)即可获得该页面元素，类比到webpagetest的script，也是如此：1setValue id=username yourusername 即可完成定位到用户名并且完成用户名输入，同样的，密码：源码为：1&lt;input id=&quot;password&quot; name=&quot;password&quot; type=&quot;password&quot; class=&quot;ant-input ant-input-lg ng-not-empty ng-dirty ng-valid-parse userInput ng-touched&quot; placeholder=&quot;密码&quot; ng-model=&quot;model.password&quot; autocomplete=&quot;off&quot; focus-if=&quot;model.username&quot; ng-change=&quot;pwdOnChange()&quot;&gt; webpagetest定位：1setValue id=password yourpassword 当然，点击登录按钮也类似：1clickAndWait innerText=Login 以上演示的只是一种定位方式，更多的使用，还是去看官方文档吧，有各种情况可供选择~~ 登录直接上我的登录脚本：123456logData 0navigate https://test-login.comlogData 1setValue name=username yourusernamesetValue name=password yourpasswordclickAndWait type=submit 说明logData个人理解是是否开启数据记录的标志，类似开启缓存（可能理解不对），0为关闭，1为开启，对于登录之后的操作，可以在登录前设置logData为1，打开数据记录，这样在后续的操作中就可以使用登录之后的用户信息。 官方示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// load the account name and passwordloadVariables accounts.txt// bring up the login screensetEventName launchnavigate http://webmail.aol.com// ignore any errors from here on (in case the mailbox is empty or we get image challenged)ignoreErrors 1// log insetValue name=loginId %AOLSN%setValue name=password %AOLPW%setEventName loadsubmitForm name=AOLLoginForm// only read and send a mail once an hourminInterval AOLMail 60// close the today curtainclick className=backdropsleep 5// Open the first message with a subject of &quot;test&quot;setEventName readclickAndWait innerText=test// delete the messageclick title=Delete (del)sleep 5// open the compose mail formsetEventName composeclickAndWait title=Write mail (Alt + w)// send a test message to myselfsleep 1setValue tabindex=100 %AOLSN%setValue name=Subject testloadFile msg.txt %MSG%setInnerText contentEditable=true %MSG%sleep 1setDOMElement className=confirmMessagesetEventName sendclickAndWait innerText=SendendInterval// sign offsetEventName logoutclickAndWait className=signOutLink]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>webpagetest</tag>
        <tag>response time</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7搭建Nitrate]]></title>
    <url>%2F2018%2F04%2F22%2FCentos7%E6%90%AD%E5%BB%BANitrate%2F</url>
    <content type="text"><![CDATA[基于python+Django，测试用例管理平台Nitrate搭建 前言基于目前Jira+confluence已经成为日常流程管控，老大就琢磨着我们测试用例需要个专门的平台进行管控，所以也就产生了调研的需求，候选有俩：testlink和Nitrate，由于目前组内python氛围较活跃，自动化测试用例也是基于python，所以也就是希望能找到一个基于python写的系统，方便定制，二次开发嘛~ 开篇在有搭建Nitrate这个任务之后，本着偷懒的心态，首先搜了一圈搭建教程，然而，一篇都没找到！！！也就是说，我得自己折腾了！！！没办法，直接上github找项目地址，说不定在说明里面有介绍呢 Nitrate项目地址 里面的确是有介绍，搭建教程貌似也有，还是各种环境的搭建教程，好像看到些光辉啊.. Nitrate Doc 文档介绍了各种搭建教程，选你看着比较顺眼的，动手吧~ 坎坷的系统搭建平时Linux还算是比较顺手，直接选Installing nitrate on RHEL6 with Apache and MySQL，虽然介绍的Redhat的，不都涨一样嘛~开工：由于自己电脑还是Windows的（别提了，测试嘛，需要太多工具，唉），首先就是搭个Centos7的虚拟机，轻车熟路了，非常迅速的完工，Xshell远程连上，开始愉快的黑窗口作业。。 环境准备由于搭建的centos7是所谓的CentOS-7-x86_64-Everything-1611版本，网卡什么的驱动都是装好了，如果你装的是最间版，那么ifconfig命令都敲不了。。。自己百度怎么开网吧。。 Git由于是需要从github仓库直接拉项目，所以git就必须先搭个了:1yum install git 就完成了，如果遇到yum不让用，日志显示XX进程正在使用yum，那要么等，要么就是暴力点，直接杀：1rm -rf /var/run/yum.pid 然后就可以安心的yum install了。 Django由于Nitrate是基于Django的，所以，必不可少的需要装个Django；装Django，有三种方法： pip最简单就是一条命令带走：1pip install Django setuptools使用setuptools安装，首先需要先装它：1yum install python-setuptools 安装完成之后，再使用easy_install安装django：1easy_install django 源码安装首先是上官网下载个tar.gz格式的源码包： 官方源码下载地址 然后就可以开始正常的解压安装了：1234cd your_pathrz (windows拷包到linux)tar -zxvf Django-x.x.tar.gzpython setup.py install 即可完成安装，验证：1django-admin.py 正确安装会出现很多选项，类似这样：12345678910111213[root@localhost run]# django-admin.pyType &apos;django-admin.py help &lt;subcommand&gt;&apos; for help on a specific subcommand.Available subcommands:[django] check compilemessages createcachetable dbshell diffsettings dumpdata 好了，这这里来说说遇到的第一个坑，鬼知道是为了个什么，Nitrate限制Django版本，当你使用pip或者easy_install安装个2.0版本之后，后面编译安装Nitrate时候，就会开始报错给你了，到时候就知道是多么北京的事了,印象中Django版本要求是1.8&lt;=Django版本&lt;1.11 ，唉，所以，如果谁正准备装这个，或者偶尔看到我写的这玩意，真的，记住，还是源码安装Django吧。。。另外，强烈建议你就要你装完系统的python版本（多半是2.7.5），千万别升3.6，不然可能还要哭一会。 pip上面说的可以使用pip来装Django，但是，貌似2.7.5的python压根就没自带个pip，好吧，反正后面还需要pip，还是先装上吧：首先安装epel扩展1yum -y install epel-release 然后就可以装pip了：1yum -y install python-pip 完了清个cache:1yum clean all MySQL数据库选MySQL也没什么可纠结了，安装：下载源包：1wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装mysql源:1yum localinstall mysql57-community-release-el7-8.noarch.rpm 检查是否安装成功：1yum repolist enabled | grep &quot;mysql.*-community.*&quot; 123mysql-connectors-community/x86_64 MySQL Connectors Community 51mysql-tools-community/x86_64 MySQL Tools Community 63mysql57-community/x86_64 MySQL 5.7 Community Server 267 可以修改源配置，安装你喜欢的版本：1vim /etc/yum.repos.d/mysql-community.repo 只需要把对应的enable改成1即可。 安装1yum install mysql-community-server 这里再次吐槽下公司的网，烂的不是一点半点，这个包印象中有近200M，公司网以20k速度给我下。。。直接流量开热点才下好。 启动服务systemctl start mysqld 查看状态systemctl status mysqld 配置开机启动12systemctl enable mysqldsystemctl daemon-reload 修改root密码查看默认密码：1grep &apos;temporary password&apos; /var/log/mysqld.log 修改密码很简单，mysql -uroot -p进入控制台，改：1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;pwd&apos;; 顺便改个权限：1GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;pwd&apos; WITH GRANT OPTION; 再配个防火墙，3306端口打开，那么在Windows中就能使用工具连接数据库了。 修改字符编码编辑/etc/my.cnf，在[mysqld]下添加配置：123[mysqld]character_set_server=utf8init_connect=&apos;SET NAMES utf8&apos; 重启mysql服务即可。 开始搭建项目clone首先是clone到本地：12cd /usr/local/srcgit clone https://github.com/Nitrate/Nitrate.git 大概有这么些东西：123456789101112131415161718192021[root@localhost Nitrate]# lltotal 160-rw-r--r--. 1 root root 609 Apr 22 12:23 AUTHORSdrwxr-xr-x. 4 root root 43 Apr 22 12:41 build-rw-r--r--. 1 root root 66430 Apr 22 12:23 CHANGELOG.rstdrwxr-xr-x. 4 root root 60 Apr 22 12:23 contribdrwxr-xr-x. 2 root root 35 Apr 22 12:41 distdrwxr-xr-x. 3 root root 76 Apr 22 12:23 docs-rw-r--r--. 1 root root 18092 Apr 22 12:23 LICENSE-rw-r--r--. 1 root root 1690 Apr 22 12:23 Makefile-rwxr-xr-x. 1 root root 279 Apr 22 12:23 manage.py-rw-r--r--. 1 root root 256 Apr 22 12:23 MANIFEST.indrwxr-xr-x. 2 root root 110 Apr 22 12:41 Nitrate.egg-info-rw-r--r--. 1 root root 25090 Apr 22 12:23 nitrate.spec-rw-r--r--. 1 root root 1753 Apr 22 12:23 README.rst-rw-r--r--. 1 root root 1127 Apr 22 12:23 requirements.txt-rw-r--r--. 1 root root 657 Apr 22 12:23 setup.cfg-rw-r--r--. 1 root root 2234 Apr 22 12:23 setup.pydrwxr-xr-x. 19 root root 4096 Apr 22 12:23 tcms-rw-r--r--. 1 root root 827 Apr 22 12:23 tox.ini-rw-r--r--. 1 root root 4 Apr 22 12:23 VERSION.txt 安装开发包1yum install gcc python-devel mysql-devel krb5-devel libxml2-devel libxslt-devel 安装完成之后，还要项目依赖 安装依赖进入项目目录：1cd /usr/local/src/Nitrate 开始安装：1pip install . 这个过程会在你本地检查一个个的依赖，没有就装，其中就会检查Django，这破版本的问题，真的是害我又重装一遍。安装速度取决于你的网速和电脑硬件性能，安心等着successful。 源码安装Nitrate还是在这个目录，执行:1python setup.py install 使用源码安装Nitrate，等着就好，安装完成之后，可以到/usr/lib/python2.7/site-packages下找到你安装的Nitrate：123[root@localhost site-packages]# ls | grep NitrateNitrate-4.1-py2.7.eggNitrate-4.1-py2.7.egg-info 看看里面有啥：12345678910111213141516171819202122232425262728293031323334[root@localhost site-packages]# cd Nitrate-4.1-py2.7.egg[root@localhost Nitrate-4.1-py2.7.egg]# lsEGG-INFO tcms[root@localhost Nitrate-4.1-py2.7.egg]# lltotal 4drwxr-xr-x. 2 root root 130 Apr 22 14:52 EGG-INFOdrwxr-xr-x. 18 root root 4096 Apr 22 14:52 tcms[root@localhost Nitrate-4.1-py2.7.egg]# cd tcms/[root@localhost tcms]# lltotal 56-rw-r--r--. 1 root root 307 Apr 22 14:52 celery.py-rw-r--r--. 1 root root 586 Apr 22 14:52 celery.pycdrwxr-xr-x. 11 root root 4096 Apr 22 14:52 core-rw-r--r--. 1 root root 301 Apr 22 14:52 __init__.py-rw-r--r--. 1 root root 422 Apr 22 14:52 __init__.pycdrwxr-xr-x. 4 root root 75 Apr 22 14:52 integrationdrwxr-xr-x. 4 root root 32 Apr 22 14:52 localedrwxr-xr-x. 3 root root 261 Apr 22 14:52 managementdrwxr-xr-x. 3 root root 228 Apr 22 14:52 profilesdrwxr-xr-x. 2 root root 272 Apr 22 14:52 reportdrwxr-xr-x. 2 root root 241 Apr 22 14:52 searchdrwxr-xr-x. 2 root root 224 Apr 22 16:15 settingsdrwxr-xr-x. 8 root root 94 Apr 22 15:09 staticdrwxr-xr-x. 14 root root 4096 Apr 22 16:06 templatesdrwxr-xr-x. 6 root root 4096 Apr 22 14:52 testcasesdrwxr-xr-x. 6 root root 4096 Apr 22 14:52 testplansdrwxr-xr-x. 6 root root 4096 Apr 22 14:52 testrunsdrwxr-xr-x. 2 root root 86 Apr 22 14:52 tests-rw-r--r--. 1 root root 2334 Apr 22 14:52 urls.py-rw-r--r--. 1 root root 2299 Apr 22 14:52 urls.pycdrwxr-xr-x. 2 root root 123 Apr 22 14:52 utils-rw-r--r--. 1 root root 1896 Apr 22 14:52 wsgi.py-rw-r--r--. 1 root root 1605 Apr 22 14:52 wsgi.pycdrwxr-xr-x. 4 root root 4096 Apr 22 14:52 xmlrpc 记住tcms/这个文件夹，后面的配置，全都在这里面。 配置初始化数据首先是创建nitrate这数据库，然后创建用户，赋权限，初始化数据：12create database nitrate;GRANT ALL PRIVILEGES ON *.* TO &apos;nitrate&apos;@&apos;%&apos; IDENTIFIED BY &apos;pwd&apos; WITH GRANT OPTION; 修改配置之前接触过Django的，应该都知道有个文件setting.py这里面是你app的一些重要配置，我们要改的，也就是它。Nitrate把传统意义上的setting.py分成了两个文件（其实是一个文件）：12common.pyproject.py 文件路径：/usr/lib/python2.7/site-packages/Nitrate-4.1-py2.7.egg/tcms/settings几乎所有配置都可以在common.py中完成，但是project.py在文件开头就是一句话：1from common import * 所以，我们常用的配置，在project.py中完成即可。内容大概长这样，可以参考我的配：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# Django settings for product env.from common import *# Debug settingsDEBUG = TrueTEMPLATE_DEBUG = DEBUG# Database settingsDATABASES = &#123; &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;nitrate&apos;, &apos;USER&apos;: &apos;nitrate&apos;, &apos;PASSWORD&apos;: &apos;pwd&apos;, &apos;HOST&apos;: &apos;192.168.98.133&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;, &apos;slave_1&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;nitrate&apos;, &apos;USER&apos;: &apos;nitrate&apos;, &apos;PASSWORD&apos;: &apos;pwd&apos;, &apos;HOST&apos;: &apos;192.168.98.133&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;,&#125;# add RemoteUserMiddleWare if kerberos authentication is enabledMIDDLEWARE_CLASSES += (# &apos;django.contrib.auth.middleware.RemoteUserMiddleware&apos;,)# Remote kerberos authentication backends#AUTHENTICATION_BACKENDS = (# &apos;tcms.core.contrib.auth.backends.ModAuthKerbBackend&apos;,#)DATABASE_ROUTERS = [&apos;tcms.core.utils.tcms_router.RWRouter&apos;]# Kerberos realm#KRB5_REALM = &apos;EXAMPLE.COM&apos;# Bugzilla integration setttings# Config following settings if your want to integrate with bugzillaBUGZILLA3_RPC_SERVER = &apos;&apos;BUGZILLA_URL = &apos;&apos;BUGZILLA_USER = &apos;&apos;BUGZILLA_PASSWORD = &apos;&apos;# JIRA integration setttings# Config following settings if your want to integrate with JIRAJIRA_URL = &apos;&apos;# Set the default send mail addressEMAIL_HOST = &apos;smtp.example.com&apos;EMAIL_FROM = &apos;noreply@example.com&apos;# Site-specific messages# First run - to detemine need port user or not.FIRST_RUN = False# You can add a help link on the footer of home page as following format:# (&apos;http://foo.com&apos;, &apos;foo&apos;)FOOTER_LINKS = ( (&apos;/xmlrpc/&apos;, &apos;XML-RPC service&apos;),)# added for nitrate3.4 compatibilityDEFAULT_GROUPS = [&apos;default&apos;]TESTOPIA_XML_VERSION = &apos;1.0&apos;# admin settingsADMINS = ( # (&apos;Your Name&apos;, &apos;your_email@domain.com&apos;),)# user guide URLUSER_GUIDE_URL = &quot;&quot;DEFAULT_PAGE_SIZE = 100 基本需要修改的，一是DEBUG开关，第二个是数据库配置，开启DEBUG开关是为了后面初始化数据时候获取staticfile，开始第二个坑：12AUTHENTICATION_BACKENDSMIDDLEWARE_CLASSES 注释别放开啊别放开，千万别手痒，惨痛的教训，就是手痒在不知道这俩什么含义就放开了，然后在搭建完成之后，登录都登录不了。。一直在报jquery.min.js 404，这个问题真的是折腾死，开始根本想不到是这边的问题，造成把common.py文件研究了个遍，环境重新又搭建两遍，一遍使用venv开启，一遍按原来的来，最终在万念俱灰，把注释又加上才解决，唉。。。 配置common.py首先，直接上我配完的，可参考:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509# -*- coding: utf-8 -*-import django.conf.global_settings as DEFAULT_SETTINGSimport os.pathNITRATE_VERSION = &apos;4.0.0&apos;DEBUG = False# Administrators error report email settingsADMINS = ( # (&apos;Your Name&apos;, &apos;your_email@example.com&apos;),)TCMS_ROOT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), &apos;..&apos;).replace(&apos;\\&apos;, &apos;/&apos;))MANAGERS = ADMINSDATABASES = &#123; # Master DB for writing &apos;default&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;nitrate&apos;, &apos;USER&apos;: &apos;nitrate&apos;, &apos;PASSWORD&apos;: &apos;pwd&apos;, &apos;HOST&apos;: &apos;192.168.98.133&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;, # First slave DB for reading &apos;slave_1&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;, &apos;NAME&apos;: &apos;nitrate&apos;, &apos;USER&apos;: &apos;nitrate&apos;, &apos;PASSWORD&apos;: &apos;pwd&apos;, &apos;HOST&apos;: &apos;192.168.98.133&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;, # Second slave DB for reporting, optional &apos;slave_report&apos;: &#123; &apos;ENGINE&apos;: &apos;django.db.backends.3306&apos;, &apos;NAME&apos;: &apos;nitrate&apos;, &apos;USER&apos;: &apos;nitrate&apos;, &apos;PASSWORD&apos;: &apos;pwd&apos;, &apos;HOST&apos;: &apos;192.168.98.133&apos;, &apos;PORT&apos;: &apos;3306&apos;, &#125;&#125;# Hosts/domain names that are valid for this site; required if DEBUG is False# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hostsALLOWED_HOSTS = [&apos;*&apos;]# Local time zone for this installation. Choices can be found here:# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name# although not all choices may be available on all operating systems.# In a Windows environment this must be set to your system time zone.TIME_ZONE = &apos;UTC&apos;# Language code for this installation. All choices can be found here:# http://www.i18nguy.com/unicode/language-identifiers.htmlLANGUAGE_CODE = &apos;en-us&apos;SITE_ID = 1# If you set this to False, Django will make some optimizations so as not# to load the internationalization machinery.USE_I18N = True# If you set this to False, Django will not format dates, numbers and# calendars according to the current locale.USE_L10N = True# If you set this to False, Django will not use timezone-aware datetimes.USE_TZ = False# Absolute filesystem path to the directory that will hold user-uploaded files.# Example: &quot;/var/www/example.com/media/&quot;MEDIA_ROOT = &apos;&apos;# URL that handles the media served from MEDIA_ROOT. Make sure to use a# trailing slash.# Examples: &quot;http://example.com/media/&quot;, &quot;http://media.example.com/&quot;MEDIA_URL = &apos;&apos;# URL prefix for admin absolute URLADMIN_PREFIX = &apos;/admin&apos;LOGIN_URL = &apos;nitrate-login&apos;LOGIN_REDIRECT_URL = &apos;user-profile-redirect&apos;LOGOUT_REDIRECT_URL = &apos;nitrate-login&apos;# Absolute path to the directory static files should be collected to.# Don&apos;t put anything in this directory yourself; store your static files# in apps&apos; &quot;static/&quot; subdirectories and in STATICFILES_DIRS.# Example: &quot;/var/www/example.com/static/&quot;#BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), &apos;..&apos;).replace(&apos;\\&apos;, &apos;/&apos;))#STATIC_ROOT = &apos;/usr/lib/python2.7/site-packages/Nitrate-4.1-py2.7.egg/tcms/static/&apos;STATIC_ROOT = &apos;/home/nitrate/projects/site/assets&apos;#STATIC_ROOT = os.path.join(TCMS_ROOT_PATH, &apos;static&apos;)# URL prefix for static files.# Example: &quot;http://example.com/static/&quot;, &quot;http://static.example.com/&quot;STATIC_URL = &apos;/static/&apos;# Additional locations of static filesSTATICFILES_DIRS = ( # Put strings here, like &quot;/home/html/static&quot; or &quot;C:/www/django/static&quot;. # Always use forward slashes, even on Windows. # Don&apos;t forget to use absolute paths, not relative paths. os.path.join(TCMS_ROOT_PATH,&apos;static&apos;), #&apos;/usr/lib/python2.7/site-packages/Nitrate-4.1-py2.7.egg/tcms/static/&apos;,# &apos;/home/nitrate/projects/site/assets&apos;,)# List of finder classes that know how to find static files in# various locations.STATICFILES_FINDERS = ( &apos;django.contrib.staticfiles.finders.FileSystemFinder&apos;, &apos;django.contrib.staticfiles.finders.AppDirectoriesFinder&apos;,)# Make this unique, and don&apos;t share it with anybody.SECRET_KEY = &apos;^8y!)$0t7yq2+65%&amp;_#@i^_o)eb3^q--y_$e7a_=t$%$1i)zuv&apos;TEMPLATES = [ &#123; &apos;BACKEND&apos;: &apos;django.template.backends.django.DjangoTemplates&apos;, &apos;DIRS&apos;: [ os.path.join(TCMS_ROOT_PATH, &apos;templates/&apos;).replace(&apos;\\&apos;, &apos;/&apos;), ], &apos;APP_DIRS&apos;: True, &apos;OPTIONS&apos;: &#123; &apos;debug&apos;: True, &apos;context_processors&apos;: [ &apos;django.contrib.auth.context_processors.auth&apos;, &apos;django.template.context_processors.debug&apos;, &apos;django.template.context_processors.i18n&apos;, &apos;django.template.context_processors.media&apos;, &apos;django.template.context_processors.static&apos;, &apos;django.template.context_processors.tz&apos;, &apos;django.contrib.messages.context_processors.messages&apos;, # Added for Nitrate &apos;django.template.context_processors.request&apos;, &apos;tcms.core.context_processors.admin_prefix_processor&apos;, &apos;tcms.core.context_processors.auth_backend_processor&apos;, &apos;tcms.core.context_processors.request_contents_processor&apos;, &apos;tcms.core.context_processors.settings_processor&apos;, ], &#125;, &#125;,]MIDDLEWARE_CLASSES = ( &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;, &apos;django.middleware.locale.LocaleMiddleware&apos;, &apos;django.middleware.common.CommonMiddleware&apos;, &apos;tcms.core.middleware.CsrfDisableMiddleware&apos;, &apos;django.middleware.csrf.CsrfViewMiddleware&apos;, &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;, &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,)ROOT_URLCONF = &apos;tcms.urls&apos;# Python dotted path to the WSGI application used by Django&apos;s runserver.WSGI_APPLICATION = &apos;tcms.wsgi.application&apos;INSTALLED_APPS = ( &apos;django.contrib.admin&apos;, &apos;django.contrib.admindocs&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.sites&apos;, &apos;django.contrib.staticfiles&apos;, &apos;django_comments&apos;, &apos;kobo.django.xmlrpc&apos;, &apos;tinymce&apos;, &apos;tcms.core.contrib.auth.apps.AppConfig&apos;, &apos;tcms.core.contrib.comments.apps.AppConfig&apos;, &apos;tcms.core.contrib.linkreference&apos;, &apos;tcms.core.logs&apos;, &apos;tcms.integration.bugzilla&apos;, &apos;tcms.integration.errata&apos;, &apos;tcms.management&apos;, &apos;tcms.profiles&apos;, &apos;tcms.testcases&apos;, &apos;tcms.testplans&apos;, &apos;tcms.testruns&apos;, &apos;tcms.xmlrpc.apps.AppConfig&apos;, # core app must be here in order to use permissions created during creating # modules for above apps. &apos;tcms.core.apps.AppConfig&apos;,)SESSION_SERIALIZER = &apos;django.contrib.sessions.serializers.JSONSerializer&apos;## Default apps settings## Define the custom comment app# http://docs.djangoproject.com/en/dev/ref/contrib/comments/custom/COMMENTS_APP = &apos;tcms.core.contrib.comments&apos; # &apos;nitrate_comments&apos;## XML-RPC interface settings## XML-RPC methodsXMLRPC_METHODS = &#123; &apos;TCMS_XML_RPC&apos;: ( (&apos;tcms.xmlrpc.api.auth&apos;, &apos;Auth&apos;), (&apos;tcms.xmlrpc.api.build&apos;, &apos;Build&apos;), (&apos;tcms.xmlrpc.api.env&apos;, &apos;Env&apos;), (&apos;tcms.xmlrpc.api.product&apos;, &apos;Product&apos;), (&apos;tcms.xmlrpc.api.testcase&apos;, &apos;TestCase&apos;), (&apos;tcms.xmlrpc.api.testcaserun&apos;, &apos;TestCaseRun&apos;), (&apos;tcms.xmlrpc.api.testcaseplan&apos;, &apos;TestCasePlan&apos;), (&apos;tcms.xmlrpc.api.testopia&apos;, &apos;Testopia&apos;), (&apos;tcms.xmlrpc.api.testplan&apos;, &apos;TestPlan&apos;), (&apos;tcms.xmlrpc.api.testrun&apos;, &apos;TestRun&apos;), (&apos;tcms.xmlrpc.api.user&apos;, &apos;User&apos;), (&apos;tcms.xmlrpc.api.version&apos;, &apos;Version&apos;), (&apos;tcms.xmlrpc.api.tag&apos;, &apos;Tag&apos;), ),&#125;XMLRPC_TEMPLATE = &apos;xmlrpc.html&apos;# Cache backendCACHES = &#123; &apos;default&apos;: &#123; &apos;BACKEND&apos;: &apos;django.core.cache.backends.locmem.LocMemCache&apos;, &#125;&#125;SESSION_ENGINE = &apos;django.contrib.sessions.backends.cached_db&apos;# Needed by django.core.context_processors.debug:# See http://docs.djangoproject.com/en/dev/ref/templates/api/#django-core-context-processors-debugINTERNAL_IPS = (&apos;127.0.0.1&apos;, )# Authentication backends# For the login/register/logout reaon, we only support the internal auth backends.AUTHENTICATION_BACKENDS = ( &apos;tcms.core.contrib.auth.backends.DBModelBackend&apos;,)## Mail settings## Set the default send mail address# See http://docs.djangoproject.com/en/dev/ref/settings/#email-backendEMAIL_HOST = &apos;&apos;EMAIL_PORT = 25EMAIL_FROM = &apos;noreply@foo.com&apos;EMAIL_SUBJECT_PREFIX = &apos;[TCMS] &apos;EMAILS_FOR_DEBUG = []ENABLE_ASYNC_EMAIL = TrueCELERY_BROKER_URL = &apos;redis://&apos;# Celery worker settingsCELERY_TASK_RESULT_EXPIRES = 60 * 2CELERY_RESULT_BACKEND = &apos;db+sqlite:///celery-results.db&apos;CELERYD_TIMER_PRECISION = 120CELERY_IGNORE_RESULT = TrueCELERY_MAX_CACHED_RESULTS = -1CELERY_DEFAULT_RATE_LIMIT = &apos;250/m&apos;# TCMS email behavior settingsPLAN_EMAIL_TEMPLATE = &apos;mail/change_plan.txt&apos;PLAN_DELELE_EMAIL_TEMPLATE = &apos;mail/delete_plan.txt&apos;CASE_EMAIL_TEMPLATE = &apos;mail/edit_case.txt&apos;CASE_DELETE_EMAIL_TEMPLATE = &apos;mail/delete_case.txt&apos;# TCMS Bug System settings# Set default bug system to bugzillaDEFAULT_BUG_SYSTEM_ID = 1# Maximum upload file size, default set to 5MB.# 2.5MB - 2621440# 5MB - 5242880# 10MB - 10485760# 20MB - 20971520# 50MB - 5242880# 100MB 104857600# 250MB - 214958080# 500MB - 429916160MAX_UPLOAD_SIZE = 5242880# PaginationPLAN_RUNS_PAGE_SIZE = 20# Site-specific messages# The site can supply optional &quot;message of the day&quot; style banners, similar to# /etc/motd. They are fragments of HTML.# This if set, is shown on the login/registration screens.# MOTD_LOGIN = &apos;&apos;# The URLS will be list in footer# Example:#FOOTER_LINKS = (# (&apos;mailto:nitrate-dev-list@example.com&apos;, &apos;Contact Us&apos;),# (&apos;mailto:nitrate-admin@example.com&apos;, &apos;Request Permission&apos;),# (&apos;http://foo.com&apos;, &apos;foo&apos;)#)FOOTER_LINKS = ()# Attachement file download path# it could be spcified to a different out of MEDIA_URL# FILE_UPLOAD_DIR = path.join(MEDIA_DIR, &apos;uploads&apos;).replace(&apos;\\&apos;,&apos;/&apos;),FILE_UPLOAD_DIR = &apos;/var/nitrate/uploads&apos;# Enable the administrator delete permission# In another word it&apos;s set the admin to super user or not.SET_ADMIN_AS_SUPERUSER = False## Authentication backend settings## Bugzilla author xmlrpc url# Required by bugzilla authentication backendBUGZILLA3_RPC_SERVER = &apos;&apos;BUGZILLA_URL = &apos;&apos;# JIRA URLJIRA_URL = &apos;&apos;# Turn on/off bugzilla external trackerBUGZILLA_EXTERNAL_TRACKER = False# Turn on/off listening signals sent by models.LISTENING_MODEL_SIGNAL = True# Kerberos settings# Required by kerberos authentication backendKRB5_REALM = &apos;&apos;# Integration with Errata system, used to linkify the Errata ID# A valid Errata URL:# https://errata.devel.example.com/errata/stateview/&#123;Errata ID&#125;ERRATA_URL_PREFIX = &apos;&apos;# user guide url:USER_GUIDE_URL = &apos;&apos;# Default page size for showing each possible query result. This provides a# consistent user experiece to users.DEFAULT_PAGE_SIZE = 20# Disable TCMS to produce test run progress info to consumers by qpid for# reducing unnecessary I/O access and errata does not subscribe tcms msg now.# If you want to continue sending msg to qpid, please overwrite it in product# .py and make sure qpid config is correct.ENABLE_QPID = False# TCMS use Piwik to track request.ENABLE_PIWIK_TRACKING = False# Piwik site id, generate by eng-opsPIWIK_SITE_ID = &apos;&apos;# Piwik api url without schema.PIWIK_SITE_API_URL = &apos;&apos;# Piwik js lib url without schemaPIWIK_SITE_JS_URL = &apos;&apos;# A sample logging configuration. The only tangible logging# performed by this configuration is to send an email to# the site admins on every HTTP 500 error when DEBUG=False.# See http://docs.djangoproject.com/en/dev/topics/logging for# more details on how to customize your logging configuration.LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;formatters&apos;: &#123; &apos;verbose&apos;: &#123; &apos;format&apos;: &apos;%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s&apos; &#125;, &apos;simple&apos;: &#123; &apos;format&apos;: &apos;[%(asctime)s] %(levelname)s %(message)s&apos; &#125;, &apos;xmlrpc_log&apos;: &#123; &apos;format&apos;: &apos;[%(asctime)s] %(levelname)s XMLRPC %(process)d &quot;%(message)s&quot;&apos; &#125;, &#125;, &apos;filters&apos;: &#123; &apos;require_debug_false&apos;: &#123; &apos;()&apos;: &apos;django.utils.log.RequireDebugFalse&apos; &#125; &#125;, &apos;handlers&apos;: &#123; &apos;console&apos;: &#123; &apos;level&apos;: &apos;DEBUG&apos;, &apos;class&apos;: &apos;logging.StreamHandler&apos;, &apos;formatter&apos;: &apos;simple&apos; &#125;, &apos;xmlrpc&apos;: &#123; &apos;level&apos;: &apos;DEBUG&apos;, &apos;class&apos;: &apos;logging.StreamHandler&apos;, &apos;formatter&apos;: &apos;xmlrpc_log&apos;, &#125;, &apos;mail_admins&apos;: &#123; &apos;level&apos;: &apos;ERROR&apos;, &apos;filters&apos;: [&apos;require_debug_false&apos;], &apos;class&apos;: &apos;django.utils.log.AdminEmailHandler&apos; &#125;, &#125;, &apos;loggers&apos;: &#123; &apos;django.request&apos;: &#123; &apos;handlers&apos;: [&apos;mail_admins&apos;], &apos;level&apos;: &apos;ERROR&apos;, &apos;propagate&apos;: True, &#125;, &apos;nitrate.xmlrpc&apos;: &#123; &apos;handlers&apos;: [&apos;xmlrpc&apos;], &apos;level&apos;: &apos;DEBUG&apos;, &apos;propagate&apos;: True, &#125;, &#125;&#125;TINYMCE_DEFAULT_CONFIG = &#123; &apos;mode&apos;: &quot;exact&quot;, &apos;theme&apos;: &quot;advanced&quot;, &apos;language&apos;: &quot;en&quot;, &apos;skin&apos;: &quot;o2k7&quot;, &apos;browsers&apos;: &quot;gecko&quot;, &apos;dialog_type&apos;: &quot;modal&quot;, &apos;object_resizing&apos;: &apos;true&apos;, &apos;cleanup_on_startup&apos;: &apos;true&apos;, &apos;forced_root_block&apos;: &quot;p&quot;, &apos;remove_trailing_nbsp&apos;: &apos;true&apos;, &apos;theme_advanced_toolbar_location&apos;: &quot;top&quot;, &apos;theme_advanced_toolbar_align&apos;: &quot;left&quot;, &apos;theme_advanced_statusbar_location&apos;: &quot;none&quot;, &apos;theme_advanced_buttons1&apos;: &quot;formatselect,&quot; &quot;bold,italic,&quot; &quot;underline,&quot; &quot;bullist,&quot; &quot;numlist,&quot; &quot;link,&quot; &quot;unlink,&quot; &quot;image,&quot; &quot;search,&quot; &quot;|,&quot; &quot;outdent,&quot; &quot;indent,&quot; &quot;hr,&quot; &quot;fullscreen,&quot; &quot;|,&quot; &quot;help&quot;, &apos;theme_advanced_buttons2&apos;: &quot;tablecontrols&quot;, &apos;theme_advanced_buttons3&apos;: &quot;&quot;, &apos;theme_advanced_path&apos;: &apos;false&apos;, &apos;theme_advanced_blockformats&apos;: &quot;p,h2,h3,h4,div,code,pre&quot;, &apos;theme_advanced_styles&apos;: &quot;[all] clearfix=clearfix;&quot; &quot;[p] summary=summary;&quot; &quot;[div] code=code;&quot; &quot;[img] img_left=img_left;&quot; &quot;[img] img_left_nospacetop=img_left_nospacetop;&quot; &quot;[img] img_right=img_right;&quot; &quot;[img] img_right_nospacetop=img_right_nospacetop;&quot; &quot;[img] img_block=img_block;&quot; &quot;[img] img_block_nospacetop=img_block_nospacetop;&quot; &quot;[div] column span-2=column span-2;&quot; &quot;[div] column span-4=column span-4;&quot; &quot;[div] column span-8=column span-8&quot;, &apos;height&apos;: &apos;300&apos;, &apos;width&apos;: &apos;100%&apos;, &apos;urlconverter_callback&apos;: &apos;myCustomURLConverter&apos;, &apos;plugins&apos;: &quot;table,safari,&quot; &quot;advimage,&quot; &quot;advlink,&quot; &quot;fullscreen,&quot; &quot;visualchars,&quot; &quot;paste,&quot; &quot;media,&quot; &quot;template,&quot; &quot;searchreplace,&quot; &quot;emotions,&quot;, &apos;table_styles&apos;: &quot;Header 1=header1;&quot; &quot;Header 2=header2;&quot; &quot;Header 3=header3&quot;, &apos;table_cell_styles&apos;: &quot;Header 1=header1;&quot; &quot;Header 2=header2;&quot; &quot;Header 3=header3;&quot; &quot;Table Cell=tableCel1&quot;, &apos;table_row_styles&apos;: &quot;Header 1=header1;&quot; &quot;Header 2=header2;&quot; &quot;Header 3=header3;&quot; &quot;Table Row=tableRow1&quot;,&#125;LOCALE_PATHS = ( os.path.join(TCMS_ROOT_PATH, &apos;locale&apos;),)TESTOPIA_XML_VERSION = &apos;1.1&apos; 需要注意的： 检查INSTALLED_APPS中，是否有django.contrib.staticfiles，很重要！ DEBUG开关 数据库配置 STATIC_ROOT,STATIC_URL,STATICFILES_DIRS，这三个，真的真的很重要！并且很容易就出问题，看我注释了那么多行就知道我是试了多少种组合了 前三条没什么可说的，关键就是第四条，先贴出个第三个坑:1django.core.exceptions.ImproperlyConfigured: The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting 这个是在进行数据初始化时候报的错，问题很好看，字面意思就是，然后我就开始各种尝试配置STATIC_ROOT和STATICFILES_DIRS，首先先解释一下这个配置的作用，首先，配置的是路径，文件夹的路径，作用就是存放静态文件，各种js,css等，在你页面加载的静态文件，都在这个文件夹里。在Django项目进行部署时：1python manage.py collectstatic 命令就会把所有需要的静态文件都复制到你配置的STATIC_ROOT文件夹中。所以STATIC_ROOT配置的是你app级的静态文件保存地址。那么STATICFILES_DIRS呢，这个文件夹，可以看成是所有app公共的静态文件的保存地址，当需要加载静态文件时，django会首先在公共的文件中查找，然后去app级的文件夹查找。至于STATIC_URL这个配置其实就是为了映射STATIC_ROOT，值基本配STATIC_URL = &#39;/static/&#39;即可。 开启服务首先是初始化数据：1django-admin.py migrate --settings=tcms.settings.product 将Nitrate一些必须的数据，表初始化；然后是加载静态文件：1django-admin.py collectstatic --settings=tcms.settings.product 根据你指定的配置，将静态文件拷贝到指定文件夹；然后是创建超级管理员：1django-admin.py createsuperuser --settings=tcms.settings.product 最后，起服务：1django-admin.py runserver --settings=tcms.settings.product 到浏览器上http://127.0.0.1:8000开始折腾吧~~~ 几个问题debug-toolbar当打开DEBUG，在进行初始化时，可能会报错：1no module named debug-toolbar 很明显，缺包，装包，不过包名不叫debug-toolbar,1yum install django-debug-toolbar 即可。 django.core.exceptions.ImproperlyConfigured: The STATICFILES_DIRS setting should not contain the STATIC_ROOT setting也是字面意思，STATIC_ROOT配置不能包含在STATICFILES_DIRS中，为什么会遇到这个问题，这玩意是我在第一次起服务没报错，但是页面静态文件一个都获取不到，整个页面朴素的不像话时候，尝试解决引发的另一个问题。先说说页面元素不加载，当初我配置是看网上有介绍STATICFILES_DIRS可以注释，不需要配，然后我就把STATIC_ROOT配成公共文件地址，结果在页面打开Nitrate时候，所有静态文件都是类似于：1&quot;GET /static/media/css/bootstrap/bootstrap.css HTTP/1.1&quot; 404 5904 这样的问题，整个页面就朴素的不行。。。然后又尝试把STATIC_ROOT注释，这次报的是代码中指明了app配置，STATIC_ROOT该项不能少这样的报错；然后两个都保留，这次就出现了上面那个错；再一次，在没看setting.py文件前，把STATIC_ROOT设置成了公共的，STATICFILES_DIRS设置成了app的，一如既往，静态文件全部加载不出来。。最后才修改成上述配置文件样（试过的组合不止这些，反正是折腾死，还怀疑过是copy静态文件时，少拷了个文件，都想改源码了，唉。。。）所以这个问题解决很简单，把STATIC_ROOT设置成了app的，STATICFILES_DIRS设置成了公共的。 DATABASES is improperly configured. Please supply the ENGINE value这个报错遇到过好几个，基本是俩原因： 改配置文件，输错了 nitrate用户没有权限检查的改了即可。 后记周五下午在公司没有搭建成功，搭的都心累了，成果就是一及其朴素的页面；周天早上6点钟开始折腾，一直弄到下午，才完完整整的搭完，唉，真的是个充实的周末…目前环境是搭建在虚拟机中，访问也是只能虚拟机中的Firefox输入http://127.0.0.1:8000才能访问，后面需要结合appach和wsgi，至少是完成公司局域网内访问，这个应该挺简单，再弄。。。 参考文档 Collecting staticfiles throws ImproperlyConfigured Managing static filesDjango 使用 Bootstrap，在 DEBUG = True 模式下，部分 js、css 提示 404 错误settings.py中的静态文件管理设置django中的setting最佳配置小结 ============================================================================================================================================================================================来更新接下来的部署了！ 使用apache&amp;mod_wsgi部署django项目 使用apache和mod_wsgi来部署Nitrate，使得不需要一直在虚拟机里面的浏览器才能打开Nitrate。 安装httpd&amp;mod_wsgi1yum install httpd mod_wsgi 创建上传文件夹创建长传文件夹，并且修改用户及属组：12mkdir -p /var/nitrate/uploadschown apache:apache /var/nitrate/uploads 配置mod_wsgi在/etc/httpd/conf.d文件夹下，创建文件wsgi.conf，修改内容：1LoadModule wsgi_module modules/mod_wsgi.so 配置Apache&amp;mod_wsgi在/etc/httpd/conf.d文件夹下创建nitrate的配置文件nitrate-httpd.conf，具体内容如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# Deployment using mod_wsgi## Useful documentation:# https://docs.djangoproject.com/en/1.5/howto/deployment/wsgi/# Force the use of ssl:#&lt;IfModule mod_rewrite.c&gt;# RewriteEngine on# RewriteCond %&#123;HTTPS&#125; off# RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125;#&lt;/IfModule&gt;# Make sure static files collected to this dir# Ref https://docs.djangoproject.com/en/1.5/ref/contrib/staticfiles/#django-admin-collectstatic#Alias /static /usr/share/nitrate/staticiAlias /static /home/nitrate/projects/site/assets#Alias /usr/lib/python2.7/site-packages/Nitrate-4.1-py2.7.egg/tcms/static# Limit threads forked:# prefork MPM StartServers 5MinSpareServers 5MaxSpareServers 10MaxClients 256MaxRequestsPerChild 0# Configurations for mod_wsgiWSGIScriptAlias / /usr/lib/python2.7/site-packages/tcms/wsgi.pyWSGIPythonPath /usr/lib/python2.7/site-packagesWSGIPassAuthorization On&lt;Location &quot;/&quot;&gt; # ==================== # Handler for mod_wsgi # ==================== SetHandler wsgi-script Options All AllowOverride All Require all granted LimitRequestBody 10485760 AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript application/x-javascript text/css ErrorDocument 401 &quot;Your request is unauthorization.&quot;&lt;/Location&gt;&lt;Location &quot;/static&quot;&gt; SetHandler None # Disable auth on the static content, so that we&apos;re aren&apos;t forced to # use Kerberos. Doing so would remove &quot;Expires&quot; headers from the static # content, which would lead to poor page-load times. AuthType none Satisfy Any Allow from All # Many file types are likely to benefit from compression # Enable gzip compression on them: AddOutputFilterByType DEFLATE text/html text/plain text/xml text/javascript application/x-javascript text/css # Set far-future Expires headers on static content # (trac 184): ExpiresActive On ExpiresDefault &quot;access plus 10 years&quot;&lt;/Location&gt; 需要注意的几个配置：123Alias /static /home/nitrate/projects/site/assetsWSGIScriptAlias / /usr/lib/python2.7/site-packages/tcms/wsgi.pyWSGIPythonPath /usr/lib/python2.7/site-packages 都修改成你自己的本地路径 httpd.conf说实话，我对这玩意是真的不熟悉，就基本没改，路径：/etc/httpd/conf/httpd.conf，只需要修改：12ServerName example.com:80Listen ip_address:80 我比较懒，直接一个改成localhost，另一个改为80，就完工了。然后就可以起服务了！！！1systemctl start httpd.service 在本地windows下的浏览器应该就可以直接访问虚拟机的ip来访问nitrate了 可能遇到的问题反正对我来说不是可能，全遇到了。。 httpd服务启动失败这个问题，原因很多，直接看日志比较正常，我是因为端口配错了才出现 页面报错，无法连接mysql，报权限问题首先，检查是否有权限，在确定有权限情况下，基本是系统的问题了。解释一下，虚拟机装的是centos，centos在默认情况下SELinux是打开的，这玩意，是不允许远程连接MySQL资源的。。。所以简单的解决：1setenforce 0 网上有个建议做法：1setsebool httpd_can_network_connect_db 1 允许Apache访问外部MySQL资源 浏览器访问虚拟机IP，静态文件不加载和之前碰到的配路径一样，所有静态文件加载都是403，加载不了，这次，确定不是路径配置的问题，那就是权限问题呗，给你/static目录下的文件赋权限，有可执行权限即可。1chmod -R 755 /static]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Nitrate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos下升级python2.7到3.6]]></title>
    <url>%2F2018%2F04%2F20%2FCentos%E4%B8%8B%E5%8D%87%E7%BA%A7python2-7%E5%88%B03-6%2F</url>
    <content type="text"><![CDATA[Centos下，修改python版本，保留原2.7.5版本同时，更改默认版本为3.6 保留原版本由于yum中会配置python版本，在进行python版本更新时，需要先将yum的配置文件都更改了。首先，切用户1su - root 1mv /usr/bin/python2.7 /usr/bin/python2.7.5 # 保留默认版本python为python2.7.5 1ln -s /usr/bin/python2.7.5 /usr/local/bin/python2.7.5 # 创建软连接 1ls -al /usr/bin/yum* # 查看/usr/bin/目录下所有yum文件，共7个 一个一个改：1#!/usr/bin/python —&gt; #!/usr/bin/python2.7.5 12vi /usr/libexec/urlgrabber-ext-down # 修改/usr/libexec/目录下 urlgrabber-ext-down#!/usr/bin/python —&gt; #!/usr/bin/python2.7.5 安装python3.6安装配置环境wget首先检查是否有安装wget，没有则需要安装：1yum install wget 准备编译环境12yum groupinstall &apos;Development Tools&apos;yum install zlib-devel bzip2-devel openssl-devel ncurses-devel 开始安装123456789101112131415161718192021222324wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tgztar zxvf Python-3.6.2.tgzcd Python-3.6.2./configuremake allmake installmake cleanmake distcleanrm -rf /usr/bin/pythonrm -rf /usr/bin/python3rm -rf /usr/bin/python3.6ln -s /usr/local/bin/python3.6 /usr/bin/pythonln -s /usr/local/bin/python3.6 /usr/bin/python3ln -s /usr/local/bin/python3.6 /usr/bin/python3.6/usr/bin/python -V/usr/bin/python3 -V/usr/bin/python3.6 -Vrm -rf /usr/local/bin/pythonrm -rf /usr/local/bin/python3ln -s /usr/local/bin/python3.6 /usr/local/bin/pythonln -s /usr/local/bin/python3.6 /usr/local/bin/python3python -Vpython3 -Vpython3.6 -V 123456[root@localhost Python-3.6.2]# python -VPython 3.6.2[root@localhost Python-3.6.2]# python3 -VPython 3.6.2[root@localhost Python-3.6.2]# python3.6 -VPython 3.6.2 安装成功~ 参考链接]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[切换163yum源]]></title>
    <url>%2F2018%2F04%2F19%2F%E5%88%87%E6%8D%A2163yum%E6%BA%90%2F</url>
    <content type="text"><![CDATA[来篇福利文 经常装环境的应该遇过下包基本没动静，基于这“伟大”的互联网环境，下包真的是很心累的一件事，好在国内有志之士还是弄了很多福利的，下面：Centos切换国内163yum源 前言前提条件，linux服务器支持wget，没有则装一个：1yum install -y wget 装好之后，开始切换yum源。 备份首先，搭环境的必要素质，修改配置文件之前，一定要先备份！（踩了n多坑的教训）1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载163源切换到/etc/yum.repos.d，wget下载163源配置文件1wget http://mirrors.163.com/.help/CentOS7-Base-163.repo 改名修改下载完成的文件的名称1mv /etc/yum.repos.d/CentOS7-Base-163.repo /etc/yum.repos.d/CentOS-Base.repo 生成缓存12yum clean allyum makecache 完工~~~]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL之SQL优化系列（三）]]></title>
    <url>%2F2018%2F04%2F18%2FMySQL%E4%B9%8BSQL%E4%BC%98%E5%8C%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[MySQL精准分析执行时间 当进行sql性能瓶颈分析时，第一反应肯定是查看sql执行时间，那么当使用慢查询日志，以及explain都无法知晓具体信息时，怎么分析。 Query ProfilerQuery Profiler是MYSQL自带的一种query诊断分析工具，通过它可以分析出一条SQL语句的性能瓶颈在什么地方。通过show variables like &quot;%pro%&quot;;可以查看该工具是否开启：1234567891011121314151617mysql&gt; show variables like &quot;%pro%&quot;;+------------------------------------------+-------+| Variable_name | Value |+------------------------------------------+-------+| check_proxy_users | OFF || have_profiling | YES || mysql_native_password_proxy_users | OFF || performance_schema_max_program_instances | -1 || profiling | OFF || profiling_history_size | 15 || protocol_version | 10 || proxy_user | || sha256_password_proxy_users | OFF || slave_compressed_protocol | OFF || stored_program_cache | 256 |+------------------------------------------+-------+11 rows in set, 1 warning (0.00 sec) 发现当前为关闭状态，手动开启：12mysql&gt; set profiling = 1;Query OK, 0 rows affected, 1 warning (0.00 sec) 使用首先执行几条sql，作为分析样本：1234567mysql&gt; select sleep(3);+----------+| sleep(3) |+----------+| 0 |+----------+1 row in set (3.00 sec) 1234567mysql&gt; select 1;+---+| 1 |+---+| 1 |+---+1 row in set (0.00 sec) 查看执行情况：123456789mysql&gt; show profiles;+----------+------------+-----------------------------+| Query_ID | Duration | Query |+----------+------------+-----------------------------+| 1 | 0.00325925 | show variables like &quot;%pro%&quot; || 2 | 2.99971075 | select sleep(3) || 3 | 0.00051050 | select 1 |+----------+------------+-----------------------------+3 rows in set, 1 warning (0.00 sec) 可以看出具体执行时间，若想查看具体那一条SQL的具体信息：123456789101112131415161718mysql&gt; show profile for query 2; +----------------------+----------+ | Status | Duration | +----------------------+----------+ | starting | 0.000103 | | checking permissions | 0.000008 | | Opening tables | 0.000006 | | init | 0.000016 | | optimizing | 0.000008 | | executing | 0.000018 | | User sleep | 2.999385 | | end | 0.000016 | | query end | 0.000009 | | closing tables | 0.000005 | | freeing items | 0.000115 | | cleaning up | 0.000023 | +----------------------+----------+ 12 rows in set, 1 warning (0.00 sec) 对系统分析查看执行sql中对系统的影响，例如，查看磁盘IO：123456789101112131415161718mysql&gt; show profile block io for query 2;+----------------------+----------+--------------+---------------+| Status | Duration | Block_ops_in | Block_ops_out |+----------------------+----------+--------------+---------------+| starting | 0.000103 | NULL | NULL || checking permissions | 0.000008 | NULL | NULL || Opening tables | 0.000006 | NULL | NULL || init | 0.000016 | NULL | NULL || optimizing | 0.000008 | NULL | NULL || executing | 0.000018 | NULL | NULL || User sleep | 2.999385 | NULL | NULL || end | 0.000016 | NULL | NULL || query end | 0.000009 | NULL | NULL || closing tables | 0.000005 | NULL | NULL || freeing items | 0.000115 | NULL | NULL || cleaning up | 0.000023 | NULL | NULL |+----------------------+----------+--------------+---------------+12 rows in set, 1 warning (0.00 sec) 可以完整的看出select sleep(3);该sql执行过程中对磁盘IO的影响。类似的还有：12345mysql&gt; show profile cpu for query 2;mysql&gt; show profile memory for query 2;mysql&gt; show profile swaps for query 2;mysql&gt; show profile context switches for query 2;mysql&gt; show profile all for query 2;]]></content>
      <categories>
        <category>MySQL-SQL优化</category>
      </categories>
      <tags>
        <tag>profiler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loadruner日常总结]]></title>
    <url>%2F2018%2F04%2F18%2Floadruner%E6%97%A5%E5%B8%B8%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[日常工作中遇到的loadrunner的相关问题的总结： 前言首先，使用的环境（版本）：123WIN7 企业版 Service Pack1loadrunner 12.50IE 11 环境说明本来用习惯了，到了新公司第一件事就是装了WIN10，loadrunner版本使用的也是loadrunner 12.50，然后，开始工作，录制脚本时候，开始了各种神坑问题，对了，先说一句，笔记本是Thinkpad T430（不是win 10系统的锅）。录制时候就开始了坑死人的经历，第一个是基本相当于不支持chrome，想用chrome录制，必须开代理或者fiddle，简直是愁；换成firefox，浏览器都打不开，用IE，各种的需要安全证书，或者就是压根浏览器直接未响应。好不容易开着代理，用chrome录制好了，回放，70%的概率电脑会蓝屏，无语至极。 艰难的环境搭建没办法，日常工作现在就是在性能测试上，只好放弃win10，转用win7了（再次再次提醒，T430千万别用win10来搭配loadrunner！！！）再次重装系统，这次用了什么鬼纯净版，也就是ghost版，是人为在官方原本基础上的优化版，唉，装是装好了，事又来了，众所周知，loadrunner和浏览器的兼容实在是个很深的坑尤其是64位的windows系统，更是能选用的很少。试了各种chrome，firefox，ie甚至什么遨游，世界之窗，基本是快奔溃的状态。实验半天，基本兼容性是:1IE &gt; firefox &gt; chrome IE最好，firefox网上基本是建议用25左右的版本，但是，没有64位的啊。。。chrome就别提了，老样子，要么是要开代理，要么是直接打开浏览器就未响应。所以，首选还是IE啊，但是，试了下，公司的测试网站，在IE8上压根就打不开（win7自带是IE8），版本太低了！必须要升级到IE11，升级是简单，找到windows update搜索下载，下载完更新即可，安装完成需要重启系统，然后坑来了：ghost版装的系统，直接帮你“优化了”权限，基本你是默认就是管理员，然后在安装windows更新时候，问题就来了，系统会在判断你权限时候，发现权限混乱，直接更新失败，返回还原点，windows——update failure，error code：80070005，唉，简直是半疯。在实验了其他n中手动更新IE的方法失败之后，只能放弃。直接上MSDN下载官方镜像，重新安装系统，这次终于是成功将IE8更新到IE11了。 常见问题CV证书在录制时候，经常会遇到不适用loadrunner录制，网页可以打开，使用loadrunner录制，网页打开显示“无法此页”；可能在浏览器显示该页面之前，已经弹出了一个类似该网站CV证书。。。的弹窗提示，意思很明显，该测试网站，在你的浏览器安全证书中没有它的证书，所以浏览器的安全策略就过滤了该浏览器的连接，页面就打不开了。 解决办法在录制时候：点击Recoding Oftions，在Network栏，点击Mapping and Filtering，Port mapping选择WinINet level data，点击确定，录制即可。 loadrunner未响应该问题，网上有很多解答，基本第一条就是1IE - Internet选项 - 高级 - 启用第三方软件扩展（取消勾选） 然后，我是直接用管理员登录的系统，再进行录制就可以了。附上网上有个很全的回答：loadrunner点击录制不响应 请求接口HTTP CODE 500在排除接口异常，使用其他如postman，soupui等工具直接请求可以成功返回数据情况下，查看使用loadrunner录制的脚本，是否在传参的时候将参数进行格式化，以JSON格式传参，我是遇到过很多次，直接使用loadrunner录制脚本，录制出来的脚本中缺少格式化:1&quot;EncType=application/json; charset=utf-8&quot;, 录制出来的脚本类似：12345678910web_custom_request(&quot;2018_1&quot;, &quot;URL=https://www.test.com/api/config/calendar/1/2018&quot;, &quot;Method=PUT&quot;, &quot;Resource=0&quot;, &quot;RecContentType=application/json&quot;, &quot;Referer=https://www.test.com/app&quot;, &quot;Snapshot=t16.inf&quot;, &quot;Mode=HTML&quot;, &quot;Body=&#123;\&quot;2018-11-01\&quot;:1&#125;&quot;, LAST); 这样请求，即使加上所有token，很可能还是会500，所以手工加上一句格式化json的即可。 后记loadrunner作为付费软件，限制其实还是挺多的，日常生活中遇到什么问题，还需要继续记录。P.S 做性能测试，真的是，能用Jmeter或者locust，真的，就转吧。。。破解个限制这么多的，实在是，唉。。。]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>loadrunner</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOs7强制修改MySQL中root密码]]></title>
    <url>%2F2018%2F04%2F04%2FCentOs7%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9MySQL%E4%B8%ADroot%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[centos7强制修改MySQL默认密码 前言最近需要搭建zabbix，需要在centos7上搭建MySQL服务器；这个很简单，直接命令：获取MySQL源：1sudo rpm -Uvh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm 安装：1sudo yum install mysql-* --skip-broken 问题安装过程，由于公司网简直惨不忍睹，中间一度断掉了，都不知道哪边安装出错了。。。好不容易看着安装成功之后，查找默认的root密码：1grep &apos;temporary password&apos; /var/log/mysqld.log 然后就悲剧了，这个日志文件，压根就是空的，root密码跑哪玩去了！！！然后试了试，貌似好像可以起服务。。见鬼12systemctl start mysqldsystemctl status mysqld 不过这样还是进不了控制台啊，没密码啊，没办法，只有强制修改root密码。 强制修改密码首先强制修改配置文件，/etc/my.cnf添加：12[mysqld]skip-grant-tables=1 添加skip-grant-tables=1这行，然后重启MySQL服务。1systemctl restart mysqld 修改密码进入MySQL控制台：1mysql 打印：12345678910111213Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.21 MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 修改密码123use mysql;update user set authentication_string = password(&quot;xxxx&quot;) where user=&quot;root&quot;;flush privileges; 然后将/etc/my.cnf下skip-grant-tables=1注释掉，重启MySQL服务。 后续使用修改完成的root密码登录MySQL控制台之后，可以进入控制台：123456789101112131415mysql -uroot -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.7.21Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 但是有问题：12mysql&gt; show databases;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement. 按照提示，我们在修改root密码时候，应该使用的是alter而不是update来更新密码，所以，重新修改密码:12alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;QWEqwe+342&apos;;flush privileges; 再次重启服务即可。]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yum安装软件失败]]></title>
    <url>%2F2018%2F04%2F04%2Fyum%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%A4%B1%E8%B4%A5%2F</url>
    <content type="text"><![CDATA[centos运行yum报错解决办法 问题使用yum安装软件时，报错：12345Another app is currently holding the yum lock; waiting for it to exit... The other application is: PackageKit Memory : 130 M RSS (1.0 GB VSZ) Started: Wed Apr 4 10:44:50 2018 - 04:01 ago State : Sleeping, pid: 11199 解决该问题可能是由于系统目前处于自动升级状态，所以锁定了yum，只要强制关闭yum进程即可重新运行yum1rm -rf /var/run/yum.pid 优质yum源Remi repository 是包含最新版本 PHP 和 MySQL 包的 Linux 源，由 Remi 提供维护。有个这个源之后，使用 YUM 安装或更新 PHP、MySQL、phpMyAdmin 等服务器相关程序的时候就非常方便了。 12345wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmwget http://rpms.remirepo.net/enterprise/remi-release-7.rpmrpm -Uvh remi-release-7.rpm epel-release-latest-7.noarch.rpm# for RHEL onlysubscription-manager repos --enable=rhel-7-server-optional-rpms 参考文章]]></content>
      <categories>
        <category>Devops</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL之SQL优化系列（二）]]></title>
    <url>%2F2018%2F04%2F03%2FMySQL%E4%B9%8BSQL%E4%BC%98%E5%8C%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[通过explain分析低效SQL的执行计划 序言使用的数据库依然是mysql示例库sakila接着上篇的MySQL之SQL优化系列（一）当通过慢查询日志定位到执行效率较低的SQL之后，使用explain进行低效SQL的分析。 使用EXPLAIN分析低效SQL的执行计划使用EXPLAIN可以获取MySQL是如何执行SELECT语句的，包括在SELECT语句执行过程中表如何连接以及连接的顺序，如下示例SQL执行：12345678910111213141516171819202122232425262728mysql&gt; explain select sum(amount) from customer a,payment b where 1=1 and a.customer_id = b.customer_id and email=&apos;JANE.BENNETT@sakilacustomer.org&apos;\G *************************** 1. row *************************** id: 1 select_type: SIMPLE table: a partitions: NULL type: ALLpossible_keys: PRIMARY key: NULL key_len: NULL ref: NULL rows: 599 filtered: 10.00 Extra: Using where*************************** 2. row *************************** id: 1 select_type: SIMPLE table: b partitions: NULL type: ref possible_keys: idx_fk_customer_id key: idx_fk_customer_id key_len: 2 ref: sakila.a.customer_id rows: 26 filtered: 100.00 Extra: NULL 2 rows in set, 1 warning (0.01 sec) 字段解释： select_type:表示select的类型，常见取值有SIMPLE(简单表，不使用表连接或子查询)、PRIMARY(主查询，外层的查询)、UNION(UNION中的第二个或者后面的查询语句)、SUBQUERY(子查询中的第一个SELECT) table:输出结果集的表 type:表示MySQL在表中找到所需行的方法，或者称为访问类型，常见的有：1ALL —— index —— range —— ref —— eq_ref —— const,system —— NULL 从做到右，性能由最差到最好。示例： type=ALL，全表扫描，MySQL遍历全表来找到匹配行：123456789101112131415mysql&gt; explain select * from film limit 1\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: film partitions: NULL type: ALL possible_keys: NULL key: NULL key_len: NULL ref: NULL rows: 1000 filtered: 100.00 Extra: NULL 1 row in set, 1 warning (0.00 sec) 2.type=index，索引全扫描，MySQL遍历整个索引来查询匹配的行：1mysql&gt; show index from film; 获取得到film表的索引：film_id(主键),title,language_id,original_language_id123456789101112131415mysql&gt; explain select title from film\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: film partitions: NULL type: index possible_keys: NULL key: idx_title key_len: 767 ref: NULL rows: 1000 filtered: 100.00 Extra: Using index 1 row in set, 1 warning (0.00 sec) 3.type=range,索引范围扫描，常见的有between,&gt;,&lt;等。4.type=ref，使用非唯一索引扫描或唯一索引的前缀扫描，返回匹配单独值得记录行，例如：123456789101112131415mysql&gt; explain select * from payment where customer_id=24\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: payment partitions: NULL type: ref possible_keys: idx_fk_customer_id key: idx_fk_customer_id key_len: 2 ref: const rows: 25 filtered: 100.00 Extra: NULL 1 row in set, 1 warning (0.00 sec) 索引idx_fk_customer_id是非唯一索引，查询条件为等值查询条件customer_id=24，所以扫描索引的类型为ref。ref还经常出现在join操作中。5.type=eq_ref，类似ref，区别在于使用的索引是唯一索引，对于每一个索引的键值，表中只有一条记录匹配。换句换说，就是在进行多表连接时，使用得失primary key或者unique index作为关联条件。12345678910111213141516171819202122232425262728mysql&gt; explain select * from film a,film_text b where a.film_id = b.film_id\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: b partitions: NULL type: ALL possible_keys: PRIMARY key: NULL key_len: NULL ref: NULL rows: 1000 filtered: 100.00 Extra: NULL *************************** 2. row *************************** id: 1 select_type: SIMPLE table: a partitions: NULL type: eq_ref possible_keys: PRIMARY key: PRIMARY key_len: 2 ref: sakila.b.film_id rows: 1 filtered: 100.00 Extra: Using where 2 rows in set, 1 warning (0.00 sec) 6.type=const/system，表单中有最多一个匹配行，查询起来非常迅速，所以这个匹配行中的其他列的值可以被优化器在当前查询中当做常量来处理，例如，根据主键primary key或者唯一索引unique index进行的查询。12345678910111213141516alter table customer add unique index uk_email(email);mysql&gt; explain select * from (select * from customer where email=&apos;LINDA.WILLIAMS@sakilacustomer.org&apos;) a\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: customer partitions: NULL type: const possible_keys: uk_email key: uk_email key_len: 153 ref: const rows: 1 filtered: 100.00 Extra: NULL 1 row in set, 1 warning (0.00 sec) 通过唯一索引uk_email访问的时候，类型type为const。 possible_keys：表示查询时可能使用的索引 key：表示实际使用的索引 key_len：使用到索引字段的长度、 rows：扫描行的数量 Extra：执行情况的说明和描述，包含不适合在其他列中显示但是对执行计划非常重要的额外信息。]]></content>
      <categories>
        <category>MySQL-SQL优化</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>explain</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python性能测试框架locust（一）]]></title>
    <url>%2F2018%2F03%2F30%2Fpython%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6locust%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[基于python的性能测试框架LOCUST系列一 简介首先，这个框架是做性能测试的，然后，基于python编写！！！所以，不可能不研究研究啊。LOCUST英文意思是“蝗虫”，感受感受使用locust进行性能测试，并发请求就像铺天盖地的蝗虫一样攻击你的系统，嗯，想想都可怕。 在Locust测试框架中，测试场景是由纯python脚本编写，对于http以及https协议，可以使用python的requests库作为客户端。对于其他协议，locust也提供有接口。也就是说，只要我们使用python编写对应的请求，就能方便的用locust进行压力测试。 安装安装locust很简单，日常操作：1pip install locustio demo示例官方demo：12345678910111213141516171819202122232425262728293031#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle shi@time: 2018/3/30/030 16:59&quot;&quot;&quot;from locust import HttpLocust, TaskSet, taskclass UserBehavior(TaskSet): def on_start(self): &quot;&quot;&quot; on_start is called when a Locust start before any task is scheduled &quot;&quot;&quot; self.login() def login(self): self.client.post(&quot;/login&quot;, &#123;&quot;username&quot;: &quot;ellen_key&quot;, &quot;password&quot;: &quot;education&quot;&#125;) @task(2) def index(self): self.client.get(&quot;/&quot;) @task(1) def profile(self): self.client.get(&quot;/profile&quot;)class WebsiteUser(HttpLocust): task_set = UserBehavior host = &apos;http://example.com&apos; min_wait = 5000 max_wait = 9000 cmd进入该文件所在路径下，执行locust命令，即可开启locust web服务，默认端口808912345678E:\py_workspace\LocustTest\codings\TestScripts &#123;git&#125;&#123;lamb&#125; ls__init__.py __pycache__ locustfile.pyE:\py_workspace\LocustTest\codings\TestScripts &#123;git&#125;&#123;lamb&#125; locust[2018-03-30 17:22:44,919] 3HET0MVY93LITXF/INFO/locust.main: Starting web monitor at *:8089[2018-03-30 17:22:44,920] 3HET0MVY93LITXF/INFO/locust.main: Starting Locust 0.8.1 打开浏览器，输入url:http://localhost:8089即可访问locust web。 tips：使用locust打开服务前提是脚本名称是locustfile.py；否则需要执行指定脚本的命令：locust -f mylocustFile.py -P 7070指定文件和端口 demo简单分析官方的demo对于http://example.com进行压测，随机访问首页（/）以及页面（/profile）比例为2:1，每次请求间隔为5~9s。 后记locust现在还是刚刚开始接触，看着官方介绍的，功能相当齐全，尤其是我还是一个只有python编码能力的菜鸡。。。太对胃口了。。。好好研究！ 官网]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Locust</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[loadrunner监控Mysql]]></title>
    <url>%2F2018%2F03%2F30%2Floadrunner%E7%9B%91%E6%8E%A7Mysql%2F</url>
    <content type="text"><![CDATA[使用loadrunner监控mysql 前言最近工作需要研究怎么深度性能测试，使用的工具基本是loadrunner，jmeter或者基于python的框架locust。近期一段时间应该和lr打交道会比较多，lr最为一个收费的专业性能测试软件，功能是毋庸置疑的相当强大，但是，貌似我没有找到监控mysql的模块。。sql server倒是有，也可能是我远离lr太长时间了。 mysql性能监控在日常性能测试过程中，除了需要对系统TPS，RT这样的参数进行监控以及各服务器的CPU，MEMORY，IO之外，还要实时对数据库进行监控，因为接触的多的是mysql，就以MySQL为例。 当mysql出现运行缓慢，或者出于某种原因无法响应查询，可以监控以下几个指标来获取解决： 查询吞吐量 查询执行性能 连接情况 数据库缓冲池 吞吐量由于本篇重点是介绍监控MySQL，对于mysql的性能指标就只解释一种，以吞吐量为例：MySQL中有一个Questions的内部计数器，客户端每发送一个查询，改值加一。1234567mysql&gt; show global status like &quot;Questions&quot;;+---------------+-------+| Variable_name | Value |+---------------+-------+| Questions | 665 |+---------------+-------+1 row in set (0.00 sec) 所以对Questions该指标进行监控，当该指标发生突变，如骤降或者骤增，很可能数据库出现了问题。 HP SiteScopeWIKIPEDIA给的解释：1HP SiteScope is agentless monitoring software focused on monitoring the availability and performance of distributed IT infrastructures, including Servers, Network devices and services, Applications and application components, operating systems and various IT enterprise components. 大致意思是：HP SiteScope是无代理监控软件，专注于监控分布式IT基础架构的可用性和性能，包括服务器，网络设备和服务，应用程序和应用程序组件，操作系统和各种IT企业组件。所以，HP SiteScope很适合用来监控MySQL。 安装网上找一圈硬是没找到安装包，很怀疑对于mysql的监控有更简单的方法，或者就是压根没人做开源的。。直接梯子到官网下了个11.3的版本： 度娘盘连接 密码：7l99mysql驱动密码：y9i8 安装很简单，压缩包打开，找到HPSiteScope_11.30_setup.exe一路next即可，mysql驱动放在D:\HP\SiteScope\java\lib\ext下。 LR监控MySQL操作安装完成HP SiteScope后，在浏览器输入url：http://127.0.0.1:8080/SiteScope即可打开主页 可能遇到的问题输入url之后，可能会遇见页面是空白的情况（我就遇到过），首先，别用chrome和firefox，这玩意貌似只能在IE上面打开；其次，你本地需要JDK环境（java -version）要求JDK1.6以上。最后，IE的internet选项中，把局域网设置里的代理勾掉。以上就是我解决的页面空白的三个办法（我全中过，折腾老半天） 进入HP SiteScope首页，在SiteScope上右键，新建组，输入组名之后，右键创建的组，新建监控器，选择数据库计数器，只需要配置几项：12345678910数据库连接URL: jdbc:mysql://localhost/sakila查询： show status数据库驱动程序： org.gjt.mm.mysql.Driver凭据：输入数据库用户名及密码计数器：选择计数器：Com_insert_select/Value Com_select/Value counters in error Questions/Value Select_scan/Value 点击验证保存，完成保存。 lr配置监控打开LR Contraller，配置完场景，在run页面，可用图，选择SiteScope图，右键SiteScope，点击打开，右击打开的SiteScope图，点击添加度量，弹出的窗口有两个添加，上面一个是添加服务器，我添加的是localhost端口8888，下一个添加是选择添加的组件，选择需要的添加组件，点击确定，即可完成配置。（没办法，图床都太坑了，所以全程无图。。。请原谅。。。） 后记官网下载的HP SiteScope是未破解版，有时间还是需要折腾个破解版的研究研究。工具是会用了，原理根本没去看，这是病，不懂原理就直接使用，总感觉不踏实。 参考地址]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>loadrunner</tag>
        <tag>SiteScope</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL之SQL优化系列（一）]]></title>
    <url>%2F2018%2F03%2F09%2FMySQL%E4%B9%8BSQL%E4%BC%98%E5%8C%96%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[作为一个不知道几分之几的程序员，日常性能测试的关注点之一就是SQL的执行效率，SQL优化。 案例库mysql提供有类似oracle的scott库（root/tiger，至今记得接触oracle时候这个趣闻，创始人是库名，猫的名字是密码）的案例库sakila，基本可以使用来完成SQL优化的测试。 sakila库下载地址 压缩包中有三个文件：sakila-schema.sql，sakila-data.sql，sakila.mwb；sakila-schema.sql建库及表，sakila-data.sql插数据，sakila.mwb可以使用mysql workbench打开，是sakila的数据模型（MySQL Mode） MySQL workbench官方下载地址度娘盘地址&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;密码：25y4 安装完成：12345678910111213141516171819202122232425262728293031mysql&gt; use sakila;Database changedmysql&gt; show tables;+----------------------------+| Tables_in_sakila |+----------------------------+| actor || actor_info || address || category || city || country || customer || customer_list || film || film_actor || film_category || film_list || film_text || inventory || language || nicer_but_slower_film_list || payment || rental || sales_by_film_category || sales_by_store || staff || staff_list || store |+----------------------------+23 rows in set (0.00 sec) show status查看SQL执行频率MySQL可以通过show [session|global] status命令来查看服务器状态信息；其中session，global为可选参数，session表示显示当前连接的统计结果，global表示统计自数据库上次启动至今的信息，不写默认为session。示例：12345678910111213141516171819202122232425262728mysql&gt; show status like &apos;Com_%&apos;; +-----------------------------+-------+ | Variable_name | Value | +-----------------------------+-------+ | Com_admin_commands | 0 | | Com_assign_to_keycache | 0 | | Com_alter_db | 0 | | Com_alter_db_upgrade | 0 | | Com_alter_event | 0 | | Com_alter_function | 0 | | Com_alter_instance | 0 | | Com_alter_procedure | 0 | | Com_alter_server | 0 | | Com_alter_table | 2 | | Com_alter_tablespace | 0 | | Com_alter_user | 0 | | Com_analyze | 0 | | Com_begin | 0 | | Com_binlog | 0 | | Com_call_procedure | 0 | | Com_change_db | 3 | | Com_change_master | 0 | | Com_change_repl_filter | 0 | | Com_check | 0 | | Com_checksum | 0 | | Com_commit | 15 | | Com_create_db | 1 | ... 统计当前连接下的信息。 参数解释Com_xxx表示每个xxx语句执行的次数，通常比较关注的是以下几个：◆&ensp;Com_select：&ensp;执行SELECT操作的次数，执行一次累加1；◆&ensp;Com_insert：&ensp;执行INSERT操作的次数，对于批量插入的INSERT操作，只累加一次；◆&ensp;Com_update：&ensp;执行UPDATE操作的次数。◆&ensp;Com_delete：&ensp;执行DELETE操作的次数。上述参数对于所有的存储引擎的表操作都会进行累计，下面的参数，只针对InnoDB存储引擎：◆&ensp;Innodb_read：SELECT查询返回的行数。◆&ensp;Innodb_rows_inserted：执行INSERT操作插入的行数。◆&ensp;Innodb_rows_updated：执行UPDATE操作更新的行数。◆&ensp;Innodb_rows_deleted：执行DELETE操作删除的行数。通过以上参数，比较容易得出当前数据库的应用是插入更新为主还是查询操作为主，以及各种类型的SQL大致执行的比例是多少。（对于更新操作的技术，是对执行次数的技术，不论commit还是rollback都会累加）。对于事务型应用，通过Com_commit和Com_rollback可以了解事务提交和回滚的情况，对于回滚操作很频繁的数据库，可能意味着应用编写存在问题。另外，一下几个参数便于了解数据库的基本情况：◆&ensp;Connections：尝试连接MySQL服务器的次数。◆&ensp;Uptime：服务器工作时间。◆&ensp;Slow_queried：慢查询次数 定位执行效率低的SQL我在工作中，使用过两种方式来查看当前执行效率低的SQL：一：查看线程：show processlist示例：1234567891011mysql&gt; show processlist;+----+------+-----------------+--------+---------+-------+----------+------------------+| Id | User | Host | db | Command | Time | State | Info |+----+------+-----------------+--------+---------+-------+----------+------------------+| 6 | root | localhost:16830 | test1 | Sleep | 18721 | | NULL || 7 | root | localhost:17154 | test1 | Sleep | 18721 | | NULL || 18 | root | localhost:47691 | sakila | Query | 0 | starting | show processlist || 19 | root | localhost:49737 | NULL | Sleep | 393 | | NULL || 20 | root | localhost:49738 | sakila | Sleep | 393 | | NULL |+----+------+-----------------+--------+---------+-------+----------+------------------+5 rows in set (0.00 sec) 该命令可以查看当前MySQL在进行的线程，包括状态，信息（是否锁表）等，便于实时查看SQL执行情况 二：慢查询日志定位MySQL的慢查询日志位置可以命令查看：12345678mysql&gt; show variables like &apos;%slow_query_log%&apos;;+---------------------+-----------------------------------------------------------+| Variable_name | Value |+---------------------+-----------------------------------------------------------+| slow_query_log | OFF || slow_query_log_file | /home/data/mysql/centos7-db-slow.log |+---------------------+-----------------------------------------------------------+2 rows in set, 1 warning (0.00 sec) 默认情况下慢查询是关闭的，慢查询日志保存路径可以看见。只需要给slow_query_log设置值即可开启慢查询：1234567891011mysql&gt; set global slow_query_log=1;Query OK, 0 rows affected (0.01 sec)mysql&gt; show variables like &apos;%slow_query_log%&apos;;+---------------------+-----------------------------------------------------------+| Variable_name | Value |+---------------------+-----------------------------------------------------------+| slow_query_log | ON || slow_query_log_file | /home/data/mysql/centos7-db-slow.log |+---------------------+-----------------------------------------------------------+2 rows in set, 1 warning (0.00 sec) 同时，可以配置慢查询时间，以及慢查询日志保存路径：在mysql安装路径下找到my.cnf文件，在其中增加或者修改long_query_time和slow_query_log_file即可完成配置(需要注意保存慢查询日志文件的文件夹的权限，属主和属组是mysql)。12345#[slowsql]slow_query_log = onslow_query_log_file =/var/lib/mysql/new_slow.loglong_query_time = 1log_output = file 或者命令行更改也可以：123456789101112131415161718mysql&gt; show variables like &apos;%long_query_time%&apos;;+-----------------+-----------+| Variable_name | Value |+-----------------+-----------+| long_query_time | 10.000000 |+-----------------+-----------+1 row in set, 1 warning (0.00 sec)mysql&gt; set long_query_time=2;Query OK, 0 rows affected (0.00 sec)mysql&gt; show variables like &apos;long_query_time&apos;;+-----------------+----------+| Variable_name | Value |+-----------------+----------+| long_query_time | 2.000000 |+-----------------+----------+1 row in set, 1 warning (0.00 sec) 慢查询示例当MySQL开启了慢查询，并且慢查询时间也根据自己情况进行了更改，下面实验下：12345678mysql&gt; show variables like &apos;%slow_query_log%&apos;;+---------------------+-----------------------------------------------------------+| Variable_name | Value |+---------------------+-----------------------------------------------------------+| slow_query_log | ON || slow_query_log_file | /home/data/mysql/centos7-db-slow.log |+---------------------+-----------------------------------------------------------+2 rows in set, 1 warning (0.00 sec) 可以看见，当前系统慢查询是开启状态，且一旦出现慢查询，会记录日志在/home/data/mysql/centos7-db-slow.log中。1234567mysql&gt; show variables like &apos;long_query_time&apos;;+-----------------+----------+| Variable_name | Value |+-----------------+----------+| long_query_time | 2.000000 |+-----------------+----------+1 row in set, 1 warning (0.00 sec) 慢查询时间设置为2s，一旦有SQL执行时间超过2s，就会被认为是慢查询，记录在慢查询日志中。 执行4s查询：1234567mysql&gt; select sleep(4);+----------+| sleep(4) |+----------+| 0 |+----------+1 row in set (4.00 sec) 该SQL执行时间为固定的4s，按照设置，肯定是慢查询了，进入日志文件，查看日志：123456789MySQL, Version: 5.7.21 (MySQL Community Server (GPL)). started with:TCP Port: 3306, Named Pipe: MySQLTime Id Command Argument# Time: 2018-03-09T08:34:16.502235Z# User@Host: root[root] @ localhost [::1] Id: 2# Query_time: 4.000101 Lock_time: 0.000000 Rows_sent: 1 Rows_examined: 0use sakila;SET timestamp=1520584456;select sleep(4); 以上就是慢查询内容，包含数据库，SQL执行时间，具体SQL，即定位到执行效率低的SQL，进行优化。 后记定位到慢查询的SQL之后，接下来就是对低效SQL进行分析，后序再说…]]></content>
      <categories>
        <category>MySQL-SQL优化</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基础之*args与**kwargs]]></title>
    <url>%2F2018%2F03%2F08%2Fpython%E5%9F%BA%E7%A1%80%E4%B9%8B-args%E4%B8%8E-kwargs%2F</url>
    <content type="text"><![CDATA[python基础之*args和**kwargs简单介绍 认识 *args和 **kwargs首先，看看*args和**kwargs到底是个什么：代码示例：123456789def foo(*args, **kwargs): print(u&quot;args = &quot;, args) print(u&quot;kwargs = &quot;, kwargs) print(&quot;==============我是分割线==================&quot;)if __name__ == &apos;__main__&apos;: foo(1, 2, 3, 4) foo(a=1, b=2, c=3) 输出结果为：123456args = (1, 2, 3, 4)kwargs = &#123;&#125;==============我是分割线==================args = ()kwargs = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;==============我是分割线================== 可以看出，这俩其实就是python的两个变量，*args是个元组（tuple）,**kwargs是个字典（dictionary）。 原理通过google各种解释，差不多是理解了，其实*args和**kwargs真正起作用的是*和**，而args以及kwargs其实就类似于var和vars；当python需要传递多个参数时，就将参数放在一个元组里，按照参数位置传递，以*开头；当需要传递多个键值对时，就把这些键值对放在一个字典里，按照关键字传递，以**开头。 示例一：1234567def foo(x, *args): print(x) print(args)if __name__ == &apos;__main__&apos;: foo(1, 2, 3, 4) 输出结果：121(2, 3, 4) 可以看出，python将（1,2,3,4），其中1，赋给默认参数x，（2,3,4）作为一个元组赋给args； 示例二：1234567def foo(x, **kwargs): print(x) print(kwargs)if __name__ == &apos;__main__&apos;: foo(1, a=2, b=3, c=4) 输出结果：121&#123;&apos;a&apos;: 2, &apos;b&apos;: 3, &apos;c&apos;: 4&#125; python将(1, a=2, b=3, c=4)，其中1，赋值给默认参数x；(a=2, b=3, c=4)作为字典赋给kwargs。 实参角度或者从实参角度来理解：*args示例：12345678def foo(x, y, z): print(x) print(y) print(z)if __name__ == &apos;__main__&apos;: foo(*(1, 2, 3)) 输出结果：123123 可以看出python将*(1, 2, 3)，按照位置将值赋给了x, y, z； **kwargs示例：12345678def foo(x, y, z): print(x) print(y) print(z)if __name__ == &apos;__main__&apos;: foo(**&#123;&quot;x&quot;:1,&quot;y&quot;:2,&quot;z&quot;:3&#125;) 输出结果：123123 python将**{&quot;x&quot;:1,&quot;y&quot;:2,&quot;z&quot;:3}，按照关键字x,y,z赋值给了x,y,z。 *args其实可以理解为python需要调用的任意个没有关键字的参数（无名参数）组成的元组，称之为Non-keyword Variable Arguments；**kwargs是python需要调用的任意个关键字参数（键值对）组成的字典，称之为keyword Variable Arguments 注意事项位置参数，*args，**kwargs混合使用顺序当函数参数中同时拥有位置参数，*args以及**kwargs时，顺序必须是位置参数，*args，**kwargs，否则会报错。示例：12345678def foo(x, *args, **kwargs): print(x) print(args) print(kwargs)if __name__ == &apos;__main__&apos;: foo(1,2,3,4,a=1, b=2, c=3) 输出结果：1231(2, 3, 4)&#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125; 位置参数，默认参数，**kwargs混合使用顺序当需要同时使用位置参数，默认参数以及**kwargs时，顺序必须为位置参数，默认参数，**kwargs，否则会报错。示例：12345678def foo(x, y=2, **kwargs): print(x) print(y) print(kwargs)if __name__ == &apos;__main__&apos;: foo(1,3,a=1,b=2,c=3) 输出结果：12313&#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125; 其中，3将赋给y，替换默认值2。]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker使用简介]]></title>
    <url>%2F2018%2F03%2F05%2Fdocker%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[日常docker使用简介 由于日常测试的项目都是在云端，阿里云，AWS上，基本也都是使用了虚拟化技术，项目放在docker或者k8s中。我现在所在的公司，是把项目放在docker中，挂在阿里云上，所以日常使用比较多的就是docker了。 常用操作查看服务从跳转机进入指定的docker所在服务器中，想要查看目前运行的服务：查看所有服务:1docker ps -a 和在linux下查看服务差不多，只是前面加了个docker；查看指定的服务，例如想查看服务名为boss的服务:1docker ps -a |grep boss 看着还是和linux下查看服务一样。。 查看日志一般进行测试时，习惯是开着日志，动态查看，因为有的错误，页面不会全部展示出来，我的习惯是进行测试时，浏览器开启开发者模式（F12），后台开启动态日志，执行操作之后进行数据库查询验证；那么docker下进行动态日志展示：1docker logs -f --tail=300 ContainerId 解释：首先在服务所在的服务器下，查询得到该服务当前开启的容器ID（containerId）docker ps -a该命令执行完成，会展示服务的基础信息：12[root@test-docker2 anmavadmin]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 即可以获取得到指定服务的containerid，动态查看日志和linux下类似，linux下普通的查看日志：1tail -f -n 300 xxx.log 即可动态显示日志文件后300行的日志，同样的，在docker下查看也是使用-f动态显示，显示行数用--tail=行数，再加上指定的Container Id即可1docker logs -f --tail=300 boss_container_id 进入Docker容器docker说到底，其实就是个小型的linux环境，所以，和普通linux一样，也是可以直接进入docker内部，进入docker内部有四种方法，方法很多，日常熟练的掌握一l两种即可。: 进入docker内部的四种方法 我日常使用的是docker exec进入docker内部：1docker exec -it ContainerId /bin/bash 即可进入容器内部，之后就可以和普通linux下一样操作。 K8S（Kubernetes） + Docker当前很多环境的搭建方案选择都是k8s+docker的混合搭建，这样的环境，进行测试工作的常用操作： 查看服务所在节点首先是进入k8s所在的服务器，查看需要查看日志的服务所在docker节点（正常情况下都不会只有一台docker，负载均衡，都知道。。。）：1kubectl get pods -o wide 即可显示所有服务的基础信息，包括服务名称，状态，IP，docker节点：123[root@centos7-k8s1 xxx]# kubectl get pods -o wideNAME READY STATUS RESTARTS AGE IP NODEtest-boss-server-060b3cf86fa24bd7c9ce2548015e9b38-07qn1 1/1 Running 0 12h 172.17.46.3 centos7-k8s1 此时即可获取到服务所在节点，例如上述示例，服务在centos7-k8s1，即节点1上，所以进入节点1所在服务器，即可动态查看服务日志:123进入节点1，sudo su root(或者就是sudo 命令)docker ps -a |grep bossdocker logs -f --tail=300 containerid 查看服务状态测试中也会遇见点击页面无响应，后台报服务连接超时的错误，此时，可以查看当前服务运行状态：1kubectl get rc -o wide 获取到的信息：123[root@centos7-k8s1 xxx]# kubectl get rc -o wideNAME DESIRED CURRENT READY AGE CONTAINER(S) IMAGE(S) SELECTORtest-boss-server 2 2 2 12h test-boss-server registry.docker.test.cn:5000/test-dev/test-boss-server:20180304_215608 deployment=060b3cf86fa24bd7c9ce2548015e9b38,name=test-boss-server,version=test 可以看出boss服务，期望运行节点数是2，当前运行节点数也是2，所以该服务当前是正常状态。一旦出现DESIRED和CURRENT的值不一致，表明有服务出现问题。出现问题之后就需要对服务进行问题定位，重启等操作，就不多说了。 后记自己对于虚拟化技术的掌握度基本是皮毛都算不上，现在还是满足最基本工作需要范围o(╥﹏╥)o，后期看来得好好补。。 3月3号时候，突然有个冲动，步行到西山岛上去，然后就说走就走。。。从渔洋山一直到西山岛-金庭游客中心,一个人默默的暴走了近1个小时40分钟，9.5km，走完全程3段太湖大桥，穿过岛两座，可惜天公不作美啊，太湖湖面上雾有点大，桥上风景还是有点朦胧，得找个天气晴朗的日志再走一遭！（再也不穿登山鞋去了，原本想爬山才穿的登山鞋，结果徒步差点没把脚走废掉。。。） 生命在于运动，恰逢一年一度的跑步黄金时期，该走出去，走走，跑跑，爬爬山~~~(大早上来发现VPS又挂了，哎我的hexo可以搭在VPS上的，进不去还写个鬼博客，只好又重搭了一个，愁)]]></content>
      <categories>
        <category>容器化</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新年伊始-开年记]]></title>
    <url>%2F2018%2F02%2F28%2F%E6%96%B0%E5%B9%B4%E4%BC%8A%E5%A7%8B-%E5%BC%80%E5%B9%B4%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[随波逐流，还是不停的瞎折腾~ 新年伊始过年来上班第一天就发现，SSR又登不上了，也就意味着，google啊，又离我远去。。。搞啥啊，查了下黄历，没啥问题啊，翻了下新华社新闻，好吧，开会了。。不出所料，被墙了。 周二时候有点不服，把vultr上几乎所有VPS都重搭了下，好吧，居然IP全挂，这么多台都全挂，有点服。。今天早上过来，感觉还是有点不爽，主要是每次打开浏览器，由于我设置的Chrome主页就是google，每次进来都是空荡荡的，感觉很难受，抱着不死就折腾的心态，又开始搭，结果还真找到个漏网之鱼，苍天啊，真的是泪流满面o(╥﹏╥)o 立刻重建，还好有这个经历： VPS重建记 一台新机器，花了半个小时就完成了，终于，又可以科学上网，hexo又可以更博了！！ 日常记忆随手记下昨天遇到的小白问题：在搭建自动化框架时，基本会把页面元素的定位信息放在类似于example.ini的配置文件中，然后从文件中获取定位方式以及定位表达式，这样方便维护。读取example.ini文件配置内容，我是使用的configparser，用法：12cf = configparser.ConfigParser()cf.read(&apos;example.ini&apos;) 这样就会把配置文件中的配置信息加载到内存中，获取信息一般使用两种方式： 获取特定的optionValue使用cf.get(section, option)即可获取特定的option的值例如，有一个example.ini内容如下：12345[126mail_login]loginPage.frame = id &gt; x-URS-iframeloginPage.username = xpath &gt; //input[@name=&quot;email&quot;]loginPage.password = xpath &gt; //input[@name=&quot;password&quot;]loginPage.loginbutton = id &gt; dologin 想要获取切换到登录frame的定位方式及表达式，只需要：12frame126 = cf.get(&quot;126mail_login&quot;, &quot;loginPage.frame&quot;)print(frame126) 打印出定位方式及表达式：1id &gt; x-URS-iframe 获取指定section下的所有option使用cf.items(section)即可获取该section下的所有option，返回的是一个列表，包含option以及对应的value示例：12options = cf.items(&quot;126mail_login&quot;)print(options) 返回结果：1[(&apos;loginpage.frame&apos;, &apos;id &gt; x-URS-iframe&apos;), (&apos;loginpage.username&apos;, &apos;xpath &gt; //input[@name=&quot;email&quot;]&apos;), (&apos;loginpage.password&apos;, &apos;xpath &gt; //input[@name=&quot;password&quot;]&apos;), (&apos;loginpage.loginbutton&apos;, &apos;id &gt; dologin&apos;)] 问题由于日常的开发环境是windows，系统的默认编码是gbk，所有在windows下使用configparser来读取配置文件时，有的时候会报编码错误：1UnicodeDecodeError: &apos;gbk&apos; codec can&apos;t decode byte 0xae in position 272: illegal multibyte sequence 解决解决方法很简单，直接看cf.read()的源码，源码是这样的：1234567891011121314151617181920212223def read(self, filenames, encoding=None): &quot;&quot;&quot;Read and parse a filename or a list of filenames. Files that cannot be opened are silently ignored; this is designed so that you can specify a list of potential configuration file locations (e.g. current directory, user&apos;s home directory, systemwide directory), and all existing configuration files in the list will be read. A single filename may also be given. Return list of successfully read files. &quot;&quot;&quot; if isinstance(filenames, str): filenames = [filenames] read_ok = [] for filename in filenames: try: with open(filename, encoding=encoding) as fp: self._read(fp, filename) except OSError: continue read_ok.append(filename) return read_ok 默认的read()是没有指定编码的encoding=None，所以只需要指定编码为utf-8即可解决：1cf.read(pageElementLocatorPath, encoding=&apos;utf-8&apos;) 其中pageElementLocatorPath为example.ini文件 后记生活不就是不断的折腾嘛，墙了继续试，大不了你再墙嘛~]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>自动化测试</tag>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在2018新年来临]]></title>
    <url>%2F2018%2F02%2F12%2F%E5%86%99%E5%9C%A82018%E6%96%B0%E5%B9%B4%E6%9D%A5%E4%B8%B4%2F</url>
    <content type="text"><![CDATA[写在春节来临之际农历2017年最后一个工作日，明天就要回家过春节了，想想，2017，好像过去的挺快的。来篇流水账，写写，我的2017。 活在苏州： 工作篇有苦有甜才是生活，作为占据我一天一半时间的大头，首先还是想看看在这上面，我的2017到底发生了些什么。工作内容还是日常的做个行走的BUG，以做一个开发及其烦躁的tester为荣，并在这条道上，坚定的走到黑！ 安硕生涯2016年7月来到安硕，工作了也有段时间，工作方式，好歹是从个外人眼中看来，测试就是定点点的工作转换成了性能测试做的多一点的，入门级性能测试工程师。日常工作，积累了一套性能需求分析-脚本编写-结果分析-瓶颈定位-性能调优的性能测试步骤，说起来，做的还是有点乐此不疲的，就是记忆力有点差，mysql性能调优经常忘。。（(ಥ_ಥ) ）同时，接触到了大数据相关，虽然和我的关联不是特别大，最多就是帮着测测规则，测测数据，好歹是打开了另一扇窗；眼界不是来自于期刊杂志，有真正自己去接触了，才是有自己的感受，所以，还是挺感激这段经历。然后2017年9月，离开了安硕。 新的开始2017年9月21日，正式从安硕来到了这，正式开始了测试带队（虽然手下就一人~~~），也正式捡起了放下一年半的python。刚毕业那会，和舍友选语言，他选了python做爬虫，我选了java，后来兜兜转转，我的java技术还是那么菜，压根入门都没达到就半路夭折，好在，还有补牢的机会，重新拿起python，做起了自动化。9月至今，python书籍看完两本，简陋自动化框架搭建完成一个，算是还对的起自己。路还在脚下，当慢慢走。 生活篇2017年的生活，不再那么浑浑噩噩，上班下班，周末宅；生活中发生了好几件大事。2017年5月13日，在苏州买了房，从此开始房奴生涯（o(╥﹏╥)o）2017年5月23日，回句容领了证，从此告别一个人的时光（(｀・ω・´)）7月，失去了一位亲人..总的来说，2017，算是翻天覆地的一年，本命年的我，经历了也就这些。人间烟火，不过是比落叶还轻的生活；该开的开，山野鲜花依然澎湃；该来的来，路上精彩还在等待。 玩乐篇换个心情，回忆点轻松的，作为一个从小就喜欢满田野疯的“野孩子”，整年不出门去看看那是不现实的。3月，的确是个赏樱花的季节，无锡-鼋头渚 原谅手残，技术不到家，樱花实在没拍的好，照片只能待在自己手机没事用来傻笑~4月，好像是万条垂下绿丝绦的时节了，杭州-西湖九溪烟树，云栖竹径，苏堤春晓，柳浪闻莺，梅坞春早，钱塘江，龙井村等等，带着个小胖子，也有过一天翻越无数山头，暴走30公里的经历。（杭州之行，照片太丑，不拿出来丢人。。。）8月，拿着婚假，怀着点点感伤，踏上了川藏线的朝圣之路，成都-&gt;拉萨成都遇上海燕和莉儿，一行，10天，成都出发，终点拉萨。南方的孩子，还是应该在8月到雪山上去看看雪的，不是吗~感芸芸众生，人世无常，茫茫大海，谁可争流；不如步入山野，凭栏远眺，闲庭信步，观云卷云舒。 竺法渐传三界远，盛音近绕佛堂前。达布拉宫，只有亲眼看见，才知道，眼前，真的就是一幅画。 然后，12月，前往丽江拍婚纱照，天和西藏一样蓝，就是商业气息过于浓重了点，小憩可以，不宜久居。时间有限，没去成泸沽湖，没机会去洱海，都算是遗憾，谁说不是呢，有遗憾，才是真正的活着嘛。（照片，在相机，忘了传手机了。。。） 后记不大不小，24周岁，不多不少，两个人了；愿能够笑看沧桑，轻盈过往；淡看流年烟火，细品岁月静好。花有花的灿烂，云有云的诗意，淡然的面对生命的一切逝去，在似水流年间细细品味每一个过往，每一种滋味，每一份流逝。 最后，最后一天了，祝所有，在未来的日子里，恬然，静候花开。 （原谅通篇流水账~~~太久不会写文字了￣□￣｜｜）]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3完成mysql操作]]></title>
    <url>%2F2018%2F02%2F11%2Fpython3%E5%AE%8C%E6%88%90mysql%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[python3使用pymysql操作mysql5.7 版本信息：1234MYSQL 5.7.21PYTHON 3.6pymysql 0.8.0WIN 10 安装首先，老样子，安装。windows控制台直接执行：1pip install pymysql 即可，pipenv进行类包管理，控制台中进入工程所在目录下，执行：1pipenv install pymysql SQLsql.py文件，包含初始化数据库，创建库，创建表所有sql：1234567891011# 创建gloryroad数据库create_database = &apos;CREATE DATABASE IF NOT EXISTS gloryroad DEFAULT CHARSET utf8 COLLATE utf8_general_ci;&apos;# 创建testdata表drop_table = &apos;drop table if exists TESTDATA;&apos;create_table = &quot;&quot;&quot;CREATE TABLE TESTDATA ( id INT NOT NULL, bookname VARCHAR(40) NOT NULL UNIQUE, author VARCHAR(30) NOT NULL)&quot;&quot;&quot;primary_sql = &apos;alter table testdata add primary key(id);&apos;alter_id = &apos;alter table testdata change id id int AUTO_INCREMENT NOT NULL;&apos; 创建表时候，我们在mysql控制台，或者在类似Navicat for mysql这样的数据库连接工具中直接执行1234567CREATE TABLE `testdata` ( `id` int(11) NOT NULL AUTO_INCREMENT, `bookname` varchar(40) NOT NULL, `author` varchar(30) NOT NULL, PRIMARY KEY (`id`), UNIQUE KEY `bookname` (`bookname`)) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 即可创建包含主键，唯一键，自增字段等属性的testdata表，但是不知道为啥，我直接在pycharm中执行，一直报错，又不想耗在这上面，就拆开来了，先创建表，再增加主键，修改字段等操作。 pymysql创建数据库及表创建库和表pymysql对mysql的操作，基本可以总结为几步：123456建立连接（connect）打开游标（cursor）执行sql（execute）提交事务（commit）关闭游标（close cursor）关闭连接（connect close） 所以进行创建数据库和表操作时，一步一步执行即可：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/11 13:06&quot;&quot;&quot;from SQL import *import pymysqlclass DataBaseInit(object): &quot;&quot;&quot; 1、数据库初始化 2、创建数据库及表，并向表中插入测试数据 &quot;&quot;&quot; def __init__(self, host, port, dbName, username, password, charset): self.host = host self.port = port self.db = dbName self.username = username self.password = password self.charset = charset def creaete(self): # 建库及表 try: # 连接mysql数据库 conn = pymysql.connect( host = self.host, port = self.port, user = self.username, passwd = self.password, charset = self.charset ) # 获取数据库游标 cur = conn.cursor() # 创建数据库 cur.execute(create_database) # 选择创建好的数据库 conn.select_db(&quot;gloryroad&quot;) # 建表并更改字段 cur.execute(drop_table) cur.execute(create_table) cur.execute(primary_sql) cur.execute(alter_id) except pymysql.Error as e: raise e else: # 关闭游标 cur.close() # commit conn.commit() # 关闭连接 conn.close() print(u&quot;创建数据库及表成功&quot;) 插入数据插入数据也是正常步骤即可，当插入不止一条数据，可以使用executemany()来一次插入多条数据，配合insert into table (col1, col2) values (%s, %s)可以完成参数化一次插入大量数据；插入数据方法：1234567891011121314151617181920212223242526272829303132def insertData(self): # 插入数据 try: # 连接具体某个库 conn = pymysql.connect( host=self.host, port=self.port, db=self.db, user=self.username, passwd=self.password, charset=self.charset ) # 打开游标 cur = conn.cursor() # 插入数据 sql = &quot;insert into testdata (bookname, author) values (%s, %s)&quot; cur.executemany(sql, [ [&apos;FACE TO FACE WITH FARE&apos;, &apos;Amana Trobe&apos;], [&apos;Relationship&apos;, &apos;Christopher benas Meng&apos;], [&apos;ZOO&apos;, &apos;Yiyi&apos;] ]) except pymysql.Error as e: raise e else: conn.commit() print(u&quot;初始化数据插入成功&quot;) # 确认插入成功 # cur.execute(&quot;select * from testdata;&quot;) # for i in cur.fetchall(): # print(i[1], i[2]) cur.close() conn.close() 从mysql获取数据很简单，一步一步走即可：12345678910111213def getDataFromDataBases(self): # 从testdata表获取测试数据 # bookname作为testdata，author作为expectdata self.cur.execute(&quot;select bookname, author from testdata;&quot;) # 取查询结果 datasTuple = self.cur.fetchall() return datasTupledef closeDatabase(self): # 数据库后续操作 self.cur.close() self.conn.commit() self.conn.close() 至此，就可以完成测试数据存在mysql中，从数据库表中完成测试数据的读取以及断言判断等操作。]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>python3</tag>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于python3的UI自动化框架搭建系列（二）]]></title>
    <url>%2F2018%2F02%2F09%2F%E5%9F%BA%E4%BA%8Epython3%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[自动化测试框架雏形搭建完成 小结框架终于差不多完成了，包含了123自定义日志自定义测试报告实时邮件发送 等模块。目前可以实现：12345测试过程中控制台实时打印日志测试过程中实时写日志入自定义log文件测试过程中发生断言失败，实时截图，并且将堆栈日志打印到指定log文件测试完成自动生成html格式测试报告测试完成自动发送邮件 实例以下是实现的简单的从excel中读取数据进行自动化测试的实例（测试用例使用excel编写）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/9 15:30&quot;&quot;&quot;from selenium import webdriverfrom ExcelUtil import GetDataFromExcelfrom selenium.common.exceptions import NoSuchElementExceptionfrom Log import *from MailSend import MailSendfrom ReportTemplate import htmlTemplatefrom nose.tools import assert_truefrom MakeDirs import *import time,tracebackimport sys,ddt# excel路径，sheet名path = &quot;G:/workstation/py_workstation/DataDriverTest/DdtData/testData.xlsx&quot;sheetname = &quot;search_data&quot;excel = GetDataFromExcel(path, sheetname)@ddt.ddtclass TestDdtByExcel(): @classmethod def setUpClass(cls): TestDdtByExcel.trStr = &quot;&quot; def setUp(self): self.browser = webdriver.Chrome() # 设置测试状态及结果标志 self.status = None self.flag = 0 @ddt.data(* excel.getData()) def test_ddtbyexcel(self, data): # 声明全局变量 global start, starttime # 定义执行结果的颜色 flagDict = &#123;0: &apos;red&apos;, 1: &apos;00AC4E&apos;&#125; # 获取测试用例名称 casename = sys._getframe().f_code.co_name testdata, expectdata = tuple(data) url = &quot;https://www.baidu.com&quot; self.browser.get(url) self.browser.implicitly_wait(10) try: # 获取当前时间戳 start = time.time() # 获取当前时间 starttime = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()) # 搜索 self.browser.find_element_by_id(&apos;kw&apos;).send_keys(testdata) self.browser.find_element_by_id(&apos;su&apos;).click() # 休眠3s time.sleep(3) # 断言 assert_true(expectdata in self.browser.page_source) except NoSuchElementException as e: error(u&quot;页面元素不存在：&quot; + str(traceback.print_exc( file=open(&quot;G:/workstation/py_workstation/DataDriverTest/Logs/Error/DdtTest.log&quot;, &quot;a&quot;)))) self.flag = 0 self.status = &apos;fail&apos; takeScreenShot(self.browser) except AssertionError as e: error(u&quot;搜索“&#123;0&#125;，期望“&#123;1&#125;”，失败”&quot;.format(testdata, expectdata) + str(traceback.print_exc( file=open(&quot;G:/workstation/py_workstation/DataDriverTest/Logs/Error/DdtTest.log&quot;, &quot;a&quot;)))) self.flag = 0 self.status = &apos;fail&apos; takeScreenShot(self.browser) except Exception as e: error(u&quot;未知错误：&quot; + str(traceback.print_exc( file=open(&quot;G:/workstation/py_workstation/DataDriverTest/Logs/Error/DdtTest.log&quot;, &quot;a&quot;)))) self.flag = 0 self.status = &apos;fail&apos; takeScreenShot(self.browser) else: info(u&quot;搜索“&#123;0&#125;，期望“&#123;1&#125;”，通过”&quot;.format(testdata, expectdata)) self.status = &apos;pass&apos; self.flag = 1 # 计算消耗时间 # 10位时间戳，单位为s spends = time.time() - start - 3 # 取两位小数 spendtime = &quot;%.2f&quot; %spends # 报告中添加数据 TestDdtByExcel.trStr += u&apos;&apos;&apos; &lt;tr&gt; &lt;td&gt;&#123;0&#125;&lt;/td&gt; &lt;td&gt;&#123;1&#125;&lt;/td&gt; &lt;td&gt;&#123;2&#125;&lt;/td&gt; &lt;td&gt;&#123;3&#125;&lt;/td&gt; &lt;td&gt;&#123;4&#125;&lt;/td&gt; &lt;td style=&quot;color: &#123;5&#125;&quot;&gt;&#123;6&#125;&lt;/td&gt; &lt;/tr&gt; &apos;&apos;&apos;.format(casename, testdata, expectdata, starttime, spendtime, flagDict[self.flag], self.status) def tearDown(self): self.browser.quit() @classmethod def tearDownClass(cls): # 写自定义报告 htmlTemplate(TestDdtByExcel.trStr)if __name__ == &apos;__main__&apos;: os.system(&quot;nosetests -s -v &#123;0&#125;&quot;.format(__file__)) info(u&quot;*****测试报告开始发送*****&quot;) report_file = &quot;G:/workstation/py_workstation/DataDriverTest/Report/DDTByExcel.html&quot; mail_subject = &quot;NoseTest测试报告_&#123;0&#125;&quot;.format(dt.now().strftime(&quot;%Y%m%d&quot;)) mailsend = MailSend(mail_subject, report_file) mailsend.sendMail() info(u&quot;~~~测试报告发送完成，请注意查收~~~&quot;) 结构粗略结构：12345678910project|—— coding（主要代码）|—— DdtConf（一些配置，包括邮箱（.ini），日志(logger.conf)等）|—— DdtData（测试数据（excel，xml，json）等）|—— DdtTools（工具类（生成html文件，创建文件夹，截图，邮件发送，从文件读数据））等）|—— Logs（日志） |—— Info |—— Error|—— Pictures（断言失败的截图）|—— Report（测试报告） 后期再慢慢改进，可以修改的地方还有很多！]]></content>
      <categories>
        <category>自动化测试框架</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python3</tag>
        <tag>自动化测试</tag>
        <tag>nose</tag>
        <tag>ddt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows安装mysql5.7]]></title>
    <url>%2F2018%2F02%2F09%2Fwindows%E5%AE%89%E8%A3%85mysql5-7%2F</url>
    <content type="text"><![CDATA[winwods环境安装配置mysql5.7 版本信息12win 10mysql 5.7.21 下载直接上官网下载： mysql下载官网 以前官网上的下载是有.msi格式的安装包的，现在好像没怎么找到（也可能是眼睛花了。。），现在下载的是.zip压缩包，也就是直接解压缩就可以了。 安装及配置安装将压缩包下载到本地，解压缩到你自定义的目录下，如我下载的是mysql-5.7.21-winx64.zip文件，解压缩到我本地软件安装盘：E:\Test\ 环境变量解压完成之后，进行日常操作，配置环境变量，将你解压完成之后的mysql的bin目录所在路径添加到系统环境变量path中，另外可以新建一个MYSQL_HOME的环境变量，变量值也是你的bin目录所在路径，例如我的配置：1234pathE:\Test\mysql-5.7.21-winx64\binMYSQL_HOMEE:\Test\mysql-5.7.21-winx64\bin 配置服务注册在你的mysql目录下，新建my.ini文件，来完成windows系统服务的注册，内容可参考我的：1234567891011121314151617181920[client]port=3306default-character-set=utf8[mysqld]#解压目录basedir=E:\Test\mysql-5.7.21-winx64#解压目录下data目录datadir=E:\Test\mysql-5.7.21-winx64\dataport=3306character_set_server=utf8#导出mysql数据的目录secure_file_priv =E:\Test\mysql-5.7.21-winx64\datasql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES#开启查询缓存explicit_defaults_for_timestamp=true#skip-grant-tables[WinMySQLAdmin]E:\Test\mysql-5.7.21-winx64\bin\mysql.exe DATA文件夹在mysql 5.6版本之前，默认就是在E:\Test\mysql-5.7.21-winx64下就有data文件夹，现在没有了，需要自己手动新建E:\Test\mysql-5.7.21-winx64\data新建完成之后，右键管理员打开cmd，进入mysql的bin目录下（E:\Test\mysql-5.7.21-winx64\bin），执行命令：1mysqld --initialize 运行完成之后，在data目录下就有生成一些初始化的文件，里面有个你的机器.err格式的文件，用文本编辑器打开之后，可以看见随机生成的root的密码：12018-02-09T01:51:43.117196Z 1 [Note] A temporary password is generated for root@localhost: PaFe#w##v6zD 安装mysql管理员模式打开的cmd中，进入\mysql\bin目录下，输入服务安装命令：1mysqld -install 启动服务安装没有报错情况下，可以选择在windows的服务中手动起服务，也可以命令行起：1net start mysql 打印信息：123&#123;lamb&#125; net start mysqlMySQL 服务正在启动 .MySQL 服务已经启动成功。 表明mysql服务已经成功启动。 mysql操作mysql服务启动之后，用root用户登录(密码在前步生成的xxx.err文件中)：1mysql -uroot -p密码 进入mysql控制台。1234567891011121314mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.21 MySQL Community Server (GPL)Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; 表示成功进入控制台。 修改root密码控制台下执行:1ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;新密码&apos;; 回车即可。用新密码重新登录进控制台，随意看看mysql吧（关于数据库的操作就不提了，教程一大堆，用多了就熟悉了）~12345678910mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+4 rows in set (0.00 sec) 12345678910mysql&gt; use sys;Database changedmysql&gt; show tables;+-----------------------------------------------+| Tables_in_sys |+-----------------------------------------------+| host_summary || host_summary_by_file_io || host_summary_by_file_io_type || host_summary_by_stages 慢查询及版本信息123456789101112131415161718192021222324252627mysql&gt;mysql&gt; show variables like &quot;%slow%&quot;;+---------------------------+-----------------------------------------------------------+| Variable_name | Value |+---------------------------+-----------------------------------------------------------+| log_slow_admin_statements | OFF || log_slow_slave_statements | OFF || slow_launch_time | 2 || slow_query_log | OFF || slow_query_log_file | E:\Test\mysql-5.7.21-winx64\data\DESKTOP-PBQIU7V-slow.log |+---------------------------+-----------------------------------------------------------+5 rows in set, 1 warning (0.00 sec)mysql&gt; show variables like &quot;%version%&quot;;+-------------------------+------------------------------+| Variable_name | Value |+-------------------------+------------------------------+| innodb_version | 5.7.21 || protocol_version | 10 || slave_type_conversions | || tls_version | TLSv1,TLSv1.1 || version | 5.7.21 || version_comment | MySQL Community Server (GPL) || version_compile_machine | x86_64 || version_compile_os | Win64 |+-------------------------+------------------------------+8 rows in set, 1 warning (0.00 sec)]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3操作excel]]></title>
    <url>%2F2018%2F02%2F09%2Fpython3%E6%93%8D%E4%BD%9Cexcel%2F</url>
    <content type="text"><![CDATA[python3使用openpyxl完成excel数据读和写 工具python3操作excel数据，对于excel 2007及以上版本，一般使用openpyxl来进行操作；windows下，只需要控制台执行1pip install openpyxl 即可，若是使用pipenv进行类库管理的，控制台下进入工程所在目录（Pipfile所在路径），执行1pipenv install openpyxl 即可。对于pipenv在之前的一篇博客中有提及： python项目依赖管理工具 安装完成之后，执行命令python进入python交互环境，引包：1import openpyxl 不报错则安装成功 常用操作1234567891011121314151617181920212223# 引包import openpyxl# excel文件路径file = &quot;G:\workstation\py_workstation\DataDriverTest\DdtData\testData.xlsx&quot;# 打开excelwb = openpyxl.load_workbook(file)# 获取指定sheet页，名称：“search_data”sheet = wb[&quot;search_data&quot;]# 获取所有sheet的名称sheets = wb.sheetnames# 获取行数nrow = sheet.max_row# 获取列数ncol = sheet.max_column# 获取单元格值cell_1 = sheet.cell(row=2, column=2).value# 单元格赋值cell_2 = sheet.cell(row=2, column=2, value=&quot;YIDA&quot;)# 保存excelwb.save(file) 读写excel进行ddt时，有的时候测试数据，甚至测试用例是在excel中，如下表，标示出了测试数据，预期结果。 number&emsp;&emsp;testdata &emsp;&emsp;&emsp;expectdata1&emsp;&emsp;&emsp;&emsp;&ensp;Jordan&emsp;&emsp;&emsp;&emsp;&ensp;DRFSA2&emsp;&emsp;&emsp;&emsp;&ensp;Garnett&emsp;&emsp;&emsp;&emsp;&ensp;Kevin3&emsp;&emsp;&emsp;&emsp;&ensp;Oneal&emsp;&emsp;&emsp;&emsp;&emsp;Shaquille4&emsp;&emsp;&emsp;&emsp;&ensp;Nowitzki&emsp;&emsp;&emsp;&emsp;rsdffd5&emsp;&emsp;&emsp;&emsp;&ensp;Duncan&emsp;&emsp;&emsp;&emsp;Tim 首先是尝试使用python3 把数据写入excel 写数据直接上代码12345678910111213141516171819202122#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/9 13:25&quot;&quot;&quot;import openpyxlfile = &quot;G:/workstation/py_workstation/DataDriverTest/DdtData/test.xlsx&quot;wb = openpyxl.load_workbook(file)sheet = wb.activesheet.title = &quot;search_data&quot;value = [ [&quot;number&quot;, &quot;testdata&quot;, &quot;expectdata&quot;], [&quot;1&quot;, &quot;Jordan&quot;, &quot;DRFSA&quot;], [&quot;2&quot;, &quot;Garnett&quot;, &quot;Kevin&quot;]]for i in range(0, 3): for j in range(0, len(value[i])): sheet.cell(row=i+1, column=j+1, value=str(value[i][j]))wb.save(file) 读数据代码：1234567891011121314151617181920212223242526#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/9 14:15&quot;&quot;&quot;import openpyxl# 打开excelwb = openpyxl.load_workbook(&quot;G:/workstation/py_workstation/DataDriverTest/DdtData/testData.xlsx&quot;)# 获取指定sheet页sheet = wb[&quot;search_data&quot;]# 获取列表中最大行数和最大列数nrows = sheet.max_rowncol = sheet.max_columntestdata = []# 获取2到6行for i in list(range(2,nrows+1)): tmplist = [] tmplist.append(sheet.cell(row=i, column=2).value) #2,2 tmplist.append(sheet.cell(row=i, column=3).value) #2,3 testdata.append(tmplist)print(testdata) 完成！！！ 后记估计是快过年，快放假了，都没什么心思敲了；真的是弄了好久才读出数据。。。python3操作excel是真的跟python2很不一样，网上的教程很多都不能用，最明显的就是:python2可以遍历工作表区域每一行，跳过第一行，直接写成1for row in sheet.rows[1:]: 但是python3实现不了。。不过自己能折腾出来，感觉还是有点小小的成就感的~ 附环境版本：1234python 3.6openpyxl 2.5.0win 10office 2013]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>openpyxl</tag>
        <tag>ddt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义测试报告]]></title>
    <url>%2F2018%2F02%2F08%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[解决自动化测试中捕获断言之后，测试报告展示为ok无法查看具体哪条用例执行失败的问题 问题来自之前博客中折腾的单元测试异常捕获问题：自动化测试断言捕获当时折腾出的解决方案是自定义测试报告的模板，定义status状态位，作为测试用例执行结果的状态标志，一旦发生断言异常捕获，将status状态为置为fail，最后体现在测试报告上。 自定义报告自定义报告模块，参考nose生成的报告，又东拼西凑折腾出了这份最简单的测试报告，最终报告生成原理就是：首先html文件中创建表格，预留html的尾部，在后续执行自动化测试过程中，将生成的测试数据拼接到不完整的html文件中，最终生成完成的html文件作为测试报告。 ReportTemplate.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/8 11:21&quot;&quot;&quot;def htmlTemplate(trData): &quot;&quot;&quot;自定义测试报告样式&quot;&quot;&quot; htmlStr = u&apos;&apos;&apos; &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;Unit Test Report&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt; &lt;style&gt; body&#123; width: 80%; /* 整个body区域占浏览器百分比 */ margin: 40px auto; /* 整个body区域相对浏览器窗口摆放位置（左右，上下）*/、 font-weight: bold; /* 整个body区域字体加粗 */ font-family: Calibri, &quot;Trebuchet MS&quot;, sans-serif; /* 表格中文字的字体类型 */ font-size: 18px; /* 字体大小 */ color: #000; &#125; table&#123; border-spacing: 0; /* 表格边框宽度 */ width: 100%; /* 整个表格相对父元素的宽度 */ &#125; .tableStyle&#123; border-style: outset; /* 整个表格外边框样式 */ border-width: 2px; /* 整个表格外边框宽度 */ border-color: blue; /* 整个表格外边框颜色 */ &#125; .tableStyle tr:hover&#123; background: rgb(173,216,230); /* 鼠标滑过一行，动态显示的颜色 */ &#125; .tableStyle td&#123; border-left: solid 1px rgb(146,208,80); /* 表格的竖线颜色 */ border-top: 1px solid rgb(146,208,80); /* 表格的横线颜色 */ padding: 15px; /* 表格内边框尺寸 */ text-align: center; /* 表格内容显示位置 */ vertical-align: middle; &#125; .tableStyle th&#123; border-left: solid 1px rgb(146,208,80); border-top: 1px solid rgb(146,208,80); padding: 15px; text-align: center; vertical-align: middle; &#125; .tableStyle th&#123; padding: 15px; /* 表格标题栏，字体尺寸 */ background-color: rgb(146,208,80); /* 表格标题栏背景颜色 */ /* 标题栏设置渐变色 */ background-image: -webkit-gradient(linear, left top, left bottom, from(#92D050), to(#A2D668)); &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;center&gt;&lt;h1&gt;TestReport&lt;/h1&gt;&lt;/center&gt;&lt;br /&gt; &lt;table class=&quot;tableStyle&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;CaseName&lt;/th&gt; &lt;th&gt;TestData&lt;/th&gt; &lt;th&gt;ExpectData&lt;/th&gt; &lt;th&gt;StartTime&lt;/th&gt; &lt;th&gt;SpendTime&lt;/th&gt; &lt;th&gt;Result&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &apos;&apos;&apos; endStr = u&apos;&apos;&apos; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; &apos;&apos;&apos; # 拼接成完整html文件 htmlf_file = htmlStr + trData + endStr with open(r&quot;D:/bug_things/selenium/report/DDTByObj.html&quot;, &quot;w&quot;, encoding=&apos;utf-8&apos;) as f_obj: f_obj.write(htmlf_file) #f.close() ddt数据驱动使用ddt进行自动化测试，单元测试框架使用nose，实现如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/8 14:07&quot;&quot;&quot;from selenium import webdriverfrom ReportTemplate import htmlTemplatefrom selenium.common.exceptions import NoSuchElementExceptionfrom DdtTools.Log import *from DdtTools.MailSend import MailSendfrom datetime import datetime as dtfrom nose.tools import assert_trueimport sysimport ddtimport timeimport traceback@ddt.ddtclass TestDdtByJson(): @classmethod def setUpClass(cls): # 只调一次 TestDdtByJson.trStr = &quot;&quot; def setUp(self): self.browser = webdriver.Chrome() # 存放测试结果状态，失败为fail，成功为pass self.status = None # 数据驱动测试结果的标志，成功置1，失败置0 self.flag = 0 @ddt.file_data(&quot;G:/workstation/py_workstation/DataDriverTest/DdtData/test_data_list.json&quot;) def test_ddtbyjson(self, value): global start, starttime # 获取当前测试用例名 casename = sys._getframe().f_code.co_name # 确定报告中状态单元格中内容颜色 flagDict = &#123;0: &apos;red&apos;, 1: &apos;#00AC4E&apos;&#125; url = &quot;https://www.baidu.com&quot; self.browser.get(url) #self.browser.maximize_window() # 将json中测试数据用“||”分隔成测试数据及期望结果 testdata, expectdata = tuple(value.strip().split(&quot;||&quot;)) self.browser.implicitly_wait(10) try: # 获取当前时间时间戳，用于计算耗时 start = time.time() # 获取当前时间 starttime = time.strftime(&quot;%Y-%m-%d %H:%M%S&quot;, time.localtime()) # 开始搜索 self.browser.find_element_by_id(&apos;kw&apos;).send_keys(testdata) self.browser.find_element_by_id(&apos;su&apos;).click() time.sleep(3) # 断言 assert_true(expectdata in self.browser.page_source) except NoSuchElementException as e: error(u&quot;页面元素不存在：&quot; + str(traceback.print_exc(file=(open(&quot;D:/bug_things/selenium/logs/errors/DdtTest.log&quot;, &apos;a&apos;))))) self.status = &apos;fail&apos; self.flag = 0 except AssertionError as e: error(u&apos;搜索“&#123;0&#125;”，期望“&#123;1&#125;”，失败&apos;.format(testdata, expectdata) + str(traceback.print_exc(file=open(&quot;D:/bug_things/selenium/logs/errors/DdtTest.log&quot;, &apos;a&apos;)))) self.status = &apos;fail&apos; self.flag = 0 except Exception as e: error(u&quot;未知错误：&quot; + str(traceback.print_exc(file=open(&quot;D:/bug_things/selenium/logs/errors/DdtTest.log&quot;, &apos;a&apos;)))) self.status = &apos;fail&apos; self.flag = 0 else: info(u&apos;搜索“&#123;0&#125;”，期望“&#123;1&#125;”，通过&apos;.format(testdata, expectdata)) self.status = &apos;pass&apos; self.flag = 1 # 计算消耗时间 # 时间戳相减(10位时间戳单位为s) spends = time.time() - start - 3 # 取两位小数 spendtime = &quot;%.2f&quot; %spends # 报告中添加测试数据 TestDdtByJson.trStr += u&apos;&apos;&apos; &lt;tr&gt; &lt;td&gt;&#123;0&#125;&lt;/td&gt; &lt;td&gt;&#123;1&#125;&lt;/td&gt; &lt;td&gt;&#123;2&#125;&lt;/td&gt; &lt;td&gt;&#123;3&#125;&lt;/td&gt; &lt;td&gt;&#123;4&#125;&lt;/td&gt; &lt;td style=&quot;color: &#123;5&#125;&quot;&gt;&#123;6&#125;&lt;/td&gt; &lt;/tr&gt; &apos;&apos;&apos;.format(casename, testdata, expectdata, starttime, spendtime, flagDict[self.flag], self.status) def tearDown(self): self.browser.quit() @classmethod def tearDownClass(cls): # 写自定义测试报告 htmlTemplate(TestDdtByJson.trStr)if __name__ == &apos;__main__&apos;: os.system(&quot;nosetests -s -v &#123;0&#125;&quot;.format(__file__)) info(u&quot;测试报告开始发送&quot;) report_file = &quot;D:/bug_things/selenium/report/DDTByObj.html&quot; mail_subject = &quot;UnitTest测试报告_&#123;0&#125;&quot;.format(dt.now().strftime(&quot;%Y%m%d&quot;)) mailsend = MailSend(mail_subject, report_file) mailsend.sendMail() info(u&quot;测试报告发送完成&quot;) 其中涉及到的邮件发送模块和日志模块可以参照以前的博客： 邮件模块日志配置 其中日志模块增加了对error级别的日志的配置，很简单，和info级别类似，就不多说了。最终实现效果，测试过程中在控制台以及D:/bug_things/selenium/logs/info/AutoDDT.log中实时写入info以及error的日志，当出现堆栈错误，写入D:/bug_things/selenium/logs/errors/DdtTest.log文件中，两个日志文件的写入方式都是append，测试完成之后邮件发送包含html附件的测试报告到指定邮箱；同时邮件正文中展示包含测试结果的表格，出现fail状态，可直接前往D:/bug_things/selenium/logs/errors/DdtTest.log日志中查看具体出错，以及具体出错行。需要改进的是，D:/bug_things/selenium/logs/errors/DdtTest.log文件没有明显对各个用例的区分，甚至没有空格行来让显示更明确，还是需要自己去搜索。 后记现在终于是完成了自动化测试的基本模块，日志和测试报告真的是折腾了…后期自己前端知识丰富之后，还需要优化测试报告。接下来，除了完成从excel和数据库中读取测试数据之外，就真的开始搭建自己的框架了（这几天这牛角尖钻的，解决之后还是挺舒服的~）]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>nose</tag>
        <tag>ddt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单元测试异常捕获]]></title>
    <url>%2F2018%2F02%2F08%2F%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%2F</url>
    <content type="text"><![CDATA[关于自动化测试执行期间断言的异常的选择迷茫 大概是这段时间有点压抑，昨天下午就不知道怎么钻在了单元测试断言失败需不需要捕获异常这个问题上。大家都知道，进行单元测试时，加入断言验证单元测试结果，断言失败会报错，通过会打印ok标识。 nose进行单元测试使用nose进行单元测试示例：123456789#!/usr/bin/env python3# -*- coding: utf-8 -*-from nose.tools import assert_equaldef test_sum(): a = 1 b = 2 res = 5 assert_equal(res, a+b) 控制台执行1nosetests -v -s Testexec.py 打印信息12345678910111213141516Testexec.test_sum ... FAIL======================================================================FAIL: Testexec.test_sum----------------------------------------------------------------------Traceback (most recent call last): File &quot;g:\skills\python36\lib\site-packages\nose\case.py&quot;, line 198, in runTest self.test(*self.arg) File &quot;G:\workstation\py_workstation\DataDriverTest\Testexec.py&quot;, line 17, in test_sum assert_equal(res, a+b)AssertionError: 5 != 3----------------------------------------------------------------------Ran 1 test in 0.007sFAILED (failures=1) 可以看出，断言失败了，控制台也打印出了断言失败的信息。但是在进行自动化测试过程中，如果你想加入日志模块，在执行过程中就在控制台或者文件中打印日志，例如：Testexec.test_sum ... 断言失败，3不等于5这样的信息，很明显，直接用上述写法是不会走到打印失败信息这一步，所以就需要将断言失败的异常捕获，类似这样：123456789101112#!/usr/bin/env python3# -*- coding: utf-8 -*-from nose.tools import assert_equaldef test_sum(): try: a = 1 b = 2 res = 5 assert_equal(res, a+b) except AssertionError as e: print(&quot;断言失败，&#123;0&#125;不等于&#123;1&#125;&quot;.format(a+b, res)) 这种写法执行单元测试，结果：12345678&#123;lamb&#125; nosetests -v -s Testexec.pyTestexec.test_sum ... 断言失败，3不等于5ok----------------------------------------------------------------------Ran 1 test in 0.002sOK 可以看见在断言失败的情况下，打印出了自定义的断言失败信息，这样也就满足进行自动化测试时，实时有日志生成，方便查看，但是这样有个问题，你一旦把断言失败的异常捕获了，那该条测试执行结果就是OK状态，到最后统计时候就不容易看出是哪条执行失败了，只能查看日志；而且日志中也没有展示具体在哪一行有报错，所以这样的方式需要改进。 打印堆栈信息在断言失败时，把异常捕获，此时不会展示具体断言错误的信息，所以就需要添加堆栈信息打印：123456789def test_sum(): try: a = 1 b = 2 res = 5 assert_equal(res, a+b) except AssertionError as e: logging.error(&quot;断言失败，&#123;0&#125;不等于&#123;1&#125;&quot;.format(a+b, res) + str(traceback.print_exc()) 这样就可以获取堆栈信息，可以查看具体哪一行有报错，但是，这样堆栈的日志也只会打印在控制台上，不利于查看，好traceback.print_exc()可以指定日志输出路径，所以只需要修改为：123456789def test_sum(): try: a = 1 b = 2 res = 5 assert_equal(res, a+b) except AssertionError as e: logging.error(&quot;断言失败，&#123;0&#125;不等于&#123;1&#125;&quot;.format(a+b, res) + str(traceback.print_exc(file=open(&apos;test.log&apos;, &apos;a&apos;)))) 这样就可以完成，错误日志打印到文件中，其中a表示append。 邮件附件在进行自动化测试时，我们经常不仅需要日志文件，更多用到的是测试报告，在自动化用例执行完成之后以邮件形式发送到指定邮箱，只需要查看邮件的附件，就可以知晓用例执行情况；但是使用unittest或者nose时，一旦把断言异常捕获，那该条用例结果就是ok状态，实际上我们知道这条用例其实是执行失败了，这样，使用HTMLTestRunner或者是nosetests --with-html --html-file生成的html文件中，用例执行状态就都是success状态，很显然是不正确的。 所以我考虑的是，自己写自定义的测试报告样式，定义一个状态标志status，初始状态为success，在用例执行过程中，一旦捕获了断言异常，就将状态更新为fail，在测试报告中，执行结果栏展示的是该状态，这样就可以实现结果查看了。 自定义测试报告样式。。现在还是只有这个想法，未完待续，待实现了再来更新！（前端知识匮乏啊，越来越觉得自己弱。。。） 断言捕获，可以生成日志，在屏幕和日志文件中打印显示，但是，这样，所有的单元测试都是通过状态，没有一条fail； 断言不捕获，直接邮件发送结果，可以在邮件中看出具体哪条用例执行失败，可以点开失败，查看具体失败信息]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>自动化测试</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nose执行顺序]]></title>
    <url>%2F2018%2F02%2F07%2Fnose%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[nose单元测试执行顺序 nose和unittest一样，都可以在用例中指定setUp()和tearDown()（用户测试初始化以及测试结束后的操作），在nose中，package、module、class都可以设置setup()和teardown()； package中设置在package中设置，整个测试的运行期间只会执行一次（新建python package时，会生成一个init.py文件，在其中设置setUp()以及tearDown()即可） 用例中每次都执行setup及teardown在模块、类中执行顺序示例：新建Testexec.py文件，内容：1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/7 10:39&quot;&quot;&quot;from nose.plugins.skip import SkipTestclass TestClass(): def setUp(self): print(&quot;=============-My Testcase is setup-===========&quot;) def tearDown(self): print(&quot;============My Testcase is teardown===========&quot;) def test_fun1(self): print(&quot;This is test_fun1*******&quot;) pass def test_fun2(self): print(&quot;This is test_fun2=====&quot;) pass def test_fun3(self): print(&quot;This is test_fun3~~~~~~~~~&quot;) raise SkipTest def test_Fun1(self): print(&quot;This is test_Fun1***====***&quot;) pass 命令行执行nosetests：1nosetests -v -s Testexec.py 执行结果：12345678910111213141516171819202122&#123;lamb&#125; nosetests -v -s Testexec.py Testexec.TestClass.test_Fun1 ... =============-My Testcase is setup-=========== This is test_Fun1***====*** ============My Testcase is teardown=========== ok Testexec.TestClass.test_fun1 ... =============-My Testcase is setup-=========== This is test_fun1******* ============My Testcase is teardown=========== ok Testexec.TestClass.test_fun2 ... =============-My Testcase is setup-=========== This is test_fun2===== ============My Testcase is teardown=========== ok Testexec.TestClass.test_fun3 ... =============-My Testcase is setup-=========== This is test_fun3~~~~~~~~~ ============My Testcase is teardown=========== SKIP ---------------------------------------------------------------------- Ran 4 tests in 0.005s OK (SKIP=1) 可以看见在对每一个函数进行测试时，都执行了一次setUp()以及tearDown()；且用例执行顺序是：1test_Fun1 -&gt; test_fun1 -&gt; test_fun2 -&gt; test_fun3 其中test_fun3跳过了测试，执行顺序是按照先大写字母，再小写字母，然后再按阿拉伯数字排列的。 用例中只执行一次setup及teardown只需要在setUpClass()及tearDownClass()前加修饰器@classmethod即可：12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/7 10:39&quot;&quot;&quot;from nose.plugins.skip import SkipTestclass TestClass(): @classmethod def setUpClass(cls): print(&quot;只初始化一次setup=======&quot;) @classmethod def tearDownClass(cls): print(&quot;只teardown一次***********&quot;) def setUp(self): print(&quot;=============-My Testcase is setup-===========&quot;) def tearDown(self): print(&quot;============My Testcase is teardown===========&quot;) def test_fun1(self): print(&quot;This is test_fun1*******&quot;) pass def test_fun2(self): print(&quot;This is test_fun2=====&quot;) pass def test_fun3(self): print(&quot;This is test_fun3~~~~~~~~~&quot;) raise SkipTest def test_Fun1(self): print(&quot;This is test_Fun1***====***&quot;) pass 执行测试：1nosetests -v -s Testexec.py 执行结果：123456789101112131415161718192021222324&#123;lamb&#125; nosetests -v -s Testexec.py 只初始化一次setup======= Testexec.TestClass.test_Fun1 ... =============-My Testcase is setup-=========== This is test_Fun1***====*** ============My Testcase is teardown=========== ok Testexec.TestClass.test_fun1 ... =============-My Testcase is setup-=========== This is test_fun1******* ============My Testcase is teardown=========== ok Testexec.TestClass.test_fun2 ... =============-My Testcase is setup-=========== This is test_fun2===== ============My Testcase is teardown=========== ok Testexec.TestClass.test_fun3 ... =============-My Testcase is setup-=========== This is test_fun3~~~~~~~~~ ============My Testcase is teardown=========== SKIP 只teardown一次*********** ---------------------------------------------------------------------- Ran 4 tests in 0.006s OK (SKIP=1) 可以看见，setUpClass()以及tearDownClass都只执行了一次。在自动化测试中，可用来加载配置信息，只需要加载一次即可。]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>nose</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于python3的UI自动化框架搭建系列（一）]]></title>
    <url>%2F2018%2F02%2F07%2F%E5%9F%BA%E4%BA%8Epython3%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[基于python3搭建appium ui自动化测试框架尝试系列（一） 框架实现目标12345678910自动找设备，连接设备自动启动appium server使用yml编写用例配置信息储存在ini文件或conf文件中自定义log，断言失败截图用例框架使用unittest或者nose用例报告html，用例执行完成邮件发送，附件测试报告多线程执行用例，失败重跑机制android自动监控权限弹窗执行过程红性能捕获（adb或者其他形式） 基于ddt和nose的简单尝试当前我能实现的appium自动化测试还是需要手动去起appium server，这点后面需要改善，github上有很多已经实现了的框架，但是不是很想直接拿来用，还是希望能够自己去一点一点的搭建。 即使是简单的尝试，还是想尽量实现多模块。 配置模块邮箱配置：包含邮件收发件人，密码，服务器等信息配置；日志配置：包含日志级别，时间格式，流处理器等；文件夹创建：包含获取当前日期，时间，创建文件夹等； 其实在之前的博客中已经实现，就不再贴代码了： 邮箱配置日志配置 文件夹创建是为了在测试过程中，出现断言失败的场景进行截图保存，文件夹使用两层，上一层为当前日期，下一层为当前时间，截图保存名字为断言失败的名字：MakeDirs.py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#!/usr/bin/env python3# -*- coding: utf-8 -*-&quot;&quot;&quot;@author: kyle@time: 2018/2/7 10:17&quot;&quot;&quot;import time,osimport tracebackfrom datetime import datetime as dtdef getCurrentDate(): &quot;&quot;&quot;获取当前日期&quot;&quot;&quot; date = time.localtime() today = str(date.tm_year) + &quot;-&quot; + str(date.tm_mon) + &quot;-&quot; + str(date.tm_mday) return todaydef getCurrentTime(): &quot;&quot;&quot;获取当前时间&quot;&quot;&quot; time_str = dt.now() now = time_str.strftime(&apos;%H-%M-%S&apos;) return nowdef createDir(): &quot;&quot;&quot;获取当前文件所在路径绝对路径&quot;&quot;&quot; current_path = os.path.abspath(&apos;.&apos;) # 获取当前日期 today = getCurrentDate() # 构造以今天日期命名的目录的绝对路径 date_dir = os.path.join(current_path, today) print(date_dir) if not os.path.exists(date_dir): # 如果以今天日期命名的目录不存在则创建 os.mkdir(date_dir) # 获取当前时间字符串 now = getCurrentTime() # 构造以当前时间命名的目录的绝对路径 time_dir = os.path.join(date_dir, now) print(time_dir) if not os.path.exists(time_dir): # 如果以当前时间命名的目录不存在则创建 os.mkdir(time_dir) return time_dirdef takeScreenShot(driver, save_path, pic_name): &quot;&quot;&quot;截屏&quot;&quot;&quot; pic_path = os.path.join(save_path, str(pic_name) + &quot;.png&quot;) try: driver.get_screenshot_as_file(pic_path) except Exception as e: print(traceback.print_exc(), e) 执行模块实现思路是ddt获取数据对象，进行测试数据和代码分离，数据对象包含输入数据以及预期结果，对预期结果进行断言，实现测试实现。以百度搜索测试为例:DataDriverByObj.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#!/usr/bin/env python3# -*- coding: utf-8 -*-import ddt,timeimport traceback,loggingfrom DdtTools.Log import *from selenium import webdriverfrom nose.tools import assert_truefrom selenium.common.exceptions import NoSuchElementExceptionfrom datetime import datetime as dtfrom DdtTools.MailSend import MailSend@ddt.ddtclass TestDDTByObj(): &quot;&quot;&quot;数据驱动测试&quot;&quot;&quot; def __init__(self): &quot;&quot;&quot;初始化&quot;&quot;&quot; self.browser = webdriver.Chrome() @ddt.data( [u&quot;龙猫&quot;, &quot;宫崎骏&quot;], [u&quot;大话西游之月光宝盒&quot;, &quot;周星驰&quot;], [u&quot;卧虎藏龙&quot;, &quot;李安&quot;] ) @ddt.unpack def test_dataDrivenByObj(self, testdata, expectdata): url = &quot;https://www.baidu.com&quot; self.browser.get(url) # 隐式等待10s self.browser.implicitly_wait(10) try: # 定位搜索输入框，并输入测试数据 self.browser.find_element_by_id(&apos;kw&apos;).send_keys(testdata) # 定位搜索按键，单击 self.browser.find_element_by_id(&apos;su&apos;).click() time.sleep(3) # 断言期望结果是否出现在页面源码中 assert_true(expectdata in self.browser.page_source) except NoSuchElementException as e: logging.error(u&quot;查找的页面元素不存在，异常堆栈信息：&quot; + str(traceback.print_exc())) except AssertionError as e: info(u&quot;搜索：&#123;0&#125;，期望：&#123;1&#125;，失败&quot;.format(testdata, expectdata)) except Exception as e: logging.error(u&quot;未知错误，错误信息：&quot; + str(traceback.print_exc())) else: info(u&quot;搜索：&#123;0&#125;，期望：&#123;1&#125;，通过&quot;.format(testdata, expectdata)) time.sleep(2) self.browser.quit()if __name__ == &apos;__main__&apos;: # mail_subject, report_file mail_subject = &apos;NoseTests_测试报告_&#123;0&#125;&apos;.format(dt.now().strftime(&apos;%Y%m%d&apos;)) report_file = &apos;D:/bug_things/selenium/report/DDTByObj.html&apos; mailsend = MailSend(mail_subject, report_file) print(&apos;开始执行自动化测试...&apos;) os.system(&apos;nosetests -v &#123;0&#125; --with-html --html-file=&#123;1&#125;&apos;.format(__file__, report_file)) # 发送测试报告邮件 print(&apos;开始发送测试报告...&apos;) mailsend.sendMail() print(&apos;测试报告发送完成...&apos;) 后记差不多现在还是实现到现在的程度，后面至少可以优化，测试数据从xls，xml，excel，mysql中读取。（感觉自己现在实现的还是好弱。。。） 附上github上已经实现的框架，供参考，建议还是自己去一点一点的搭建，直接用个人觉得是有点功利的做法了，写代码，还是慢慢来的好。 ATXAuto_AnalysisAPPIUM]]></content>
      <categories>
        <category>自动化测试框架</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>appium</tag>
        <tag>自动化测试</tag>
        <tag>nose</tag>
        <tag>ddt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】python实现chrome伪装成M站]]></title>
    <url>%2F2018%2F02%2F06%2F%E3%80%90%E8%BD%AC%E3%80%91python%E5%AE%9E%E7%8E%B0chrome%E4%BC%AA%E8%A3%85%E6%88%90M%E7%AB%99%2F</url>
    <content type="text"><![CDATA[selenium实现Chrome伪装成M站，模拟手机端浏览器，并完成页面操作 原理：通过--user-agent=&quot;xxx&quot;来修改HTTP请求头部的Agent字符串，设置个人代理，使得PC端的Chrome浏览器伪装成手机浏览器，可以在地址栏输入”about:version”查看修改效果。 代码示例：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverfrom Log import *import timeclass TestMobile(): &quot;&quot;&quot;测试chrome伪装成手机M站&quot;&quot;&quot; def test_iPadChrome(self): # 添加chrome设置 info(u&quot;===========伪装成ipad==========&quot;) info(u&quot;=====开始设置ipad个人代理=====&quot;) options = webdriver.ChromeOptions() options.add_argument( &apos;--user-agent=Mozilla/5.0(iPad; CPU OS 5_0 like Mac OS X)&apos; &apos;AppleWebKit/534.46(KHTML, like Gecko) Version/5.1&apos; &apos;Mobile/9A334 Safari/7534.48.3&apos; ) browser = webdriver.Chrome(chrome_options=options) browser.get(&quot;https://www.baidu.com&quot;) time.sleep(3) browser.find_element_by_id(&apos;kw&apos;).send_keys(&quot;iPad&quot;) time.sleep(1) # 通过在Chrome浏览器地址栏输入about:version，查看伪装效果 browser.get(&quot;about:version&quot;) # 人工确认“用户代理”项配置信息是否和设置一致 time.sleep(10) info(u&quot;==========伪装ipad成功==========&quot;) browser.quit() def test_iPhoneChrome(self): # 添加chrome配置 info(u&quot;==========测伪装成iphone==========&quot;) info(u&quot;=====设置iphone个人代理=====&quot;) options = webdriver.ChromeOptions() options.add_argument( &apos;--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X)&apos; &apos;AppleWebKit/534.46(KHTML, like Gecko) Version/5.1&apos; &apos;Mobile/9A334 Safari/7534.48.3&apos; ) browser = webdriver.Chrome(chrome_options=options) browser.get(&quot;https://www.baidu.com&quot;) time.sleep(3) # 定位搜索框 browser.find_element_by_id(&quot;index-kw&quot;).send_keys(&quot;iPhone&quot;) time.sleep(1) browser.get(&quot;about:version&quot;) time.sleep(10) info(u&quot;==========伪装成iphone成功==========&quot;) browser.quit() def testAndroid236Chrome(self): info(u&quot;==========测试伪装成android2.3.6==========&quot;) info(u&quot;=====设置android2.3.6个人代理=====&quot;) options = webdriver.ChromeOptions() options.add_argument( &apos;--user-agent=Mozilla/5.0 (Linux; U; Android 2.3.5; en-us)&apos; &apos;Nexus S Build/GRK39F) AppleWebKit/533.1&apos; &apos;(KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&apos; ) brower = webdriver.Chrome(chrome_options=options) brower.get(&quot;https://www.baidu.com&quot;) # 定位搜索输入框 brower.find_element_by_id(&quot;index-kw&quot;).send_keys(&quot;Android 2.3.6&quot;) time.sleep(1) brower.get(&quot;about:version&quot;) time.sleep(10) info(u&quot;==========伪装成android2.3.6成功==========&quot;) brower.quit() def testAndroid402Chrome(self): info(u&quot;==========测试伪装成android4.0.2==========&quot;) info(u&quot;=====设置android4.0.2个人代理&quot;) options = webdriver.ChromeOptions() options.add_argument( &apos;--user-agent=Mozilla/5.0 (Linux; U; Android 4.0.2;&apos; &apos;en-us; Galaxy Nexus Build/ICL53F) AppleWebKit/534.30&apos; &apos;(KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&apos; ) browser = webdriver.Chrome(chrome_options=options) browser.get(&quot;http://www.baidu.com&quot;) time.sleep(3) browser.find_element_by_id(&quot;index-kw&quot;).send_keys(&quot;Android 4.0.2&quot;) time.sleep(1) browser.get(&quot;about:version&quot;) time.sleep(10) info(u&quot;==========伪装成android4.0.2成功==========&quot;) browser.quit()if __name__ == &apos;__main__&apos;: testmobile = TestMobile() testmobile.testAndroid402Chrome() testmobile.testAndroid236Chrome() testmobile.test_iPhoneChrome() testmobile.test_iPadChrome() 偶然看见这个实现，目前没想到应用场景。。直接使用appium进行移动自动化好像也能实现啊。。（可能工作中遇见的太少了）]]></content>
      <categories>
        <category>selenium</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[logging模块使用简介]]></title>
    <url>%2F2018%2F02%2F02%2Flogging%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[python3日志模块，logging使用简介 日志打印python3使用logging进行日志打印，很简单，直接引logging包即可：123456789import logginglogging.warning(&quot;This is warning message&quot;)logging.critical(&quot;This is critical message&quot;)logging.error(&quot;This is error message&quot;)# 打印结果WARNING:root:This is warning messageCRITICAL:root:This is critical messageERROR:root:This is error message 默认情况下只显示了大于等于WARNING级别的日志。日志级别：1critical(50) &gt; error(40) &gt; warning(30) &gt; info(20) &gt; debug(10) 简单应用通过logging.basicConfig函数对日志的输出格式及方式做相关配置1234567891011121314151617#!/usr/bin/env python3# -*- coding: utf-8 -*-import logginglogging.basicConfig( filename=&apos;test.log&apos;, format=&apos;%(asctime)s - %(name)s - %(levelname)s - %(module)s: %(message)s&apos;, datefmt=&apos;%Y-%m-%d %H-%M-%S&apos;, level=logging.DEBUG, #level=10)logging.critical(&quot;This ia critical message&quot;)logging.error(&quot;This is error message&quot;)logging.warning(&quot;This is warning message&quot;)logging.info(&quot;This is info message&quot;)logging.debug(&quot;This is debug message&quot;) logging.basicConfig函数各参数 1.filename：指定日志文件名2.filemode：和file函数意义相同，指定日志文件的打开模式，’w’或’a’；默认为’a’表示“append”。3.format：指定输出的格式和内容，format可以输出很多有用信息： 12345678910111213141516format参数中可能用到的格式化串：%(name)s Logger的名字%(levelno)s 数字形式的日志级别%(levelname)s 文本形式的日志级别%(pathname)s 调用日志输出函数的模块的完整路径名，可能没有%(filename)s 调用日志输出函数的模块的文件名%(module)s 调用日志输出函数的模块名%(funcName)s 调用日志输出函数的函数名%(lineno)d 调用日志输出函数的语句所在的代码行%(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示%(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数%(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒%(thread)d 线程ID。可能没有%(threadName)s 线程名。可能没有%(process)d 进程ID。可能没有%(message)s用户输出的消息 4.datefmt：指定时间格式，同time.strftime()5.level：设置日志级别，默认为logging.WARNING6.stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略 模块介绍若要对logging进行更多灵活的控制，必须了解Logger，Handler，Formatter，Filter的概念：logger提供了应用程序可以直接使用的接口；handle将（logger创建的）日志记录发送到合适的目的输出；filter提供了细度设备来决定输出哪条日志记录；formatter决定日志记录的最终输出格式； Logger每个程序在输出信息之前都要获得一个Logger。Logger通常对应了程序的模块名，比如聊天工具的图形界面模块可以这样获得它的Logger：LOG=logging.getLogger(”chat.gui”)而核心模块可以这样：LOG=logging.getLogger(”chat.kernel”) Logger.setLevel(lel):指定最低的日志级别，低于lel的级别将被忽略。debug是最低的内置级别，critical为最高Logger.addFilter(filt)、Logger.removeFilter(filt):添加或删除指定的filterLogger.addHandler(hdlr)、Logger.removeHandler(hdlr)：增加或删除指定的handlerLogger.debug()、Logger.info()、Logger.warning()、Logger.error()、Logger.critical()：可以设置的日志级别 Handlerhandler对象负责发送相关的信息到指定目的地。Python的日志系统有多种Handler可以使用。有些Handler可以把信息输出到控制台，有些Logger可以把信息输出到文件，还有些Handler可以把信息发送到网络上。如果觉得不够用，还可以编写自己的Handler。可以通过addHandler()方法添加多个多handlerHandler.setLevel(lel):指定被处理的信息级别，低于lel级别的信息将被忽略Handler.setFormatter()：给这个handler选择一个格式Handler.addFilter(filt)、Handler.removeFilter(filt)：新增或删除一个filter对象 每个Logger可以附加多个Handler。接下来我们就来介绍一些常用的Handler： 1) logging.StreamHandler使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息。它的构造函数是:StreamHandler([strm])其中strm参数是一个文件对象。默认是sys.stderr 2) logging.FileHandler和StreamHandler类似，用于向一个文件输出日志信息。不过FileHandler会帮你打开这个文件。它的构造函数是：FileHandler(filename[,mode])filename是文件名，必须指定一个文件名。mode是文件的打开方式。参见Python内置函数open()的用法。默认是’a’，即添加到文件末尾。 3) logging.handlers.RotatingFileHandler这个Handler类似于上面的FileHandler，但是它可以管理文件大小。当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建 一个新的同名日志文件继续输出。比如日志文件是chat.log。当chat.log达到指定的大小之后，RotatingFileHandler自动把文件改名为chat.log.1。不过，如果chat.log.1已经存在，会先把chat.log.1重命名为chat.log.2。。。最后重新创建 chat.log，继续输出日志信息。它的构造函数是：RotatingFileHandler( filename[, mode[, maxBytes[, backupCount]]])其中filename和mode两个参数和FileHandler一样。maxBytes用于指定日志文件的最大文件大小。如果maxBytes为0，意味着日志文件可以无限大，这时上面描述的重命名过程就不会发生。backupCount用于指定保留的备份文件的个数。比如，如果指定为2，当上面描述的重命名过程发生时，原有的chat.log.2并不会被更名，而是被删除。 4) logging.handlers.TimedRotatingFileHandler这个Handler和RotatingFileHandler类似，不过，它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就 自动创建新的日志文件。重命名的过程与RotatingFileHandler类似，不过新的文件不是附加数字，而是当前时间。它的构造函数是：TimedRotatingFileHandler( filename [,when [,interval [,backupCount]]])其中filename参数和backupCount参数和RotatingFileHandler具有相同的意义。interval是时间间隔。when参数是一个字符串。表示时间间隔的单位，不区分大小写。它有以下取值：S 秒M 分H 小时D 天W 每星期（interval==0时代表星期一）midnight 每天凌晨 实例日志的一般操作顺序为：1.创建一个流类型handler用于输出日志到控制台(控制器)2.定义输出日志级别3.定义handler的输出格式formatter4.将handler添加到logging对象 同时输出日志到控制台和文件1234567891011121314151617181920212223242526#!/usr/bin/env python3# -*- coding: utf-8 -*-import logginglogging.basicConfig( filename=&apos;test.log&apos;, format=&apos;%(asctime)s - %(name)s - %(levelname)s -%(module)s: %(message)s&apos;, datefmt=&apos;%Y-%m-%d %H-%M-%S&apos;, level=10)# 定义一个StreamHandler(日志流处理器)，将INFO级别或更高的日志信息打印到标准错误，并将其添加到当前的日志处理对象console = logging.StreamHandler()console.setLevel(logging.INFO)# 格式化，设置控制台的日志输出格式formatter = logging.Formatter(&apos;%(name)-12s: %(levelname)-8s %(message)s&apos;)# 定义控制器的日志输出格式console.setFormatter(formatter)# 将控制器添加到logging对象logging.getLogger(&apos;&apos;).addHandler(console)logging.critical(&quot;This is critical message&quot;)logging.error(&quot;This is error message&quot;)logging.warning(&quot;This is warning message&quot;)logging.info(&quot;This is info message&quot;)logging.debug(&quot;This is debug message&quot;) 配置文件用法类似于java中的log4j的logging.config，我们也可以自己配置logger.conf文件： Logger.conf1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950###############################################[loggers]keys=root,example01,example02[logger_root]level=DEBUGhandlers=hand01,hand02[logger_example01]handlers=hand01,hand02qualname=example01propagate=0[logger_example02]handlers=hand01,hand03qualname=example02propagate=0###############################################[handlers]keys=hand01,hand02,hand03[handler_hand01]class=StreamHandlerlevel=INFOformatter=form02args=(sys.stderr,)[handler_hand02]class=FileHandlerlevel=DEBUGformatter=form01args=(&apos;D:/bug_things/selenium/logs/AutoTest.log&apos;, &apos;a&apos;, &apos;utf-8&apos;)[handler_hand03]class=handlers.RotatingFileHandlerlevel=INFOformatter=form02args=(&apos;D:/bug_things/selenium/logs/AutoTest.log&apos;, &apos;a&apos;, 10*1024*1024, 5, &apos;utf-8&apos;)###############################################[formatters]keys=form01,form02[formatter_form01]format=%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)sdatefmt=%a, %d %b %Y %H:%M:%S[formatter_form02]format=%(name)-12s: %(levelname)-8s %(message)sdatefmt=%Y %m %d %H %M %S 封装方法将配置文件中定义的日志打印的配置进行封装，生成debug，info，message方法：Log.py1234567891011121314151617181920#!/usr/bin/env python3# -*- coding: utf-8 -*-import logging.configlogging.config.fileConfig(&quot;Logger.conf&quot;)def debug(message): # 打印debug级别的日志方法 logging.debug(message)def warning(message): # 打印warning级别的日志方法 logging.warning(message)def info(message): # 打印info级别的日志方法 logging.info(message) 应用以百度搜索为例:BaiDu.py1234567891011121314151617181920212223242526272829#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverfrom Log import *import timeclass TestBaiDuSearch(): def __init__(self): # 启动浏览器 self.browser = webdriver.Chrome() def test_baidu_search(self): info(u&quot;===================搜索====================&quot;) url = &quot;https://www.baidu.com&quot; self.browser.get(url) info(u&quot;访问百度首页&quot;) self.browser.find_element_by_id(&apos;kw&apos;).send_keys(u&quot;自动化测试&quot;) info(u&quot;在输入框中搜索关键字“自动化测试”&quot;) self.browser.find_element_by_id(&apos;su&apos;).click() info(u&quot;单击搜索按键&quot;) info(u&quot;=================测试执行结束================&quot;) time.sleep(3) self.browser.quit()if __name__ == &apos;__main__&apos;: testbaidu = TestBaiDuSearch() testbaidu.test_baidu_search() 执行BaiDu.py文件，在D:/bug_things/selenium/logs目录下会生成AutoTest.log日志文件，文件内容：12345Fri, 02 Feb 2018 17:10:52 Log.py[line:20] INFO ===================搜索====================Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO 访问百度首页Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO 在输入框中搜索关键字“自动化测试”Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO 单击搜索按键Fri, 02 Feb 2018 17:10:53 Log.py[line:20] INFO =================测试执行结束================ 同时控制台打印信息：12345root : INFO ===================搜索====================root : INFO 访问百度首页root : INFO 在输入框中搜索关键字“自动化测试”root : INFO 单击搜索按键root : INFO =================测试执行结束================ 参考文章]]></content>
      <categories>
        <category>python黑科技</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python3</tag>
        <tag>logging</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[字符编码简单总结]]></title>
    <url>%2F2018%2F02%2F02%2F%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[python字符串和编码 首先，字符串是一种数据类型，我们还经常会用到，然后，最常见的字符串问题就是字符编码问题，经常会看见文件打开一堆乱码，然后手工转utf-8啥的。 字符编码计算机基础计算机能够处理的只有数字，所以其他类型的数据想要被计算机识别并处理，首先要进行的就是字符编码，转换成数字之后处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是(11111111,二进制的255)，如果要表示更大的整数，就必须更多的字节，比如两个字节可以表示最大整数是65535。 上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 ASCII 码，一直沿用至今。ASCII 码一共规定了128个字符的编码，比如空格SPACE是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为0。 字库表字库表是一个相当于所有可读或者可显示字符的数据库，字库表决定了整个字符集能够展现表示的所有字符的范围。 字符集字符集是一个系统支持的所有抽象字符的集合。常见的字符集有ASCII，UTF-8，UTG-16，GB2313等。 字符编码字符编码可以看成是一套规则，目的就是在符号集合和数字系统直接建立对应关系。常见的字符编码有Unicode，ASCII，UTF-8等 三者关系字库表可以看成是一个全球统一的可读可用的字符库，但是实际使用过程中，很少需要用到这么多字符，例如，中文系统基本就用不到日文的字符，所以也就不需要日文字符的那一部分集合；因此就会诞生一个个的类似于定制的字符集合，这就是字符集，集合中包含了数据和字母的一个个对应关系，这就是字符编码。以ASCII为例： ASCIIASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本EASCII则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被Unicode追上的迹象），并等同于国际标准ISO/IEC 646。 ASCII字符集：主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）。 ASCII编码：将ASCII字符集转换为计算机可以接受的数字系统的数的规则。使用7位（bits）表示一个字符，共128字符；但是7位编码的字符集只能支持128个字符，为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用8位（bits）表示一个字符，共256字符。 python字符编码ASCII是出现比较早的字符编码，但是其中只包含了数字和英文大小写字符，对于中文，日文等字符就不适用了，国内学者为了能够完成中文编码，就指定了GB2312编码，同样的，很多国家都有指定自己的编码，这样就会遇到一个问题，中文编码到日文编码的环境查看，会发生乱码，因为根本就不支持这样的字符，为了解决这个问题，一个统一的编码就诞生了Unicode，Unicode编码不同于ASCII的使用一个字节表示一个字符，它使用的是两个字节表示一个字符（中文至少需要两个字节），生僻字符就需要4个字符。字母’A’用ASCII编码，十进制是65，二进制是01000001；用Unicode编码结果是00000000 01000001。当全部都使用Unicode编码时，乱码问题肯定是得到解决了，但是有个问题，Unicode编码时连个字节表示的一个字符，那么就会比原来使用ASCII编码多出了至少一倍的内存空间占用，怎么都觉得很亏。所以，为了节约内存空间，又出现了把Unicode编码转换为“可变长编码”的utf-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。 下面来弄清楚python的字符编码：在python3中，字符串是以Unicode编码的，也就是说，支持多语言。由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。Python对bytes类型的数据用带b前缀的单引号或双引号表示：1x = b&apos;ABC&apos; 注意区分’ABC’和b’ABC’，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。纯英文的str可以用ASCII编码为bytes，内容是一样的，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。 编码及解码首先python使用的是Unicode编码，字符串进行网络或者磁盘存储时，需要先编码成指定类型bytes，使用encode()方法即可。例如：12print(&apos;中文&apos;.encode(&apos;utf-8&apos;))b&apos;\xe4\xb8\xad\xe6\x96\x87&apos; 反过来，从网络或者磁盘上读取字节流，那么读到的数据是bytes，要把bytes转换为str，就需要使用decode()方法进行解码，例如：12print(b&apos;\xe4\xb8\xad\xe6\x96\x87&apos;.decode(&apos;utf-8&apos;))中文 在进行日常python编程中，在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。 由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上:12#!/usr/bin/env python3# -*- coding: utf-8 -*- pycharm设置方法：File-Settings-Editor-File and Code Templates-Python Script设置中添加上这两行即可。 以前曾经写过一篇博，关于设置python编码的:python编码 参考链接 廖雪峰的python教程字符集合字符编码 后记：由于昨天公司发生的很无语加无理取闹的一些事，整个办公室氛围都是压抑的，网上的教程资料也没怎么细致的看进去，写出来的总结也就是乱七八糟的，估计静下来之后我自己都看不懂。。。以后再来修改吧。唉，做技术的，干嘛不追求技术的进步，弄一些有的没的办公室政治呢，有意思吗？]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现断言失败截图]]></title>
    <url>%2F2018%2F02%2F02%2F%E5%AE%9E%E7%8E%B0%E6%96%AD%E8%A8%80%E5%A4%B1%E8%B4%A5%E6%88%AA%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[python基于selenium进行自动化测试，实现断言失败进行截图 进行自动化测试过程中，经常会遇见断言失败，时候补查失败的场景，要么是保存日志，要么就是保存失败的截图。尝试实现，在断言失败时候，加入实时截图： 编码出错遇到问题：截图文件名编码格式转换时候，会报错（以下写法在python 2.7可以使用）1pic_path = os.path.join(save_path, str(pic_name).decode(&quot;utf-8&quot;).encode(&quot;gbk&quot;) + &quot;.png&quot;) 报错：1AttributeError: &apos;str&apos; object has no attribute &apos;decode&apos; 查找原因：既然python 2.7可以正常执行，那就应该是python 3对于编码进行了变更。 Stack Overflow上大家好像都是经常踩我踩过的所有坑..又找到答案了：这位大哥的回答：1234Begin with Python 3, all string is unicode object. a = &apos;Happy New Year&apos; # Python 3 b = unicode(&apos;Happy New Year&apos;) # Python 2the code before are same. So I think you should remove the .decode(&apos;utf-8&apos;). Because you have already get the unicode object. python3的普通字符串是str，所以python3的str就相当于python2的Unicode。大致意思好像就是python3使用的str类型并不关心你最终是什么编码，无论是utf-8还是gb2312，它只是用Unicode字符集编码来表示每一个字符，直到输出到文件流，需要转换为bytes类型时，才用encode指定具体的编码实现方式。 python的中间编码是Unicode，所以python2就需要先进行解码（decode）到中间编码，再进行编码（encode）到指定编；，而python3直接可以转换到指定编码（encode）1在python3中，str-- encode -&gt; bytes-- decode -&gt; str python3编码系统编码123456789101112import sys# 系统默认编码print(sys.getdefaultencoding())# 字符串编码s = &quot;中文&quot;s_utf8 = s.encode(&apos;utf-8&apos;)print(type(s))print(type(s_utf8))utf-8&lt;class &apos;str&apos;&gt;&lt;class &apos;bytes&apos;&gt; 可以看到，python3的系统编码就是utf-8，为了避免自找麻烦，牢记使用utf-8即可！所以上述报错代码可以更改为：1pic_path = os.path.join(save_path, str(pic_name) + &quot;.png&quot;) 断言失败截图实例实现目标是在进行自动化测试过程中，一旦发生断言失败，就根据当前时间，在工程下创建名称为当前日期的目录，，目录下创建名称为当前时间的文件夹，文件夹中保存断言失败的屏幕截图 获取当前日期和时间123456789101112131415161718192021#!/usr/bin/env python3# -*- coding: utf-8 -*-import timefrom datetime import datetime as dt&quot;&quot;&quot;用于获取当前的日期以及时间用于生成保存截图文件目录名&quot;&quot;&quot;def current_date(): date = time.localtime() # 构造今天的日期字符串 today = str(date.tm_year) + &quot;-&quot; + str(date.tm_mon) + &quot;-&quot; + str(date.tm_mday) return todaydef current_time(): time_str = dt.now() # 构建当期时间字符串 now = time_str.strftime(&apos;%H-%M-%S&apos;) return now 创建目录和文件夹123456789101112131415161718192021222324252627282930#!/usr/bin/env python3# -*- coding: utf-8 -*-from DateUtil import current_time, current_dateimport os&quot;&quot;&quot;用于创建目录，用于存放异常截图&quot;&quot;&quot;def create_dir(): # 获得当前文件所在目录的绝对路径 current_path = os.path.abspath(&apos;.&apos;) # 获取今天的日期字符串 today = current_date() # 构造以今天日期命名的目录的绝对路径 date_dir = os.path.join(current_path, today) print(date_dir) if not os.path.exists(date_dir): # 如果以今天日期命名的目录不存在则创建 os.mkdir(date_dir) # 获取当前的时间字符串 now = current_time() # 构造以当前时间命名的目录的绝对路径 time_dir = os.path.join(date_dir, now) print(time_dir) if not os.path.exists(time_dir): # 如果以当前时间命名的目录不存在则创建 os.mkdir(time_dir) return time_dir 百度搜索示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverfrom FileUtil import create_dirfrom nose.tools import assert_trueimport time,osimport traceback# 创建存放异常截图的目录，并得到本次实例中存放图片目录的绝对路径，作为全局变量，供本次所有测试用例调用pic_dir = create_dir()def take_screenshot(driver, save_path, pic_name): # 封装截屏方法 # 构造屏幕截图路径及图片名 # 因为windows默认编码是GBK，而传入的图片名是utf-8编码，所以需要进行转码，以便让图片名中的中文字符能够正常显示 pic_path = os.path.join(save_path, str(pic_name) + &quot;.png&quot;) try: # 调用webdriver提供的get_screenshot_as_file()方法，将截取的屏幕图片保存为本地文件 driver.get_screenshot_as_file(pic_path) except Exception as e: print(traceback.print_exc(), e)class TestFailCaptureScreen(): def __init__(self): &quot;&quot;&quot;启动浏览器&quot;&quot;&quot; self.browser = webdriver.Chrome() def test_baidu_search(self): url = &quot;https://www.baidu.com&quot; self.browser.get(url) try: self.browser.find_element_by_id(&apos;kw&apos;).send_keys(u&quot;自动化测试&quot;) self.browser.find_element_by_id(&apos;su&apos;).click() time.sleep(3) # 断言页面的代码中是否存在“自动化测试框架_百度百科”这几个字 assert_true(u&quot;纯净方糖&quot; in self.browser.page_source) # 页面中没有断言的几个字，所以会触发except语句的执行，并触发截图操作 except AssertionError as e: take_screenshot(self.browser, pic_dir, e) except Exception as e: take_screenshot(self.browser, pic_dir, e) time.sleep(2) self.browser.quit()if __name__ == &apos;__main__&apos;: testfailscreen = TestFailCaptureScreen() testfailscreen.test_baidu_search() 感觉是时候研究一波python字符编码了…]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现自动化测试数据分离]]></title>
    <url>%2F2018%2F02%2F01%2F%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%88%86%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[使用数据分离自动化测试，测试执行完成自动邮件发送 配置文件配置文件中的内容为工程所有配置信息，各个模块的元素定位的方法以及值，服务器（应用服务器和数据库服务器）配置信息，用户账号密码等信息 实例，cashier.ini 1234567891011121314[login]storeNo = id &gt; com.anmav.cashierdesk:id/etStoreNousername = id &gt; com.anmav.cashierdesk:id/login_accountEdtpwd = id &gt; com.anmav.cashierdesk:id/login_paswEdtlogin = id &gt; com.anmav.cashierdesk:id/tvLoginlogin_store = ***login_user = ***login_pwd = ***[mailmsg]mail_user = ***mail_pwd = ***mail_to = ***mail_host = *** 该配置文件包含了login模块进行元素定位需要的方法以及值，在工程中进行元素定位值，只需要使用configparser模块完成配置文件读取即可。 邮件发送数据分离封装数据分离之后的邮件发送类(MailSend.py)：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/usr/bin/env python3# -*- coding: utf-8 -*-from email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartimport smtplibimport configparserimport osclass MailSend(): &quot;&quot;&quot;邮件发送&quot;&quot;&quot; def __init__(self, mail_subject, report_file): self.mail_subject = mail_subject self.report_file = report_file self.settings = os.path.abspath(&apos;..&apos;) + &quot;\cashier_conf\cashier_setting.ini&quot; def send_mail(self): &quot;&quot;&quot;读取测试报告&quot;&quot;&quot; cf = configparser.ConfigParser() cf.read(self.settings) cf.sections() # 获取邮箱发件人，密码，收件人，邮件服务器 mail_user = cf.get(&apos;mailmsg&apos;, &apos;mail_user&apos;) mail_pwd = cf.get(&apos;mailmsg&apos;, &apos;mail_pwd&apos;) mail_to = cf.get(&apos;mailmsg&apos;, &apos;mail_to&apos;) mail_host = cf.get(&apos;mailmsg&apos;, &apos;mail_host&apos;) # 发送邮件配置 with open(self.report_file, &apos;r&apos;, encoding=&apos;utf-8&apos;) as f_obj: content = f_obj.read() msg = MIMEMultipart(&apos;mixed&apos;) # 添加邮件内容 msg_html = MIMEText(content, &apos;html&apos;, &apos;utf-8&apos;) msg.attach(msg_html) # 添加附件 msg_attachment = MIMEText(content, &apos;html&apos;, &apos;utf-8&apos;) msg_attachment[&quot;Content-Disposition&quot;] = &apos;attachment; filename=&#123;0&#125;&apos;.format(self.report_file) msg.attach(msg_attachment) msg[&apos;Subject&apos;] = self.mail_subject msg[&apos;Form&apos;] = mail_user msg[&apos;To&apos;] = mail_to try: # 连接邮箱服务器 s = smtplib.SMTP() s.connect(mail_host) # 登录 s.login(mail_user, mail_pwd) # 发送邮件 s.sendmail(mail_user, mail_to, msg.as_string()) s.quit() except Exception as e: print(&quot;发送邮件异常：&quot;, e) 元素定位数据分离封装了元素定位的方法（find_element_by…），实现在工程中进行元素定位时，直接调用方法(GetElement.py)：123456789101112131415161718192021222324252627282930#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium.webdriver.support.ui import WebDriverWaitimport osimport configparserimport tracebackclass GetElement(): &quot;&quot;&quot;获取元素定位方法和值&quot;&quot;&quot; def __init__(self): # 读取配置文件 self.settings = os.path.abspath(&apos;..&apos;) + &quot;/cashier_conf/cashier_setting.ini&quot; self.cf = configparser.ConfigParser() self.cf.read(self.settings) self.cf.sections() def get_elementId(self, driver, webSiteName, webelement): try: # 获取配置文件中的定位方法以及定位元素 webElemnt = self.cf.get(webSiteName, webelement).split(&apos;&gt;&apos;) webelement_method = webElemnt[0].strip() webelement_expression = webElemnt[1].strip() element = WebDriverWait(driver, 10).until\ (lambda x: x.find_element(webelement_method, webelement_expression)) except Exception as e: print(traceback.print_exc(), e) else: return element 自动化测试实现数据分离使用数据分离的方式完成系统登录的自动化测试，方便维护，后期只需要维护cashier_setting.ini文件即可(testlogin.py)。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#!/usr/bin/env python3# -*- coding: utf-8 -*-import configparser, osimport tracebackfrom datetime import datetime as dtfrom appium import webdriverfrom nose.tools import assert_truefrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.common.exceptions import NoSuchElementException,TimeoutExceptionfrom cashier_tools.GetElement import GetElementfrom cashier_tools.MailSend import MailSendclass Login(): &quot;&quot;&quot;登录&quot;&quot;&quot; def __init__(self): # 初始化，配置环境 self.desired_caps = &#123;&#125; self.desired_caps[&apos;platformName&apos;] = &apos;Android&apos; self.desired_caps[&apos;platformVersion&apos;] = &apos;5.1&apos; self.desired_caps[&apos;deviceName&apos;] = &apos;Android Emulator&apos; self.desired_caps[&apos;noReset&apos;] = True self.desired_caps[&apos;appPackage&apos;] = &apos;com.anmav.cashierdesk&apos; self.desired_caps[&apos;appActivity&apos;] = &apos;com.anmav.cashierdesk.login.activity.LoginActivity&apos; self.driver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, self.desired_caps) self.elementid = GetElement() def test_login(self): settings = os.path.abspath(&apos;..&apos;) + &quot;/cashier_conf/cashier_setting.ini&quot; cf = configparser.ConfigParser() cf.read(settings) cf.sections() # 定位门店编号输入框 storeno = self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;storeNo&apos;) storeno.click() storeno.clear() store_no = cf.get(&apos;login&apos;, &apos;login_store&apos;) storeno.send_keys(store_no) self.driver.hide_keyboard() # 定位用户名 username = self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;username&apos;) username.click() username.clear() user = cf.get(&apos;login&apos;, &apos;login_user&apos;) username.send_keys(user) self.driver.hide_keyboard() # 定位密码 pwd = self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;pwd&apos;) pwd.click() pwd.clear() password = cf.get(&apos;login&apos;, &apos;login_pwd&apos;) pwd.send_keys(password) self.driver.hide_keyboard() # 登录 self.elementid.get_elementId(self.driver, &apos;login&apos;, &apos;login&apos;).click() try: # 显示等待，门店名称出现 WebDriverWait(self.driver, 10).until(lambda x:x.find_element_by_id(cf.get(&apos;order&apos;, &apos;store_name&apos;))) # 断言登录成功 assert_true(u&quot;点餐&quot; in self.driver.page_source) except NoSuchElementException as e: print(traceback.print_exc(), e) except TimeoutException as e: print(traceback.print_exc(), e)if __name__ == &apos;__main__&apos;: mail_subject = &apos;NoseTests_测试报告_&#123;0&#125;&apos;.format(dt.now().strftime(&apos;%Y%m%d&apos;)) report_file = &apos;Login.html&apos; mailsend = MailSend(mail_subject, report_file) print(&apos;开始执行自动化测试...&apos;) os.system(&apos;nosetests -v &#123;0&#125; --with-html --html-file=&#123;1&#125;&apos;.format(__file__, report_file)) # 发送测试报告邮件 print(&apos;开始发送测试报告...&apos;) mailsend.send_mail() print(&apos;测试报告发送成功&apos;) 单独的邮件发送模块可参照之前一篇：python实现自动化测试报告邮件实时发送]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>自动化测试</tag>
        <tag>数据分离</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】python元类介绍]]></title>
    <url>%2F2018%2F01%2F31%2F%E3%80%90%E8%BD%AC%E3%80%91python%E5%85%83%E7%B1%BB%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[python元类 转自stackoverflow 神级人物e-satis的神级回复，以及国内翻译组汉化结果： 写在前面：经常在stackoverflow上看见一些神一般的回答，也看到过很多次创建Foo类，特意上维基百科搜了，解释如下：123foobar是计算机程序领域里的术语炒作，并无实际用途和参考意义。 在计算机程序设计与计算机技术的相关文档中，术语foobar是一个常见的无名氏化名，常被作为“伪变量”使用。单词“foobar”或分离的“foo”与“bar”常出现于程序设计的案例中，如同Hello World程序一样，它们常被用于向学习者介绍某种程序语言。“foo”常被作为函数／方法的名称，而“bar”则常被用作变量名。 正题类也是对象（Classes as objects）在理解元类之前，需要先掌握Python中的类。Python中类的概念借鉴于Smalltalk，这显得有些奇特。在大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段。在Python中这一点仍然成立：123456class ObjectCreator(object): passmy_object = ObjectCreator()print(my_object)&lt;__main__.ObjectCreator object at 0x000001899B36E550&gt; 但是python中的类远不止如此。类同样也是一种对象 这个对象（类）自身用创建对象（类实例）的能力，而这就是为什么它是一个类的原因。但是，它本质上仍然是一个对象，所以，你可以对它进行如下操作：1、将它赋值给一个变量2、拷贝它3、为它增加属性4、将它作为函数参数进行传递 示例：12345678910111213141516171819202122class ObjectCreator(object): pass# 打印一个类，因为它其实也是一个对象print(ObjectCreator)&lt;class &apos;__main__.ObjectCreator&apos;&gt;# 将类作为参数传给函数def echo(o): print(o)echo(ObjectCreator)&lt;class &apos;__main__.ObjectCreator&apos;&gt;# 为类增加属性print(hasattr(ObjectCreator, &apos;new_attribute&apos;))ObjectCreator.new_attribute = &apos;foo&apos;print(hasattr(ObjectCreator, &apos;new_attribute&apos;))print(ObjectCreator.new_attribute)FalseTruefoo# 将类赋值给一个变量ObjectCreatorMirror = ObjectCreatorprint(ObjectCreatorMirror())&lt;__main__.ObjectCreator object at 0x000002C21DF1E550&gt; 动态地创建类因为类也是对象，你可以在运行时动态地创建它们，就想其他任何时候一样。首先，你可以在函数中创建类，使用class关键字即可。1234567891011121314def choose_class(name): if name == &apos;foo&apos;: class Foo(object): pass return Foo else: class Bar(object): pass return BarMyClass = choose_class(&apos;foo&apos;)print(MyClass)print(MyClass())&lt;class &apos;__main__.choose_class.&lt;locals&gt;.Foo&apos;&gt;&lt;__main__.choose_class.&lt;locals&gt;.Foo object at 0x000002B57928B518&gt; 但这还不够动态，因为你仍然需要自己编写整个类的代码。由于类也是对象，所以它们必须是用过什么东西来生成的才对。当你使用class关键字时，Python解释器自动创建这个对象，但就和python中的大多数事情一样，python仍然提供给你手动处理的方法。內建函数type，可以让你知道一个对象的类型是什么：12345678print(type(1))print(type(&quot;1&quot;))print(type(ObjectCreator))print(type(ObjectCreator()))&lt;class &apos;int&apos;&gt;&lt;class &apos;str&apos;&gt;&lt;class &apos;type&apos;&gt;&lt;class &apos;__main__.ObjectCreator&apos;&gt; 这里，type有一种完全不同的能力，它也能动态的创建类。type可以接受一个类的描述作为参数，然后返回一个类（同一个函数拥有两种完全不同的用法是一件很傻的事情，但这在Python中是为了保持向后的兼容性） type可以像这样工作：1type(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称知道）) 比如如下的代码：12class MyShinyClass(object): pass 可以手动像这样创建：123456# 返回一个对象MyShinyClass = type(&apos;MyShinyClASS&apos;, (), &#123;&#125;)print(MyShinyClass)print(MyShinyClass())&lt;class &apos;__main__.MyShinyClASS&apos;&gt;&lt;__main__.MyShinyClASS object at 0x00000214ED6FE5F8&gt; type接受一个字典来为类定义属性，因此12class Foo(object): bar = True 可以翻译为：1Foo = type(&apos;Foo&apos;, (), &#123;&apos;bar&apos;:True&#125;) 并且可以将Foo当做一个普通的类一样使用：123456789print(Foo)print(Foo.bar)f = Foo()print(f)print(f.bar)&lt;class &apos;__main__.Foo&apos;&gt;True&lt;__main__.Foo object at 0x000002C77F0FD4E0&gt;True 当然，你可以向这个类继承，所以，如下的代码：12class FooChild(Foo): pass 就可以写成：123FooChild = type(&apos;FooChild&apos;, (Foo,), &#123;&#125;)print(FooChild)print(FooChild.bar) 到底什么是元类元类就是用来创建类的“东西”，你创建类就是为了创建类的实例对象，但是我们知道python中的类也是对象，而元类就是用来创建这些类（对象）的，所以，元类就是类的类，可以这样理解：12MyClass = MetaClass()MyObject = MyClass() 你可以看到了type可以让你像这样做：1MyClass = type(&apos;MyClass&apos;, (), &#123;&#125;) 这是因为函数type实际上是一个元类，type就是python背后用来创建所有类的元类，所以type为什么不写成Type也就知道了吧，或许就是为了和str保持一致性，str是用来创建字符串对象的类，而int是用来创建整数对象的类。type即使创建类对象的类。你可以通过class属性来看到这一点。Python中的所有的东西，注意，所有的东西——都是对象。这包含整数、字符串、函数和类。它们都是对象，而且它们都是从一个类创建来的。 12345678910age = 24print(age.__class__)name = &apos;bob&apos;print(name.__class__)def foo(): passprint(foo.__class__)&lt;class &apos;int&apos;&gt;&lt;class &apos;str&apos;&gt;&lt;class &apos;function&apos;&gt; 现在，对于任何一个class的class属性又是什么呢？123456print(age.__class__.__class__)print(name.__class__.__class__)print(foo.__class__.__class__)&lt;class &apos;type&apos;&gt;&lt;class &apos;type&apos;&gt;&lt;class &apos;type&apos;&gt; 因此，元类就是窗累类这种对象的东西，如果你喜欢的话，可以把元类称谓”类工厂”（不是工厂类）,type就是python內建的元类，当然了，你也可以创建自己的元类。 __metaclass__属性你可以在写一个类的时候为其添加metaclass属性。 123class Foo(object): __metaclass__ = somethind,.,[...] 如果你这么做了，python就会用元类来创建类Foo。这里面有技巧，你首先写下class Foo(object)，但是类对象Foo还没有在内存中创建。Python会在类的定义中寻找__metaclass__属性，如果找到了，Python就会用它创建类Foo，如果没找到，就会用內建的type来创建这个类。 当你写下如下代码时：12class Foo(Bar): pass Python做了如下的操作： Foo中有__metaclass__这个属性吗？如果有，python会在内存中通过__metaclass__创建一个名字为Foo的类对象（注意是类对象）。如果python没有找到__metaclass__，它会继续在Bar（父类）中寻找__metaclass__属性，并尝试做和前面同样的操作。如果python在任何父类中都找不到__metaclass__，它就会在模块层面中去寻找__metaclass__，并尝试做同样的操作。如果还是找不到__metaclass__，python就会用内置的type来创建这个类对象。 现在的问题就是，你可以在__metaclass__中放置些什么代码呢？答案是：可以是可以创建一个类的东西。那什么可以用来创建一个类呢？type，或者任何使用到type或者子类化type的东西都可以。 自定义元类元类的主要目的就是为了当创建类时能够自动地改变类。通常，你会为API做这样的事情，你希望可以创建符合当前上下文的类。假想一个很傻的例子，你决定你的模块里所有的类的属性都应该是大写形式，有好几种方法可以实现，单其中一种就是通过在模块级别设定__metaclass__，采用这种方法，这个模块中的所有类都会通过这个元类来创建，我们只需要告诉元类把所有的属性都改写成大写形式就解决了。 幸运的是，__metaclass__实际上可以被任意调用，它并不需要是一个正式的类（我们都知道，名字里面带’class’的东西，并不一定是个class） 我们这里先以一个简单的函数作为例子开始：12345678910111213141516171819202122232425# 元类会自动将你通常传给&apos;type&apos;的参数作为自己的参数传入def upper_attr(future_class_name, future_class_parents, future_class_attr): &quot;&quot;&quot; 返回一个类对象，将属性都转为大写形式 &quot;&quot;&quot; # 识别所有不以&apos;__&apos;开头的属性，将它转换为大写 uppercase_attr = &#123;&#125; for name, val in future_class_attr.items(): if not name.startswith(&apos;__&apos;): uppercase_attr[name.upper()] = val else: uppercase_attr[name] = val # type创建这个类 return type(future_class_name, future_class_parents, uppercase_attr)# 这行会影响模块中的所有类__metaclass__ = upper_attrclass Foo(): # 全局 __metaclass__不会和&apos;object&apos;一起生效，但是我们可以在这里定义__metaclass__来只对这个类生效 bar = &apos;bip&apos;print(hasattr(Foo, &apos;bar&apos;))print(hasattr(Foo, &apos;BAR&apos;)) 现在让我们再做一次，这一次用一个真正的class来当元类123456789101112131415161718192021# 请记住，&apos;type&apos;实际上是一个类，就像&apos;str&apos;和&apos;int&apos;一样# 所以，你可以从type继承class UpperAttrMetaclass(type): # __new__ 是在 __init__之前被调用的特殊方法 # __new__是用来创建对象并返回的方法 # __init__只是用来把传入的参数初始化给对象 # 你很少用到__new__，除非你希望能够控制对象的创建 # 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__ # 如果你希望的话，你也可以在__init__中做些事情 # 还有一些高级的用法会涉及到改写__call__特殊方法，但是我们这里不用 def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr): uppercase_attr = &#123;&#125; for name, val in future_class_attr.items(): if not name.startswith(&apos;__&apos;): uppercase_attr[name.upper()] = val else: uppercase_attr[name] = val return type(future_class_name, future_class_parents, uppercase_at 但是这不是OOP（Object-oriented programming，面向对象编程）。我们直接调用了type，而且我们没有改写父类的new方法。现在，我们这样去处理：12345678910111213141516class UpperAttrMetaclass(type): def __new__(upperattr_metaclass, future_class_name, future_class_parents, future_class_attr): uppercase_attr = &#123;&#125; for name, val in future_class_attr.items(): if not name.startswith(&apos;__&apos;): uppercase_attr[name.upper()] = val else: uppercase_attr[name] = val # 复用type.__new__方法 # 这就是基本的OOP编程，没什么魔法 return type.__new__(upperattr_metaclass, future_class_name, future_class_parents, uppercase_attr) 你可以已经注意到了有个额外的参数uppersttr_metaclass，这并没有什么特别的。类方法的第一个参数总是表示当前的实例，就想在普通的类方法中的self参数一样。当然了，为了清晰起见，这边将名字起的比较长。但是就想self一样，所有的参数都有它们的传统名称。因此，在真是的产品代码中一个元类应该像这样：123456789101112class UpperAttrMetaclass(type): def __new__(cls, clsname, bases, dct): uppercase_attr = &#123;&#125; for name, val in dct.items(): if not name.startswith(&apos;__&apos;): uppercase_attr[name.upper()] = val else: uppercase_attr[name] = val return type.__new__(cls, clsname, bases, uppercase_attr) 如果使用super方法的话，我们还可以使它变得更清晰一些，这会缓解继承（是的，你可以拥有元类，从元类继承，从type继承）123456789101112class UpperAttrMetaclass(type): def __new__(cls, clsname, bases, dct): uppercase_attr = &#123;&#125; for name, val in dct.items(): if not name.startswith(&apos;__&apos;): uppercase_attr[name.upper()] = val else: uppercase_attr[name] = val return super(UpperAttrMetaclass, cls).__new__(cls, clsname, bases, uppercase_attr) 就是这样，除此之外，关于元类真的没有别的可说的了。使用到元类的代码比较复杂，这背后的原因倒不是因为元类本身，二十因为你通常会使用元类去做一些晦涩的事情，依赖于自省，控制继承等等。确实，用元类来搞些“黑魔法”是特别有用的，因而会搞出些复杂的东西来。但是元类本身而言，它们其实是很简单的： 1，拦截类的创建2，修改类3，返回修改之后的类 为什么要用metaclass类而不是函数由于__metaclass__可以接受任何可调用的对象，那为什么还要使用类呢，因为很显然使用类会更加复杂，这里有好几个原因： 1，意图会更加清晰，当你读到UpperAttrMetaclass(type)时，你知道接下来要发生什么2，你可以使用OOP编程。元类可以从元类中继承，改写父类方法，甚至可以使用元类3，你可以把代码组织的更好，当你使用元类的时候肯定不会像上述的简单场景，通常都是针对比较复杂的问题。将多个方法归总到一个类中会很有帮助，也会使得代码更容易阅读。4，你可以使用__new__，__init__以及__call__这样的特殊方法。它们能帮你处理不同的任务。就算通常你可以把所有的东西都在__new__里处理掉，有些人还是觉得用__init__更舒服点。 究竟为什么要使用元类现在回到我们的大主题上来，究竟是为什么你会去使用这样一种容易出错且晦涩的特性？好吧，一般来说，根本用不上它： “元类就是深度的魔法，99%的用户根本不必为此操心。如果你想搞清楚究竟是否需要用来元类，那么你就不需要它。那么实际用到元类的人都非常清楚地知道他们需要做什么，而且根本不需要解释为什么要用元类” ——Python界的领袖Tim Peters 元类的主要用途是创建API，一个典型的例子是Django ORM。它允许你像这样定义：123class Person(models.Model): name = models.CharField(max_length=30) age = models.IntegerField() 但是如果你像这样做的话：12guy = Person(name=&apos;bob&apos;, age=&apos;35&apos;)print guy.age 这并不会返回一个IntegerFied对象，而是会放回一个int，甚至可以直接从数据库中取出数据。这是有可能的，因为models.Model定义了__metaclass__，并且使用了一些魔法能够将你刚刚定义的简单的Person类转变成对数据库的一个复杂hook。Django框架将这些看起来很复杂的东西通过暴露出一个简单的使用元类的API将其化简，通过这个API重新创建代码，在背后完成真正的工作。 结语首先，你知道了类其实是能够创建出类实例的对象。事实上，类本身也是实例，当然，它们是元类的实例：1234class Foo(object): passprint(id(Foo))1973075749880 Python中的一切都是对象，它们要么是类的实例，要么是元类的实例，除了type。type实际上是它自己的元类，在纯python环境中这可不是你能够做到的，这是通过在实现层面耍一些小手段做到的。其次，元类是很复杂的。对于非常简单的类，你可能不希望通过使用元类来对类做修改。你可以通过其他两种技术来修改类：12Monkey patchingclass decorators 当你需要动态修改类时，99%的时间里你最好使用上面这两种技术。当然，其实在99%的时间里你根本就不需要动态修改类。 原链接 stackoverflow原链接国内翻译站]]></content>
      <categories>
        <category>python黑科技</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPS重建记]]></title>
    <url>%2F2018%2F01%2F24%2FVPS%E9%87%8D%E5%BB%BA%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[VPS重新部署日常环境，及hexo博客快速重建 VPS受灾记大早上来发现stackoverflow首页都打不开，对于天天科学上网的我来说，简直莫名其妙。 本地网络原因本地windows PC机，控制台ping IP：1ping VPS_IP 直接就超时了，匪夷所思。。VPS服务器 ping自己：1ping 127.0.0.1 好歹能通，那就是中间路由断了。 手机下载个网络工具，尝试在手机端ping VPS的IP（排除公司DNS搞的鬼），手机上ping也直接超时了，好吧，可以去检查是不是在某个不知名的时候自己把防火墙开了，还把22等端口关了。。 VPS排查我的VPS是在LA的CENTOS7主机，centos7查看防火墙状态：1firewall-cmd --state 发现是关着的。。。为了排除自己之前装过iptables的服务，查看iptables.service：1systemctl status iptables.service 这个果然是开着的，查看启用的端口：1cat /etc/sysconfig/iptables 该开的端口也都开了，好吧，无语了。 大环境排查基于大家都懂的网络环境，怀疑是IP被墙了，检测：1http://ping.chinaz.com 果然，除了香港和国外，其他都ping不通VPS，好吧，可以下结论了:IP被墙了… 真的很想骂人啊！到底是哪个JR没事瞎玩，搞出个异常流量，害的无辜躺枪！！！hexo还在VPS上，小飞机也在VPS上，没有梯子，科学上网个鬼啊！！！ 骂人几轮，该弄得还是得弄，方案嘛，无非就是换IP，还好Vultr重建台服务还是很方便的。 VPS重建Vultr重买服务器，这次比较幸运，居然有$2.5的，直接买：Vultr官网拿到IP之后，第一件事，肯定是ping IP，还好，可以ping通，就是你了！ VPS简单设置 防火墙设置xshell远程连接上VPS之后，习惯性操作，第一步，更新yum1yum update firewall设置由于centos7默认的防火墙服务时firewalld的，很不习惯，改！ 查看防火墙状态1firewall-cmd --state 关闭防火墙1systemctl stop firewalld.service 禁止开机启动启动防火墙1systemctl disable firewalld.service iptables设置安装iptables服务：1yum install iptables-services 开启iptables防火墙:1systemctl start iptables.service 开启特定端口：编辑文件：/etc/sysconfig/iptables，加入想要开放的端口即可，例如开放8090端口：1-A INPUT -p tcp -m tcp --dport 8090 -j ACCEPT 保存，退出之后，重启防火墙完成设置:1systemctl restart iptables.service ShadowsocksR（小飞机）配置科学上网必不可少的工具，ShadowsocksR 安装：123wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 完成配置：12345服务器端口：自己设定（如不设定，默认为 8989）密码：自己设定（如不设定，默认为 teddysun.com）加密方式：自己设定（如不设定，默认为 aes-256-cfb）协议（Protocol）：自己设定（如不设定，默认为 origin）混淆（obfs）：自己设定（如不设定，默认为 plain） 附上我的配置，仅供参考：123456Your Server IP : ***.***.***.*** Your Server Port : ***** Your Password : ******* Your Protocol : auth_sha1_v4 Your obfs : tls1.2_ticket_auth Your Encryption Method: aes-256-cfb 配置完成之后就可以在本地PC机使用客户端进行梯子配置，完了就可以科学上网啦！！！客户端度娘盘链接 Hexo重建预备动作：原来VPS上面的hexo所在目录，直接打成压缩包scp出来 安装node.js首先安装gcc用于编译：1yum -y install gcc gcc-c++ kernel-devel 开始安装node.js12wget https://nodejs.org/dist/v4.5.0/node-v4.5.0.tar.gztar -xf node-v4.5.0.tar.gz 解压缩之后，进入目录，编译：1234cd node-v4.5.0./configuremakemake install 完成！验证：12node -vnpm 安装完成的是4.5的版本，升级：12npm install -g nn stable 安装git由于买的VPS已经集成了git，所以怎么安装，怎么配置环境变量啥的就不废话了。1、VPS设置git：12git config --global user.email &quot;you@example.com&quot;git config --global user.name &quot;Your Name&quot; 邮箱和用户名都对应于github 2、生成ssh秘钥1ssh-keygen -t rsa -C example@163.com 默认保存路径是/root/.ssh下：1cat /root/.ssh/id_rsa.pub 获取秘钥，然后到github的web页面将秘钥配置进去，完成！ 安装hexo1、安装hexo创建目录1mkdir blog 安装1234cd blognpm install -g hexo-cli#初始化hexo init 2、安装插件12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked --savenpm install hexo-renderer-stylus --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --save 3、修改Hexo配置文件，完成！ 或者，直接把原来VPS上面hexo的压缩包解压，再配置安装hexo即可123cd /home/blognpm install hexo --savenpm install -g hexo-cli 环境测试12hexo new &quot;安装测试&quot;hexo g -d 执行不报错，进入博客可以看见安装测试该文章，部署成功！ 真的是坑啊，又重布环境，国内的网络环境啊，ε=(´ο｀*)))唉~ 参考链接 centos搭建hexo博客]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python实现自动化测试报告邮件实时发送]]></title>
    <url>%2F2018%2F01%2F23%2Fpython%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E9%82%AE%E4%BB%B6%E5%AE%9E%E6%97%B6%E5%8F%91%E9%80%81%2F</url>
    <content type="text"><![CDATA[实现自动化用例执行完成之后，自动发送带html附件的邮件到邮箱 实现思路：读取html附件内容，添加到邮件正文中，添加html附件，实现用例执行完成，测试报告自动发送到邮箱。代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#!/usr/bin/env python3# -*- coding: utf-8 -*-import osimport smtplibfrom datetime import datetime as dtfrom email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom nose.tools import assert_equaldef send_mail(): &quot;&quot;&quot;读取测试报告&quot;&quot;&quot; with open(report_file, &apos;r&apos;, encoding=&apos;utf-8&apos;) as f_obj: content = f_obj.read() msg = MIMEMultipart(&apos;mixed&apos;) # 添加邮件内容 msg_html = MIMEText(content, &apos;html&apos;, &apos;utf-8&apos;) msg.attach(msg_html) #添加附件 msg_attachment = MIMEText(content, &apos;html&apos;, &apos;utf-8&apos;) msg_attachment[&quot;Content-Disposition&quot;] = &apos;attachment; filename=&quot;&#123;0&#125;&quot;&apos;.format(report_file) msg.attach(msg_attachment) msg[&apos;Subject&apos;] = mail_subject msg[&apos;Form&apos;] = mail_user msg[&apos;To&apos;] = mail_to try: # 连接邮件服务器 s = smtplib.SMTP() s.connect(mail_host) # 登录 s.login(mail_user, mail_pwd) # 发送邮件 s.sendmail(mail_user, mail_to, msg.as_string()) # 退出 s.quit() except Exception as e: print(&quot;Exception&quot;, e)class Mailsend(): def test_mul(self): a = 1 b = 2 res = 3 assert_equal(res, a+b)if __name__ == &apos;__main__&apos;: # 邮件服务器 mail_host = &apos;smtp.163.com&apos; # 发件人地址 mail_user = &apos;***&apos; # 发件人密码 mail_pwd = &apos;***&apos; # 邮件标题 mail_subject = u&apos;NoseTests_测试报告_&#123;0&#125;&apos;.format(dt.now().strftime(&apos;%Y%m%d&apos;)) # 收件人地址 mail_to = &apos;***&apos; # 测试报告名称 report_file = &apos;NoseTestReport.html&apos; # 运行nosetests进行自动化测试并生成测试报告 print(&apos;Run NoseTests Now...&apos;) os.system(&apos;nosetests -v mail_html.py:Mailsend --with-html --html-file=NoseTestReport.html&apos;) # 发送测试报告邮件 print(&apos;Send Test Report Mail Now...&apos;) send_mail() tips:123python客户端进行163,126邮箱邮件发送前，需要在web版邮箱中设置允许客户端访问，设置客户端授权码设置完授权码之后，此时的客户端登录密码为授权码，不是原来的邮箱密码]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>自动化测试</tag>
        <tag>smtplib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python数据分离]]></title>
    <url>%2F2018%2F01%2F20%2Fpython%E6%95%B0%E6%8D%AE%E5%88%86%E7%A6%BB%2F</url>
    <content type="text"><![CDATA[python数据分离——读取配置文件 版本：python 3.6 进行数据/配置和代码分离时，python3.6 可以使用configparser进行配置信息读取或创建。可以实现程序和数据的分离，便于后期维护程序，也能在一定程序上满足不会编码的人进行自动化测试（只需改配置文件。） 以创建/读取ini格式配置文件为例： 创建配置文件：每个ini文件都是有n个sections组成（可以理解为组成部分或者是段落。。我是这么理解的），每个sections包含若干个键值对（keys:values），所以某种程度上，你可以把每个section看成是个字典（dictionary），虽然这俩意义上完全无关。python3.6创建ini配置文件代码示例：1234567891011121314151617181920212223#!/usr/bin/env python3# -*- coding: utf-8 -*-import configparsercf = configparser.ConfigParser()cf[&apos;DEFAULT&apos;] = &#123;&quot;browser&quot; : &quot;Chrome&quot;, &quot;version&quot; : &quot;63.0.3239.132&quot;, &quot;driver&quot; : &quot;chromedriver.exe&quot;, &#125;cf[&apos;tokyle.com&apos;] = &#123;&#125;cf[&apos;tokyle.com&apos;][&apos;Author&apos;] = &apos;kyle&apos;cf[&apos;baidu.com&apos;] = &#123;&#125;baiduSearch = cf[&apos;baidu.com&apos;]baiduSearch[&apos;searchBox&apos;] = &apos;id &gt; kw&apos;baiduSearch[&apos;searchButton&apos;] = &apos;id &gt; su&apos;cf[&apos;DEFAULT&apos;][&apos;noRetry&apos;] = &apos;yes&apos;with open(&apos;test.ini&apos;, &apos;w&apos;) as configfile: cf.write(configfile) 上述代码执行完成之后会在该.py文件所在目录下创建一个test.ini的配置文件，内容如下：123456789101112[DEFAULT]browser = Chromeversion = 63.0.3239.132driver = chromedriver.exenoretry = yes[tokyle.com]author = kyle[baidu.com]searchbox = id &gt; kwsearchbutton = id &gt; su 每个ini文件可以包含一个[&#39;DEFAULT&#39;] section，也可以没有，[&#39;DEFAULT&#39;]部分定义了默认设置，例如默认使用的浏览器，浏览器版本等。 读取配置信息1234import configparsercf = configparser.ConfigParser()cf.read(&apos;test.ini&apos;) 获取所有sections使用1cf.sections() 即可，需要注意的是，这样，是默认不会获取都[‘DEFAULT’]的，可以实验一下：12section = cf.sections()print(section) 打印出的结果：1[&apos;tokyle.com&apos;, &apos;baidu.com&apos;] 可以看见默认不包含[‘DEFAULT’]。 其实读取配置信息就和读取字典里的数据做法一样，使用for循环就可以打印出全部信息，例如进行自动化测试时想获取[‘baidu.com’]里存的百度搜索输入框以及百度一下按键，可以：123baidu_msg = cf[&apos;baidu.com&apos;]for key,value in baidu_msg.items(): print(key + &apos; : &apos; + value) 打印出的信息：123456searchbox : id &gt; kwsearchbutton : id &gt; subrowser : Chromeversion : 63.0.3239.132driver : chromedriver.exenoretry : yes 可以看见，这样不仅会把[‘baidu.com’]模块的信息全部打印，[‘DEFAULT’]模块的信息也会被打印出来。 使用配置文件实例(简单的数据分离)：123456789101112131415161718192021222324252627282930313233343536373839404142434445#!/usr/bin/env python3# -*- coding: utf-8 -*-import configparserimport traceback,timefrom selenium import webdriverfrom selenium.webdriver.support.ui import WebDriverWaitfrom nose.tools import assert_trueclass ElementId(): def __init__(self): #读取配置文件 self.cf = configparser.ConfigParser() self.cf.read(&apos;test.ini&apos;) self.cf.sections() def get_elementId(self, driver, webSiteName, webelement): try: #获取配置文件中的定位方法以及定位元素 webElemnt = self.cf.get(webSiteName, webelement).split(&apos;&gt;&apos;) webelement_method = webElemnt[0].strip() webelement_expression = webElemnt[1].strip() element = WebDriverWait(driver, 10).until\ (lambda x: x.find_element(webelement_method, webelement_expression)) except Exception as e: print(traceback.print_exc(), e) else: return elementif __name__ == &apos;__main__&apos;: &quot;&quot;&quot;测试百度搜索&quot;&quot;&quot; #打开百度首页 browser = webdriver.Chrome() browser.get(&quot;https://www.baidu.com&quot;) #获取定位元素 elementid = ElementId() searchBox = elementid.get_elementId(browser, &apos;baidu.com&apos;, &apos;searchbox&apos;) searchBox.send_keys(&apos;selenium&apos;) searchButton = elementid.get_elementId(browser, &apos;baidu.com&apos;, &apos;searchbutton&apos;) searchButton.click() time.sleep(3) #断言完成百度搜索&quot;selenium&quot; assert_true(u&quot;Selenium - Web Browser Automation&quot; in browser.page_source) browser.quit() （我在执行上述示例之前，把test.ini中的[‘DEFAULT’]注释掉了，此例不需要[‘DEFAULT’]中的信息）]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自娱自乐一]]></title>
    <url>%2F2018%2F01%2F20%2F%E8%87%AA%E5%A8%B1%E8%87%AA%E4%B9%90%E4%B8%80%2F</url>
    <content type="text"><![CDATA[自娱自乐系列一： 为了过年提前回家，周六过来加班调休，又不大想干活，就想着捣鼓点自娱自乐的东西： 输入年龄判断是否有投票资格：1234567891011121314151617def judge_age(): while True: try: age = int(input(&quot;\nPlease enter your age：&quot;)) except ValueError: print(&quot;Sorry,I can&apos;t understand what you entered.Please enter a correct number.&quot;) continue else: break if age &gt;= 18: print(&quot;You are able to vote in the United States!&quot;) else: print(&quot;You are too young to vote in the United States!&quot;)if __name__ == &apos;__main__&apos;: judge_age() 判断输入的正整数:12345678910111213141516171819202122232425262728293031#!/usr/bin/env python3# -*- coding: utf-8 -*-def get_non_negative_int(prompt): try: value = int(input(prompt)) except ValueError: print(&quot;Sorry,I can&apos;t understand that.&quot;) return get_non_negative_int(prompt) if value &lt; 0: print(&quot;Sorry,your response must not be negative.&quot;) return get_non_negative_int(prompt) else: return valuedef guess_number(): number = get_non_negative_int(&quot;Please enter a number to guess: (only positive integer can work,thanks!)&quot;) while True: guess = get_non_negative_int(&quot;guess the number.&quot;) if guess &gt; number: print(&quot;You could enter a lower one.&quot;) elif guess &lt; number: print(&quot;I think it could be higher.&quot;) else: print(&quot;Congratulations! You got it!&quot;) breakif __name__ == &apos;__main__&apos;: guess_number() 纯属自娱自乐，毫无技术含量 Thanks?(?ω?)? 顺便贴个常识坑：文件夹不能取名是code，否则pycharm的debug模式会报错！！！（stackoverflow真是个好网站！什么坑都能找到填的办法。。）原因：debug模式会引个包：1from code import InteractiveConsole 工程中有code文件夹，会找不到debug需要的方法]]></content>
      <categories>
        <category>just for fun</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>lives</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[appium应用简介]]></title>
    <url>%2F2018%2F01%2F19%2Fappium%E5%BA%94%E7%94%A8%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[appium应用篇，简单介绍自己工作中用到的一些appium应用。 Appium等待类型固定时间等待123import timetime.sleep(3) 固定等待时间3秒，强制等待，必须等完3秒之后才会进行下一步操作。 隐式等待1driver.implicitly_wait(5) 隐式等待的好处是不用想固定时间（time.sleep()）一样死等固定时间，可以在一定程度上提高执行效率，但是这种等待方式也是需要等页面所有元素都加载完成才会去进行下一步操作，例如有的时候，页面你需要的元素已经加载完成，但是必须还是要等待个别资源加载完才会执行下一步，一定程度上来说还是效率降低。 显示等待1234from selenium.webdriver.support.ui import WebDriverWaitWebDriverWait(driver, 10).\ until(lambda x:x.find_element_by_id(&apos;com.anmav.cashierdesk:id/tvOpenTable&apos;)) 显示等待原理是每隔一段时间（默认0.5秒），执行一次判断条件，如果条件成立，就执行下一步，直到超过设定的最大等待时间，抛出TimeoutException异常 Appium定位弹窗切换webview原理和selenium一样，类似于selenium中先获取页面句柄，再切换。1234driver.contexts方法一：driver.switch_to.context(&quot;contextname&quot;) #contextname为想切换到的上下文方法二：driver.switch_to.context(contexts[1]) # 从contexts里取第二个参数 Appium连接真机使用真机作为测试机，进行app自动化测试（android）步骤： adb连接真机首先是本地PC连接到真机，保证真机所在网段PC可以ping通（局域网或者同一WiFi）12&#123;lamb&#125; adb connect 192.168.0.194:9555connected to 192.168.0.194:9555 进入cmd，输入adb连接命名，连接到真机 起appium服务本地PC装有appium-desktop，直接启动appium-desktop，即完成appium服务启动 运行自动化测试脚本配置：12345678910self.desired_caps = &#123;&#125;self.desired_caps[&apos;platformName&apos;] = &apos;Android&apos;self.desired_caps[&apos;platformVersion&apos;] = &apos;6.0.1&apos;self.desired_caps[&apos;deviceName&apos;] = &apos;Android Emulator&apos;self.desired_caps[&apos;app&apos;] = &apos;‪G:/apk/1.2.5/test_release_v1.2.5.apk&apos;self.desired_caps[&apos;noReset&apos;] = Trueself.desired_caps[&apos;appPackage&apos;] = &apos;com.anmav.test&apos;self.desired_caps[&apos;appActivity&apos;] = &apos;com.anmav.test.login.activity.LoginActivity&apos;self.driver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, self.desired_caps) 之后再加上用户名，密码等信息输入，即可完成远程真机app自动安装，登录。]]></content>
      <categories>
        <category>appium</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>appium</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python项目依赖管理工具-pipenv]]></title>
    <url>%2F2018%2F01%2F18%2Fpython%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-pipenv%2F</url>
    <content type="text"><![CDATA[偶然发现一个很好用的python项目包管理工具pipenv github上简介是一句话Pipenv: Python Development Workflow for Humans 现在已经是python.org官方推荐的工具。 具体功能：pipenv能够自动创建和管理你工程的虚拟环境，当你安装/卸载包时，会自动从你的Pipfile中添加/移除包；为啥要用这个工具，python的特点，python进行工程环境创建，一般是创建一个Virtualenv虚拟环境，然后列出所需要的工具包，pip安装，但是这样你就要手动去添加你需要的包，删除你已经不需要的包，并且由于工具包的更新，你可能还需要手动去更新你的工具包，而且，类似于单元测试这样的场景，需要安装nose包，但是生产环境又不需要该包，也就无法做到生产环境和开发环境安装包的分离，而以上这些，pipenv都可以解决。 使用简介首先安装pipenv使用pip安装pipenv及其依赖项1pip install pipenv macOS安装则使用1brew install pipenv 进入你项目所在文件夹，启动Pipenv12cd your_projectpipenv install 启动之后，项目文件夹下会多出两个文件Pipfile，Pipfile.lockPipfile文件包含项目的依赖包信息。 管理依赖包要为项目安装依赖包，跟pip类似1pipenv install nose 卸载1pipenv uninstall nose 可以通过更新Pipfile.lock来冻结软件包名称及其版本以及其自己的依赖关系的列表。 这是使用lock关键字完成:1pipenv lock 如果你同事或者朋友想clone你的依赖库，直接拿你的Pipfile，然后他本地安装pipenv之后，pipenv install即可完成依赖库安装 环境分离只为开发环境安装包：1pipenv install --dev nose 这样，在生产环境执行pipenv install是不会安装nose的，想要安装开发环境的依赖，执行：1pipenv install --dev 用法pipenv所有关键字及解释：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950$ pipenvUsage: pipenv [OPTIONS] COMMAND [ARGS]...Options: --update Update Pipenv &amp; pip to latest. --where Output project home information. --venv Output virtualenv information. --py Output Python interpreter information. --envs Output Environment Variable options. --rm Remove the virtualenv. --bare Minimal output. --completion Output completion (to be eval&apos;d). --man Display manpage. --three / --two Use Python 3/2 when creating virtualenv. --python TEXT Specify which version of Python virtualenv should use. --site-packages Enable site-packages for the virtualenv. --jumbotron An easter egg, effectively. --version Show the version and exit. -h, --help Show this message and exit.Usage Examples: Create a new project using Python 3.6, specifically: $ pipenv --python 3.6 Install all dependencies for a project (including dev): $ pipenv install --dev Create a lockfile containing pre-releases: $ pipenv lock --pre Show a graph of your installed dependencies: $ pipenv graph Check your installed dependencies for security vulnerabilities: $ pipenv check Install a local setup.py into your virtual environment/Pipfile: $ pipenv install -e .Commands: check Checks for security vulnerabilities and... graph Displays currently–installed dependency graph... install Installs provided packages and adds them to... lock Generates Pipfile.lock. open View a given module in your editor. run Spawns a command installed into the... shell Spawns a shell within the virtualenv. uninstall Un-installs a provided package and removes it... update Uninstalls all packages, and re-installs... 定位工程展示工程路径以及环境路径，进入工程(类似于linux)：1pipenv --where 1pipenv --venv 定位python解释器：1pipenv --py 其他使用激活工程环境1pipenv shell 运行python脚本1pipenv run python main.py 展示依赖关系图1pipenv graph 卸载所有1pipenv uninstall --all 参考地址 github项目地址python.org官网推荐地址]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pipenv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmder简介]]></title>
    <url>%2F2018%2F01%2F18%2Fcmder%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[windows小工具介绍 windows系统cmd工具，说实话，用的还是有点不舒服的，用习惯vim之后，真的是很想在windows上用类似的，还好，找到个小工具cmder。 下载地址：照旧，官方下载地址是托管在github上 github下载地址 但是不知道最近抽什么疯，github上n多项目下载页面直接404，索性提供本地度娘盘地址： 度娘盘地址 使用说明下载完成之后，解压缩，然后将cmder.exe所在目录添加到系统环境变量中，完成~双击打开即可使用。 简单设置解决中文乱码问题：类似于linux，alias文件中添加设置即可；alias文件位置：cmder/config/aliases添加：123l=ls --show-control-charsla=ls -aF --show-control-charsll=ls -alF --show-control-chars 中文字重叠在一起cmder进入设置（快捷键win+alt+p），找到main，取消monospace(固定宽度)勾选 基本就是设置完成了，可以进行使用了，后续再发现什么其他的好功能再更新。123456789#切换盘D:#展示文件lsll#查看文件内容cat xxx.txt#编辑文件内容vim xxx.txt]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[appium键盘事件]]></title>
    <url>%2F2018%2F01%2F17%2Fappium%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[appium键盘事件 语法：1driver.keyevent(keyCode) 电话键1234567891011121314KEYCODE_CALL 拨号键 5KEYCODE_ENDCALL 挂机键 6KEYCODE_HOME 按键Home 3KEYCODE_MENU 菜单键 82KEYCODE_BACK 返回键 4KEYCODE_SEARCH 搜索键 84KEYCODE_CAMERA 拍照键 27KEYCODE_FOCUS 拍照对焦键 80KEYCODE_POWER 电源键 26KEYCODE_NOTIFICATION 通知键 83KEYCODE_MUTE 话筒静音键 91KEYCODE_VOLUME_MUTE 扬声器静音键 164KEYCODE_VOLUME_UP 音量增加键 24KEYCODE_VOLUME_DOWN 音量减小键 25 控制键123456789101112131415161718192021KEYCODE_ENTER 回车键 66KEYCODE_ESCAPE ESC键 111KEYCODE_DPAD_CENTER 导航键 确定键 23KEYCODE_DPAD_UP 导航键 向上 19KEYCODE_DPAD_DOWN 导航键 向下 20KEYCODE_DPAD_LEFT 导航键 向左 21KEYCODE_DPAD_RIGHT 导航键 向右 22KEYCODE_MOVE_HOME 光标移动到开始键 122KEYCODE_MOVE_END 光标移动到末尾键 123KEYCODE_PAGE_UP 向上翻页键 92KEYCODE_PAGE_DOWN 向下翻页键 93KEYCODE_DEL 退格键 67KEYCODE_FORWARD_DEL 删除键 112KEYCODE_INSERT 插入键 124KEYCODE_TAB Tab键 61KEYCODE_NUM_LOCK 小键盘锁 143KEYCODE_CAPS_LOCK 大写锁定键 115KEYCODE_BREAK Break/Pause键 121KEYCODE_SCROLL_LOCK 滚动锁定键 116KEYCODE_ZOOM_IN 放大键 168KEYCODE_ZOOM_OUT 缩小键 169 组合键123456KEYCODE_ALT_LEFT Alt+LeftKEYCODE_ALT_RIGHT Alt+RightKEYCODE_CTRL_LEFT Control+LeftKEYCODE_CTRL_RIGHT Control+RightKEYCODE_SHIFT_LEFT Shift+LeftKEYCODE_SHIFT_RIGHT Shift+Right 基本123456789101112131415161718192021222324252627282930313233343536KEYCODE_0 按键&apos;0&apos; 7KEYCODE_1 按键&apos;1&apos; 8KEYCODE_2 按键&apos;2&apos; 9KEYCODE_3 按键&apos;3&apos; 10KEYCODE_4 按键&apos;4&apos; 11KEYCODE_5 按键&apos;5&apos; 12KEYCODE_6 按键&apos;6&apos; 13KEYCODE_7 按键&apos;7&apos; 14KEYCODE_8 按键&apos;8&apos; 15KEYCODE_9 按键&apos;9&apos; 16KEYCODE_A 按键&apos;A&apos; 29KEYCODE_B 按键&apos;B&apos; 30KEYCODE_C 按键&apos;C&apos; 31KEYCODE_D 按键&apos;D&apos; 32KEYCODE_E 按键&apos;E&apos; 33KEYCODE_F 按键&apos;F&apos; 34KEYCODE_G 按键&apos;G&apos; 35KEYCODE_H 按键&apos;H&apos; 36KEYCODE_I 按键&apos;I&apos; 37KEYCODE_J 按键&apos;J&apos; 38KEYCODE_K 按键&apos;K&apos; 39KEYCODE_L 按键&apos;L&apos; 40KEYCODE_M 按键&apos;M&apos; 41KEYCODE_N 按键&apos;N&apos; 42KEYCODE_O 按键&apos;O&apos; 43KEYCODE_P 按键&apos;P&apos; 44KEYCODE_Q 按键&apos;Q&apos; 45KEYCODE_R 按键&apos;R&apos; 46KEYCODE_S 按键&apos;S&apos; 47KEYCODE_T 按键&apos;T&apos; 48KEYCODE_U 按键&apos;U&apos; 49KEYCODE_V 按键&apos;V&apos; 50KEYCODE_W 按键&apos;W&apos; 51KEYCODE_X 按键&apos;X&apos; 52KEYCODE_Y 按键&apos;Y&apos; 53KEYCODE_Z 按键&apos;Z&apos; 54]]></content>
      <categories>
        <category>appium</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[appium定位]]></title>
    <url>%2F2018%2F01%2F17%2Fappium%E5%AE%9A%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[appium的常用操作以及元素定位的简单介绍 appium常用操作锁屏1driver.lock(5) 切换应用至后台123driver.background_app(5) # 置于后台，持续5秒driver.background_app(-1) # 持续置于后台driver.background_app(&#123;&apos;timeout&apos;: None&#125;) # 持续置于后台 收起键盘1driver.hide_keyboard() 启动Activity1driver.start_activity(&apos;com.example.android.apis&apos;, &apos;.Foo&apos;) 检测应用是否被安装1driver.is_app_installed(&apos;com.example.android.apis&apos;) 安装应用1driver.install_app(&apos;path/to/my.apk&apos;) 卸载应用1driver.remove_app(&apos;com.example.android.apis&apos;) 模拟设备摇一摇1driver.shake() 关闭应用1driver.close_app() 启动应用使用前提是desired capabilities设置了 autoLaunch=false 关键字1driver.launch_app() 操作上下文（Contexts）获取所有1driver.contexts 获取当前1driver.current_context 切换至默认1driver.switch_to.context(None) 按键事件1driver.keyevent(176) 具体键值 点击操作/多点触控操作12action = TouchAction(driver)action.press(element=el, x=10, y=10).release().perform() 滑动屏幕1driver.swipe(start_x=75, start_y=500, end_x=75, end_y=0, duration=800) 从设备拉去文件1driver.pull_file(&apos;Library/AddressBook/AddressBook.sqlitedb&apos;) 推送文件到设备123data = &quot;some data for the file&quot;path = &quot;/data/local/tmp/file.txt&quot;driver.push_file(path, data.encode(&apos;base64&apos;)) appium元素定位使用id，class等和selenium基本没差别的定位就不介绍了，主要介绍appium独有uiautomator UiSelector 页面class和id等都不能唯一确定元素，但是元素有text属性时，可以使用以下进行定位：1234driver.find_element_by_android_uiautomator(&apos;new UiSelector().text(&quot;Custom View&quot;)&apos;).click() #textdriver.find_element_by_android_uiautomator(&apos;new UiSelector().textContains(&quot;View&quot;)&apos;).click() #textContainsdriver.find_element_by_android_uiautomator(&apos;new UiSelector().textStartsWith(&quot;Custom&quot;)&apos;).click() #textStartsWithdriver.find_element_by_android_uiautomator(&apos;new UiSelector().textMatches(&quot;^Custom.*&quot;)&apos;).click() #textMatches 也可以加上class属性：12driver.find_element_by_android_uiautomator(&apos;new UiSelector().className(&quot;android.widget.TextView&quot;).text(&quot;Custom View&quot;)&apos;).click() #classNamedriver.find_element_by_android_uiautomator(&apos;new UiSelector().classNameMatches(&quot;.*TextView$&quot;).text(&quot;Custom View&quot;)&apos;).click() #classNameMatches 多条件精准定位1driver.find_element_by_android_uiautomator(&apos;new UiSelector().className(&quot;android.widget.EditText&quot;).resourceId(&quot;com.anmav.cashierdesk:id/etToPayPrice&quot;)&apos;) 操作坐标appium在进行元素定位时，定位不到唯一标志的元素，可以获取元素的坐标，使用坐标进行操作 appium以及uiautomatorviewer都可以很容易获取到坐标 appium操作坐标 1driver.tap([(100, 20), (100, 60), (100, 100)], 500) 三个坐标表示模拟三根手指，只需要一个手指，改成一个坐标即可，500表示持续时间500ms 或者使用adb命令也可实现同样效果：1os.popen(&quot;adb shell input tap &quot; + str(100) + &quot; &quot; + str(20)) 参考文章 appium 基础之键盘处理appium-bindings]]></content>
      <categories>
        <category>appium</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[app安装卸载]]></title>
    <url>%2F2018%2F01%2F17%2Fapp%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[appium-模拟器安装卸载app 模拟器安装apk1adb install XXX.apk 卸载apk1adb uninstall your_package 例子： 启动android模拟器，参数：12345desired_caps[&apos;platformName&apos;] = &apos;Android&apos;desired_caps[&apos;platformVersion&apos;] = &apos;7.1.1&apos;desired_caps[&apos;deviceName&apos;] = &apos;Android Emulator&apos;desired_caps[&apos;appPackage&apos;] = &apos;com.anmav.cashierdesk&apos;desired_caps[&apos;appActivity&apos;] = &apos;com.anmav.cashierdesk.view.LoginActivity&apos; win10打开控制台，进入apk文件所在目录，执行命令1adb install cashierdesk.apk 在模拟器中可以发现该app已完成安装。 控制台执行命令：1adb uninstall com.anmav.cashierdesk 模拟器中可以看见该app完成卸载]]></content>
      <categories>
        <category>appium</category>
      </categories>
      <tags>
        <tag>appium</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[appium入门篇]]></title>
    <url>%2F2018%2F01%2F16%2Fappium%E5%85%A5%E9%97%A8%E7%AF%87%2F</url>
    <content type="text"><![CDATA[appium环境搭建及简单使用 测试人员进行app自动化测试的可选框架之一—— appium 平台说明：12WIN10_64python 3.6 appium环境安装安装Android Studio网上之前的教程基本都是安装SDK或者ADT来进行安装，开始我也是这么装的，在最后创建完虚拟机，开启虚拟机时候报错了，报错信息只记得是建议安装Android Studio，索性也就换成了Android Studio。 Android Studio下载链接 如果下载的是不包含SDK的版本，还需要另外下载SDK。安装Android Studio很简单，和Pycharm一模一样，有使用Pycharm经验或者IntelliJ IDEA的应该很熟悉，安装完成之后，找到SDK Manager1File-Settings-Appearance&amp;Behavior &gt; System Settings &gt; Android SDK 如果本地有SDK，可以在此选择本地的SDK路径，该设置页也支持下载各种SDK Platforms。对应的SDK安装完成之后就可以进行创建虚拟机，找到AVD Manager按键，点击创建。 安装Android SDK（和安装Android Studio任选一种方式即可）官方下载地址 但是由于国内众所周知的某种原因，不能科学上网貌似无法保证可以下载~ 国内优质android工具网站 搜索android-sdk找到对应系统版本，进行下载。 配置android环境变量与配置JAVA环境变量类似，新增系统变量123456变量名：ANDROID_HOME 变量值：D:\android\android-sdk-windows变量名：PATH变量值：;%ANDROID_HOME%\platform-tools;%ANDROID_HOME%\tools; SDK Manager安装模拟器在你本地解压完成之后的android-sdk-windows目录下找到SDK Manager.exe，双击打开； 配置参考 安装SDK Platform-Tools在AndroidDevTools.cn 网站上找到Android SDK Platform-tools下载链接，下载，解压，把解压出来的 platform-tools 文件夹放在android-sdk-windows目录下 安装Appium安装方式一： 使用NodeJS 安装1，首先到官网下载安装最新的NodeJS，Windows下属于傻瓜安装。安装完成验证npm或者node -v不报错表明安装完成 2，安装appium，npm install -g appium命令安装appium（个人实验的效果不好，太慢了，建议采用第二种，安装包安装） 安装方式二：安装包安装建议直接安装appium-desktop，appium server在2015年就不再更新，取而代之的是appium-desktop的出现。 Appium安装包托管在github上，下载地址 但是个人实验，很多版本都是跳转404页面。。。无语。。。 个人网盘地址，密码：v3lt（版本1.2.7） 下载完成后，安装即可。 appium环境检查可以使用appium-doctor工具进行环境检查，npm install -g appium-doctor进行安装。 Appium-desktop使用简介打开appium-desktop，点击“放大镜”图标进行设置， 设置完成后点击 Start Session 直接单击最左栏的元素，在中间和右边会显示该元素属性，找到对应的ID值等，定位方式和selenium类似。 查找appPackage和appActivityappium进行自动化测试，需要appPackage和appActivity两个参数，下面是从apk文件获取的方法： apk反编译apktool 地址： apktool 用法1java -jar apktool.jar d yourApkFile.apk 获取appPackage和appActivity打开apk反编译之后的文件夹，打开AndroidManifest.xml文件 package获取 appPackage，activity获取appActivity。 appium Demo实现计算器计算，代码：1234567891011121314151617181920212223242526#!/usr/bin/env python3# -*- coding: utf-8 -*-from appium import webdriverimport timedesired_caps = &#123;&#125;desired_caps[&apos;platformName&apos;] = &apos;Android&apos;desired_caps[&apos;platformVersion&apos;] = &apos;7.1.1&apos;desired_caps[&apos;deviceName&apos;] = &apos;Android Emulator&apos;desired_caps[&apos;appPackage&apos;] = &apos;com.android.calculator2&apos;desired_caps[&apos;appActivity&apos;] = &apos;.Calculator&apos;desired_caps[&apos;noReset&apos;] = Truedriver = webdriver.Remote(&apos;http://localhost:4723/wd/hub&apos;, desired_caps)driver.find_element_by_id(&apos;com.android.calculator2:id/digit_4&apos;).click()driver.find_element_by_accessibility_id(&apos;multiply&apos;).click()driver.find_element_by_id(&apos;com.android.calculator2:id/digit_9&apos;).click()driver.find_element_by_accessibility_id(&apos;plus&apos;).click()driver.find_element_by_id(&apos;com.android.calculator2:id/digit_1&apos;).click()driver.find_element_by_id(&apos;com.android.calculator2:id/digit_4&apos;).click()driver.find_element_by_accessibility_id(&apos;equals&apos;).click()time.sleep(3)driver.quit()]]></content>
      <categories>
        <category>appium</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>appium</tag>
        <tag>自动化测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[smtp发邮件]]></title>
    <url>%2F2018%2F01%2F12%2Fsmtp%E5%8F%91%E9%82%AE%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[使用python3发送网易邮箱邮件 代码：12345678910111213141516import smtplibfrom email.mime.text import MIMETextfrom email.header import Headerdef send_email(mail_host, from_account, from_passwd, to_account, subject, content): mail = smtplib.SMTP() mail.connect(mail_host) mail.login(from_account, from_passwd) # 发送邮件 message = MIMEText(content, &apos;plain&apos;, &apos;utf-8&apos;) message[&apos;From&apos;] = from_account message[&apos;To&apos;] = to_account message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;) mail.sendmail(from_account, to_account, message.as_string()) 菜鸟教程上有一种写法12345678910111213141516171819202122232425262728293031#!/usr/bin/python3 import smtplibfrom email.mime.text import MIMETextfrom email.header import Header # 第三方 SMTP 服务mail_host=&quot;smtp.XXX.com&quot; #设置服务器mail_user=&quot;XXXX&quot; #用户名mail_pass=&quot;XXXXXX&quot; #口令 sender = &apos;from@runoob.com&apos;receivers = [&apos;429240967@qq.com&apos;] # 接收邮件，可设置为你的QQ邮箱或者其他邮箱 message = MIMEText(&apos;Python 邮件发送测试...&apos;, &apos;plain&apos;, &apos;utf-8&apos;)message[&apos;From&apos;] = Header(&quot;菜鸟教程&quot;, &apos;utf-8&apos;)message[&apos;To&apos;] = Header(&quot;测试&quot;, &apos;utf-8&apos;) subject = &apos;Python SMTP 邮件测试&apos;message[&apos;Subject&apos;] = Header(subject, &apos;utf-8&apos;) try: smtpObj = smtplib.SMTP() smtpObj.connect(mail_host, 25) # 25 为 SMTP 端口号 smtpObj.login(mail_user,mail_pass) smtpObj.sendmail(sender, receivers, message.as_string()) print (&quot;邮件发送成功&quot;)except smtplib.SMTPException: print (&quot;Error: 无法发送邮件&quot;) 这样执行，会报错smtplib.SMTPDataError: (554, &#39;DT:SPM 126 smtp5,jtKowAD3MJz2c1JXLcK2AA--.52114S2 1465021431,please see http://mail.163.com/help/help_spam_16.htm?ip=123.114.121.110&amp;hostid=smtp5&amp;time=1465021431&#39;) 解决办法就是指定收发件人12message[&apos;From&apos;] = from_accountmessage[&apos;To&apos;] = to_account p.s 网易邮箱客户端默认授权码是关闭的，直接执行python调用会失败，要先进客户端，把客户授权码打开位置：设置-客户端授权密码设置完成之后，登录密码就使用你设置的授权码]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>smtplib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium无干预下载]]></title>
    <url>%2F2018%2F01%2F10%2Fselenium%E6%97%A0%E5%B9%B2%E9%A2%84%E4%B8%8B%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[selenium自带了无人工干预实现下载功能的模块，下载时不需要弹窗点击确定下载 代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverimport timeclass MacDownload(): def __init__(self): &quot;&quot;&quot;初始化&quot;&quot;&quot; # 创建一个FirefoxProfile实例，用于存放自定义配置 profile = webdriver.FirefoxProfile() # 指定下载路径，默认自动创建一级目录 profile.set_preference(&apos;browser.download.dir&apos;, &apos;G:\idownload&apos;) # 将browser.download.folderLis设置为2，表示将文件下载到指定目录（0表示桌面，1表示默认路径） profile.set_preference(&quot;browser.download.folderList&quot;, 2) # browser.helperApps.alwaysAsk.force对于未知的MIME类型文件会弹出窗口 # 让用户处理，默认值为True，设定为False表示不会记录打开未知MIME类型文件的方式 profile.set_preference(&quot;browser.helperApps.alwaysAsk.force&quot;, False) # 在开始下载时是否显示下载管理器 profile.set_preference(&quot;browser.download.manager.showWhenStarting&quot;, False) # 设定为False会把下载狂隐藏 profile.set_preference(&quot;browser.download.manager.useWindow&quot;, False) # 默认为True，设定为False表示不获取焦点 profile.set_preference(&quot;browser.download.manager.focusWhenStarting&quot;, False) # 下载.exe文件弹出警告，默认值为True，设定为False则不会弹出警告 profile.set_preference(&quot;browser.download.manager.alertOnEXEOpen&quot;, False) # browser.helperApps.neverAsk.openFile表示直接打开下载文件，不显示确定框 # 默认值为空字符串，下行代码行设定了多种文件的MIME类型， # 例如application/exe,表示 .exe类型的文件；application/excel表示excel类型的文件 profile.set_preference(&quot;browser.helperApps.neverAsk.openFile&quot;, &quot;application/pdf&quot;) # 对所给出文件类型不在弹出提示框进行询问，直接保存到本地磁盘 profile.set_preference(&quot;browser.helperApps.neverAsk.saveToDisk&quot;, &quot;application/zip, application/octet-stream&quot;) # browser.download.manager.showAlertOnComplete设定下载文件结束后是否显示下载完成提示框 # 默认为True，设定为False表示下载完成后不显示下载完成提示框 profile.set_preference(&quot;browser.download.manager.showAlertOnComplete&quot;, False) # browser.download.manager.closeWhenDone设定下载结束后是都自动关闭下载框 # 默认为True，设定为False表示不关闭下载管理器 profile.set_preference(&quot;browser.download.manager.closeWhenDone&quot;, False) # 启动浏览器，通过firfox_profile参数将自动配置添加到FirefoxProfile对象中sef.driver = webdriver.Firefox(firefox_profile=profile) self.driver = webdriver.Firefox(firefox_profile=profile) def test_dataPicker(self): #访问WebDriver驱动firefox的驱动文件下载网址 # url1 = &quot;https://github.com/mozilla/geckodriver/releases&quot; # self.driver.get(url1) # #选择下载ZIP类型的文件，使用application/zip指代此类型文件 # self.driver.find_element_by_xpath(&apos;//strong[. = &quot;geckodriver-v0.19.1-win32.zip&quot;]&apos;).click() # time.sleep(10) #访问Python2.7.12文件下载页面，下载扩展名为msi的文件 #使用application/octet - stream来指明次文件类型 url = &quot;https://www.python.org/downloads/release/python-2712/&quot; self.driver.get(url) self.driver.find_element_by_link_text(&apos;Windows x86-64 MSI installer&apos;).click() time.sleep(100) self.driver.quit()]]></content>
      <categories>
        <category>selenium</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[12306余票监控]]></title>
    <url>%2F2018%2F01%2F10%2F12306%E4%BD%99%E7%A5%A8%E7%9B%91%E6%8E%A7%2F</url>
    <content type="text"><![CDATA[翻日历突然意识到，好像要放假了，又是一年春运时，就想着可不可以用selenium做个自己的监控12306余票的程序。 动手：思路也就是输入起点，终点，选择列车，选择座位，查询是否有余票。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverfrom selenium.webdriver.common.keys import Keysimport timeclass monitorTickets(): &quot;&quot;&quot; 查询12306硬座，硬卧，软卧余票 &quot;&quot;&quot; def __init__(self): &quot;&quot;&quot;初始化&quot;&quot;&quot; #使用chrome浏览器打开查询12306查询页面 self.browser = webdriver.Chrome() url = &apos;https://kyfw.12306.cn/otn/leftTicket/init&apos; self.browser.get(url) def search_tickets(self,train_name, start_stations, end_stations, ticket_id): &quot;&quot;&quot;循环获取余票&quot;&quot;&quot; print(&quot;开始查询【%s】次列车余票信息&quot; % train_name) for start_station in start_stations: try: for end_station in end_stations: #输入起点 starts = self.browser.find_element_by_id(&quot;fromStationText&quot;) starts.click() starts.clear() starts.send_keys(start_station) starts.send_keys(Keys.ENTER) #输入到站 ends = self.browser.find_element_by_id(&quot;toStationText&quot;) ends.click() ends.clear() ends.send_keys(end_station) ends.send_keys(Keys.ENTER) #选择时间 #使用js将只读属性去除，完成选择时间 js = &apos;document.getElementById(&quot;train_date&quot;).removeAttribute(&quot;readonly&quot;);&apos; self.browser.execute_script(js) date = self.browser.find_element_by_id(&apos;train_date&apos;) date.clear() date.send_keys(&apos;2018-02-10&apos;) date.click() self.browser.find_element_by_id(&quot;query_ticket&quot;).click() time.sleep(2) text = self.browser.find_element_by_id(ticket_id).text if text == u&quot;无&quot;: print(u&quot;【%s】到【%s】的余票为0，节哀～&quot; % (start_station, end_station)) time.sleep(1) elif text == u&quot;*&quot;: print(u&quot;【%s】到【%s】的车票还未开售，请耐心等待～&quot; % (start_station, end_station)) time.sleep(1) else: print(u&quot;发现【%s】到【%s】的余票，抢!&quot; % (start_station, end_station)) except: continue print(&quot;结束查询【%s】次列车余票信息&quot; % train_name) def close_browser(self): &quot;&quot;&quot;关浏览器&quot;&quot;&quot; time.sleep(3) self.browser.quit()if __name__ == &apos;__main__&apos;: #查票 time.sleep(1) search_ticket = monitorTickets() while True: print(&quot;监控硬座&quot;) search_ticket.search_tickets(&apos;T116&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;陇西&apos;], &apos;YZ_550000T11671&apos;) search_ticket.search_tickets(&apos;Z216&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;甘谷&apos;], &apos;YZ_550000Z21605&apos;) search_ticket.search_tickets(&apos;T112&apos;, [&apos;嘉兴&apos;, &apos;昆山&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;陇西&apos;], &apos;YZ_560000T11251&apos;) search_ticket.search_tickets(&apos;T204&apos;, [&apos;上海&apos;, &apos;昆山&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;兰州&apos;], &apos;YZ_550000T20450&apos;) search_ticket.search_tickets(&apos;Z40&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;兰州&apos;], &apos;YZ_5500000Z4061&apos;) print(&quot;监控硬座结束&quot;) # print(&quot;监控硬卧&quot;) # search_ticket.search_tickets(&apos;T116&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;陇西&apos;], &apos;YW_550000T11671&apos;) # search_ticket.search_tickets(&apos;Z216&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;甘谷&apos;], &apos;YW_550000Z21605&apos;) # search_ticket.search_tickets(&apos;T112&apos;, [&apos;嘉兴&apos;, &apos;昆山&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;陇西&apos;], &apos;YW_560000T11251&apos;) # search_ticket.search_tickets(&apos;T204&apos;, [&apos;上海&apos;, &apos;昆山&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;兰州&apos;], &apos;YW_550000T20450&apos;) # search_ticket.search_tickets(&apos;Z40&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;兰州&apos;], &apos;YW_5500000Z4061&apos;) # print(&quot;监控硬卧结束&quot;) # # print(&quot;监控软卧&quot;) # search_ticket.search_tickets(&apos;T116&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;陇西&apos;], &apos;RW_550000T11671&apos;) # search_ticket.search_tickets(&apos;Z216&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;甘谷&apos;], &apos;RW_550000Z21605&apos;) # search_ticket.search_tickets(&apos;T112&apos;, [&apos;嘉兴&apos;, &apos;昆山&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;陇西&apos;], &apos;RW_560000T11251&apos;) # search_ticket.search_tickets(&apos;T204&apos;, [&apos;上海&apos;, &apos;昆山&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;兰州&apos;], &apos;RW_550000T20450&apos;) # search_ticket.search_tickets(&apos;Z40&apos;, [&apos;上海&apos;, &apos;苏州&apos;], [&apos;宝鸡&apos;, &apos;天水&apos;, &apos;兰州&apos;], &apos;RW_5500000Z4061&apos;) # print(&quot;监控软卧结束&quot;) # msg = input(&quot;Enter &apos;q&apos; to quit&quot;) # if msg == &apos;q&apos;: # break # search_ticket.close_browser()]]></content>
      <categories>
        <category>selenium</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[登录网易邮箱]]></title>
    <url>%2F2018%2F01%2F05%2F%E7%99%BB%E5%BD%95%E7%BD%91%E6%98%93%E9%82%AE%E7%AE%B1%2F</url>
    <content type="text"><![CDATA[基于python3的自动化测试框架selenium3实践 登录网易邮箱（126,163） 登录163123456789101112131415161718192021222324252627282930#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverfrom selenium.webdriver.common.keys import Keysimport timebrowser = webdriver.Chrome()browser.get(&apos;http://mail.163.com/&apos;)browser.maximize_window()#切换进iframebrowser.implicitly_wait(5)browser.switch_to.frame(&apos;x-URS-iframe&apos;)time.sleep(1)#定位账号username = browser.find_element_by_name(&apos;email&apos;)username.clear()username.send_keys(&apos;***&apos;)time.sleep(1)#定位密码pwd = browser.find_element_by_name(&apos;password&apos;)pwd.clear()pwd.send_keys(&apos;***&apos;)#登录pwd.send_keys(Keys.ENTER)time.sleep(3)browser.quit() 或者123456789101112131415#coding:utf-8from selenium import webdriverfrom selenium.webdriver.common.keys import Keysimport timedriver = webdriver.Firefox()driver.get(&apos;http://mail.163.com/&apos;)driver.implicitly_wait(10)#切换iframeiframe = driver.find_elements_by_tag_name(&apos;iframe&apos;)driver.switch_to_frame(iframe)#driver.switch_to.frame(&apos;x-URS-iframe&apos;)driver.find_element_by_name(&apos;email&apos;).send_keys(&apos;123&apos;)driver.find_element_by_name(&apos;password&apos;).send_keys(&apos;456&apos;)brower.find_element_by_name(&quot;password&quot;).send_keys(Keys.ENTER) 登录12612345678910111213141516171819202122232425262728293031#!/usr/bin/env python3# -*- coding: utf-8 -*-import timefrom selenium import webdriverfrom selenium.webdriver.common.keys import Keysbrowser = webdriver.Chrome()browser.get(&apos;http://mail.126.com/&apos;)browser.maximize_window()# 切换iframebrowser.implicitly_wait(5)browser.switch_to.frame(&apos;x-URS-iframe&apos;)time.sleep(1)# 定位用户名username = browser.find_element_by_name(&apos;email&apos;)username.clear()username.send_keys(&apos;***&apos;)time.sleep(1)#定位密码pwd = browser.find_element_by_name(&apos;password&apos;)pwd.clear()pwd.send_keys(&apos;***&apos;)#登录pwd.send_keys(Keys.ENTER)time.sleep(3)browser.quit() ~记小白入坑selenium]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>selenium</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nose跳过测试]]></title>
    <url>%2F2018%2F01%2F04%2Fnose%E8%B7%B3%E8%BF%87%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[nose进行单元测试，和unittest一样，有跳过某个方法，指定特定类进行测试的功能。 识别规则使用nose进行单元测试，测试用例识别规则如下：12345nosetests only_test_this.pynosetests test.modulenosetests another.test:TestCase.test_methodnosetests a.test:TestCasenosetests /path/to/test/file.py:test.function 示例执行全部测试直接代码示例：12345678910111213141516171819202122232425262728293031323334353637383940#!/usr/bin/env python3# -*- coding: utf-8 -*-import tracebackfrom nose.tools import eq_from nose.plugins.attrib import attrfrom nose.plugins.skip import SkipTestfrom functools import reduceclass test_nosetests(): #测试加法 def test_sum(self): a = 1 b = 2 res = 3 eq_(a+b,res) #测试乘法 def test_mul(self): a = 1 b = 2 res = 2 eq_(a*b, res) #测试除法 def test_div(self): a = 2 b = 0 res = 1 try: eq_(a/b, res) except ZeroDivisionError as e: print(traceback.print_exc()) #测试reduce函数 def test_reduce(self): req = range(1,6) a = 120 res = reduce(lambda x, y: x*y, req) eq_(a, res) 想要对test_nosetests该方法进行测试，可以： 121. nosetests -v NoseTestsexercise.py --with-html --html-file=G:/workstation/report/test_nosetests.html2. nosetests -v NoseTestsexercise.py:test_nosetests --with-html --html-file=G:/workstation/report/test_nosetests.html 由于该python文件只有这一个测试类，所以直接nosetests该python文件即可以进行测试，或者是指定该python文件的测试类如NoseTestsexercise.py:test_nosetests方式 测试结果： 执行指定方法的测试执行指定的一个方法：1nosetests -v NoseTestsexercise.py:test_nosetests.test_reduce --with-html --html-file=G:/workstation/report/test_nosetests.html 示例执行了test_nosetests类下的test_reduce方法的测试 测试结果： 跳过指定方法的测试有的时候，只需要跳过某个方法：例如想跳过test_mul该方法，只需要在代码上增加跳过标志即可1234567#测试乘法 def test_mul(self): a = 1 b = 2 res = 2 eq_(a*b, res) raise SkipTest 执行：1nosetests -v NoseTestsexercise.py:test_nosetests --with-html --html-file=G:/workstation/report/test_nosetests.html 测试结果： 其他另外，nosetests也有用例执行优先级的功能1234from nose.plugins.attrib import attr @attr(speed=&apos;slow&apos;) def test_big_download(self): print(&apos;pass&apos;) 执行只需要：nosetests -a speed=slow即可 参考用法]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>nose</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python单元测试框架-nose]]></title>
    <url>%2F2018%2F01%2F03%2Fpython%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6-nose%2F</url>
    <content type="text"><![CDATA[python单元测试框架 nose简介 简介nose是python单元测试的另一框架，nose可以自动识别继承于unittest.TestCase的测试单元，并执行测试，而且，nose也可以测试非继承于unittest.TestCase的测试单元。nose提供了丰富的API便于编写测试代码。 安装及使用安装：1pip install nose 基本语法：1nosetests [options] [(optional) test files or directories] 扩展使用nose自动收集单元测试，收集它当前工作目录下的源代码文件、目录以及包。任何的源代码文件、目录或者包只要匹配正则表达式，他们就会被自动收集。包的测试收集按照树的层级级别一级一级进行，因此package.tests、package.sub.tests、package.sub.sub2.tests将会被收集。 扩展插件nose支持多种插件，可完成基本大部分测试需要。nose拥有很多内置的插件帮助进行输出抓取、错误查找、代码覆盖、文档测试（doctest）等等。 命令行执行命令可查看插件：1nosetests –plugins 若想查看详细信息，可执行12nosetests –plugins -vnosetests –plugins -vv nose使用nose使用和unittest类似，unittest的断言，nose.tools中都可以选择使用使用示例：unittest：123456789101112131415161718import unittestclass NoseTest(unittest.TestCase): def setUp(self): print(&quot;=============setUp===============&quot;) def test_Pass(self): print(&quot;==========begin test=========&quot;) a = 1 b = 2 self.assertTrue(a == b, &apos;断言失败, %a != %a&apos;% (a, b)) def tearDown(self): print(&quot;==============tearDown===============&quot;)if __name__ == &apos;__main__&apos;: unittest.main() nose:12345678from nose.tools import eq_from nose.tools import assert_equalclass noseTest(): a = 1 b = 2 #assert_equal(a, b, &apos;%a != %a&apos;%(a,b)) eq_(a, b) nose也支持在代码中直接运行nose.main()或者nose.run()这样类似于unittest的方式，但是还是建议在命令行中运行nosetests来执行单元测试参考示例：1nosetests -v HandleFrameByPageSource.py:test_handleFrameByPageSource --with-html --html-file=G:\workstation\report\handleframe.html 说明：1234nosetests -v: 显示详细的运行信息和调试信息HandleFrameByPageSource.py:test_handleFrameByPageSource ：测试对象为该python文件下的test_handleFrameByPageSource类--with-html ：使用html插件,生成标准HTML格式测试报告--html-file=G:\workstation\report\handleframe.html ：测试结果输出为该路径下handleframe.html文件]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>nose</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win32api_VK_CODE]]></title>
    <url>%2F2018%2F01%2F02%2Fwin32api-VK-CODE%2F</url>
    <content type="text"><![CDATA[python使用win32api模块，可模拟键盘按键，应用于爬虫及自动化测试。 键盘按键对应的Vitual keystroke如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535#Giant dictonary to hold key name and VK valueVK_CODE = &#123;&apos;backspace&apos;:0x08, &apos;tab&apos;:0x09, &apos;clear&apos;:0x0C, &apos;enter&apos;:0x0D, &apos;shift&apos;:0x10, &apos;ctrl&apos;:0x11, &apos;alt&apos;:0x12, &apos;pause&apos;:0x13, &apos;caps_lock&apos;:0x14, &apos;esc&apos;:0x1B, &apos;spacebar&apos;:0x20, &apos;page_up&apos;:0x21, &apos;page_down&apos;:0x22, &apos;end&apos;:0x23, &apos;home&apos;:0x24, &apos;left_arrow&apos;:0x25, &apos;up_arrow&apos;:0x26, &apos;right_arrow&apos;:0x27, &apos;down_arrow&apos;:0x28, &apos;select&apos;:0x29, &apos;print&apos;:0x2A, &apos;execute&apos;:0x2B, &apos;print_screen&apos;:0x2C, &apos;ins&apos;:0x2D, &apos;del&apos;:0x2E, &apos;help&apos;:0x2F, &apos;0&apos;:0x30, &apos;1&apos;:0x31, &apos;2&apos;:0x32, &apos;3&apos;:0x33, &apos;4&apos;:0x34, &apos;5&apos;:0x35, &apos;6&apos;:0x36, &apos;7&apos;:0x37, &apos;8&apos;:0x38, &apos;9&apos;:0x39, &apos;a&apos;:0x41, &apos;b&apos;:0x42, &apos;c&apos;:0x43, &apos;d&apos;:0x44, &apos;e&apos;:0x45, &apos;f&apos;:0x46, &apos;g&apos;:0x47, &apos;h&apos;:0x48, &apos;i&apos;:0x49, &apos;j&apos;:0x4A, &apos;k&apos;:0x4B, &apos;l&apos;:0x4C, &apos;m&apos;:0x4D, &apos;n&apos;:0x4E, &apos;o&apos;:0x4F, &apos;p&apos;:0x50, &apos;q&apos;:0x51, &apos;r&apos;:0x52, &apos;s&apos;:0x53, &apos;t&apos;:0x54, &apos;u&apos;:0x55, &apos;v&apos;:0x56, &apos;w&apos;:0x57, &apos;x&apos;:0x58, &apos;y&apos;:0x59, &apos;z&apos;:0x5A, &apos;numpad_0&apos;:0x60, &apos;numpad_1&apos;:0x61, &apos;numpad_2&apos;:0x62, &apos;numpad_3&apos;:0x63, &apos;numpad_4&apos;:0x64, &apos;numpad_5&apos;:0x65, &apos;numpad_6&apos;:0x66, &apos;numpad_7&apos;:0x67, &apos;numpad_8&apos;:0x68, &apos;numpad_9&apos;:0x69, &apos;multiply_key&apos;:0x6A, &apos;add_key&apos;:0x6B, &apos;separator_key&apos;:0x6C, &apos;subtract_key&apos;:0x6D, &apos;decimal_key&apos;:0x6E, &apos;divide_key&apos;:0x6F, &apos;F1&apos;:0x70, &apos;F2&apos;:0x71, &apos;F3&apos;:0x72, &apos;F4&apos;:0x73, &apos;F5&apos;:0x74, &apos;F6&apos;:0x75, &apos;F7&apos;:0x76, &apos;F8&apos;:0x77, &apos;F9&apos;:0x78, &apos;F10&apos;:0x79, &apos;F11&apos;:0x7A, &apos;F12&apos;:0x7B, &apos;F13&apos;:0x7C, &apos;F14&apos;:0x7D, &apos;F15&apos;:0x7E, &apos;F16&apos;:0x7F, &apos;F17&apos;:0x80, &apos;F18&apos;:0x81, &apos;F19&apos;:0x82, &apos;F20&apos;:0x83, &apos;F21&apos;:0x84, &apos;F22&apos;:0x85, &apos;F23&apos;:0x86, &apos;F24&apos;:0x87, &apos;num_lock&apos;:0x90, &apos;scroll_lock&apos;:0x91, &apos;left_shift&apos;:0xA0, &apos;right_shift &apos;:0xA1, &apos;left_control&apos;:0xA2, &apos;right_control&apos;:0xA3, &apos;left_menu&apos;:0xA4, &apos;right_menu&apos;:0xA5, &apos;browser_back&apos;:0xA6, &apos;browser_forward&apos;:0xA7, &apos;browser_refresh&apos;:0xA8, &apos;browser_stop&apos;:0xA9, &apos;browser_search&apos;:0xAA, &apos;browser_favorites&apos;:0xAB, &apos;browser_start_and_home&apos;:0xAC, &apos;volume_mute&apos;:0xAD, &apos;volume_Down&apos;:0xAE, &apos;volume_up&apos;:0xAF, &apos;next_track&apos;:0xB0, &apos;previous_track&apos;:0xB1, &apos;stop_media&apos;:0xB2, &apos;play/pause_media&apos;:0xB3, &apos;start_mail&apos;:0xB4, &apos;select_media&apos;:0xB5, &apos;start_application_1&apos;:0xB6, &apos;start_application_2&apos;:0xB7, &apos;attn_key&apos;:0xF6, &apos;crsel_key&apos;:0xF7, &apos;exsel_key&apos;:0xF8, &apos;play_key&apos;:0xFA, &apos;zoom_key&apos;:0xFB, &apos;clear_key&apos;:0xFE, &apos;+&apos;:0xBB, &apos;,&apos;:0xBC, &apos;-&apos;:0xBD, &apos;.&apos;:0xBE, &apos;/&apos;:0xBF, &apos;`&apos;:0xC0, &apos;;&apos;:0xBA, &apos;[&apos;:0xDB, &apos;\\&apos;:0xDC, &apos;]&apos;:0xDD, &quot;&apos;&quot;:0xDE, &apos;`&apos;:0xC0&#125;def press(*args): &apos;&apos;&apos; one press, one release. accepts as many arguments as you want. e.g. press(&apos;left_arrow&apos;, &apos;a&apos;,&apos;b&apos;). &apos;&apos;&apos; for i in args: win32api.keybd_event(VK_CODE[i], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[i],0 ,win32con.KEYEVENTF_KEYUP ,0)def pressAndHold(*args): &apos;&apos;&apos; press and hold. Do NOT release. accepts as many arguments as you want. e.g. pressAndHold(&apos;left_arrow&apos;, &apos;a&apos;,&apos;b&apos;). &apos;&apos;&apos; for i in args: win32api.keybd_event(VK_CODE[i], 0,0,0) time.sleep(.05) def pressHoldRelease(*args): &apos;&apos;&apos; press and hold passed in strings. Once held, release accepts as many arguments as you want. e.g. pressAndHold(&apos;left_arrow&apos;, &apos;a&apos;,&apos;b&apos;). this is useful for issuing shortcut command or shift commands. e.g. pressHoldRelease(&apos;ctrl&apos;, &apos;alt&apos;, &apos;del&apos;), pressHoldRelease(&apos;shift&apos;,&apos;a&apos;) &apos;&apos;&apos; for i in args: win32api.keybd_event(VK_CODE[i], 0,0,0) time.sleep(.05) for i in args: win32api.keybd_event(VK_CODE[i],0 ,win32con.KEYEVENTF_KEYUP ,0) time.sleep(.1) def release(*args): &apos;&apos;&apos; release depressed keys accepts as many arguments as you want. e.g. release(&apos;left_arrow&apos;, &apos;a&apos;,&apos;b&apos;). &apos;&apos;&apos; for i in args: win32api.keybd_event(VK_CODE[i],0 ,win32con.KEYEVENTF_KEYUP ,0)def typer(string=None,*args):## time.sleep(4) for i in string: if i == &apos; &apos;: win32api.keybd_event(VK_CODE[&apos;spacebar&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;spacebar&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;!&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;1&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;1&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;@&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;2&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;2&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;&#123;&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;[&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;[&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;?&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;/&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;/&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;:&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;;&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;;&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;&quot;&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;\&apos;&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;\&apos;&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;&#125;&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;]&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;]&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;#&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;3&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;3&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;$&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;4&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;4&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;%&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;5&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;5&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;^&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;6&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;6&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;&amp;&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;7&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;7&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;*&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;8&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;8&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;(&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;9&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;9&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;)&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;0&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;0&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;_&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;-&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;-&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;=&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;+&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;+&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;~&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;`&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;`&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;&lt;&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;,&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;,&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;&gt;&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;.&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;.&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;A&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;a&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;a&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;B&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;b&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;b&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;C&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;c&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;c&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;D&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;d&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;d&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;E&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;e&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;e&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;F&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;f&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;f&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;G&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;g&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;g&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;H&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;h&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;h&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;I&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;i&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;i&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;J&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;j&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;j&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;K&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;k&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;k&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;L&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;l&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;l&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;M&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;m&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;m&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;N&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;n&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;n&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;O&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;o&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;o&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;P&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;p&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;p&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;Q&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;q&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;q&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;R&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;r&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;r&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;S&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;s&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;s&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;T&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;t&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;t&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;U&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;u&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;u&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;V&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;v&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;v&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;W&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;w&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;w&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;X&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;x&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;x&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;Y&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;y&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;y&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) elif i == &apos;Z&apos;: win32api.keybd_event(VK_CODE[&apos;left_shift&apos;], 0,0,0) win32api.keybd_event(VK_CODE[&apos;z&apos;], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[&apos;left_shift&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) win32api.keybd_event(VK_CODE[&apos;z&apos;],0 ,win32con.KEYEVENTF_KEYUP ,0) else: win32api.keybd_event(VK_CODE[i], 0,0,0) time.sleep(.05) win32api.keybd_event(VK_CODE[i],0 ,win32con.KEYEVENTF_KEYUP ,0) 参考地址]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
        <tag>win32api</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3.6安装pywin32]]></title>
    <url>%2F2017%2F12%2F28%2Fpython3-6%E5%AE%89%E8%A3%85pywin32%2F</url>
    <content type="text"><![CDATA[python3.6装载win32api模块 使用pip安装win32报错 1Could not find a version that satisfies the requirement win32api (from versions: )No matching distribution found for win32api stack overflow上面有两种回答 pip install pypiwin32 从windowsapi官网下载安装程序，点击安装 首先尝试了第一种方式，没啥用，还是找不到win32api尝试第二种方法，直接报错：1Python version 3.6-32 required, which was not found in the registry. 找半天问题，首先本地python是64位版本，下载的也是64位安装包，报这莫名其妙的注册表错误。后来在注册表里加了个python3.6-32就能安装了，莫名其妙。。1HKEY_LOCAL_MACHINE\SOFTWARE\Python\PythonCore\3.6-32 导入了个奇奇怪怪的win32api，貌似用不了12345#!/usr/bin/env python3# -*- coding: utf-8 -*-import win32.win32apiimport win32.win32clipboardimport win32com 根据以往踩坑经验，改注册表好像都没什么好下场，于是乎，把装好的win32全部删除，注册表还原，重新下载更新版本的pywin32：下载链接 重新安装之后，重启pycharm，这次好像是成功了。。123456import win32apiimport win32condef keyDown(keyName): win32api.keybd_event() win32con.KEYEVENTF_KEYUP 反正过程是挺无语的，莫名其妙的就好了。 附上环境信息：123WIN-10 64位python-3.6 64位pywin32-221.win-amd64-py3.6]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pywin32</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3_map()函数]]></title>
    <url>%2F2017%2F12%2F27%2Fpython3-map-%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[坑爹python3改动之map()函数 做自动化测试，获取并校验下拉列表中所有值，由于实在不想先写个空列表，再来个for循环全部加到列表中，就想到了map()函数，折腾半天，各种报错，墙里墙外翻半天，终于找到跟我一样入坑的人。 map()函数，python3改动 在python2中，以下代码可输出一个列表[1, 2, 3, 4, 5]12a = map(lambda x:x, [1, 2, 3, 4, 5])print(a) 但是python3，这玩意只能输出个map对象：&lt;map object at 0x00000278CB45D4E0&gt; 遇到这玩意也很多次了，直接加list：12a = list(map(lambda x: x, [1, 2, 3, 4, 5]))print(a) 这样，在python3就可以输出[1, 2, 3, 4, 5] 附自动化测试比较下拉列表值是否符合预期示例代码（百度新闻高级设置-显示条数为例）：12345678910111213141516171819202122232425262728293031323334353637#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverfrom selenium.webdriver.support.ui import Selectimport unittestimport timeclass News_Baidu(unittest.TestCase): def setUp(self): #打开浏览器 self.brower = webdriver.Chrome() def test_Checklist(self): #打开百度新闻页面 self.brower.get(&quot;http://news.baidu.com/&quot;) #定位“高级设置”，并点击 self.brower.find_element_by_link_text(&quot;高级搜索&quot;).click() #定位“搜索结果显示条数” select_element = Select(self.brower.find_element_by_name(&apos;rn&apos;)) #获取下拉列表所有元素对象 select_options = select_element.options #声明一个期望下拉列表值的列表(百度也是够坑的，值前面还有一个空格) expect_optionlist = [&apos; 每页显示10条&apos;, &apos; 每页显示20条&apos;, &apos; 每页显示50条&apos;] #获取实际的下拉列表值的列表 actual_optionlist = list(map(lambda option:option.text, select_options)) #断言结果是否适合期望 self.assertListEqual(actual_optionlist, expect_optionlist) def tearDown(self): #休眠 time.sleep(5) #退出浏览器 self.brower.quit()if __name__ == &apos;__main__&apos;: unittest.main()]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html报告乱码]]></title>
    <url>%2F2017%2F12%2F26%2Fhtml%E6%8A%A5%E5%91%8A%E4%B9%B1%E7%A0%81%2F</url>
    <content type="text"><![CDATA[使用HTMLTestRunner进行测试报告输出时，错误说明，中午乱码，版本：12python3.6HTMLTestRunner 1.1.1 网上搜了一堆，全是用python2.x的，心痛，2.X到2020年不就不支持了嘛，为啥一个个的都在2.X上面，没办法，自己去捣鼓源码。 报告输出的html文件，使用类似于notepad的编辑器打开，编码格式改为UTF-8，重新在浏览器中打开，错误描述的中文显示就是正常文字。所以，只要在输出时，设置编码为“utf-8”应该就可以。 找到本地的HTMLTestRunner安装路径，一般都是在G:\skills\python36\Lib\site-packages\HtmlTestRunner类似这样的路径下，毕竟扩展包。下面有三个文件，和一个文件夹，文件夹里是报告的模板，不考虑，三个文件，一个是HtmlTestRunner的介绍，一个是runner.py，一个是result.py，输出报告，应该就在result.py文件中。 编辑器打开result.py，找到第350行1with open(path_file, &apos;w&apos;) as report_file: 只要修改成1with open(path_file, &apos;w&apos;,encoding=&apos;utf-8&apos;) as report_file: 即可。 附上百度搜索自动化测试代码 123456789101112131415161718192021222324252627282930313233#!/usr/bin/env python3# -*- coding: utf-8 -*-import unittestimport timefrom selenium import webdriverfrom HtmlTestRunner import HTMLTestRunnerclass GloryRoad(unittest.TestCase): def setUp(self): #启动chrome浏览器 self.brower = webdriver.Chrome() def test_baidu(self): #访问百度首页 self.brower.get(&quot;https://www.baidu.com&quot;) #清空输入框内容 self.brower.find_element_by_id(&apos;kw&apos;).clear() #搜索框输入“selenium3” self.brower.find_element_by_id(&apos;kw&apos;).send_keys(&apos;selenium3&apos;) #点击“百度一下”按键 self.brower.find_element_by_id(&apos;su&apos;).click() #休眠3s time.sleep(3) assert &quot;google&quot; in self.brower.page_source, &quot;页面中不存在要寻找的关键字！&quot; def tearDown(self): #退出浏览器 self.brower.quit()if __name__ == &apos;__main__&apos;: suite = unittest.TestLoader().loadTestsFromTestCase(GloryRoad) runner = HTMLTestRunner(output=&apos;G:/workstation/report&apos;, report_title=&apos;Test Result&apos;) runner.run(suite)]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pycharm单元测试]]></title>
    <url>%2F2017%2F12%2F25%2Fpycharm%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[使用pycharm编写/执行单元测试用例 python单元测试用例，调用方式使用1unittest.main() 该方式，在python shell中可执行成功，在pycharm中会一直报错，参考网上的写法，最后校验调用改为：12if _name_ == &apos;_main_&apos;: unittest.main() 结果一直报错，NameError: name &#39;_name_&#39; is not defined 简直了，找了半天，还是在墙外找到跟我有一样经历的哥们的求救，报错原因是_name_和_main都是双下划线，正确写法是： 12if __name__ == &apos;__main__&apos;: unittest.main() 真是日常坑自己…]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>pycharm</tag>
        <tag>unittest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[selenium3+python3.6搭建测试]]></title>
    <url>%2F2017%2F12%2F25%2Fselenium3-python3-6%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[python3.6selenium3chrome64firefox57 selenium3开始，需要浏览器驱动，加载驱动方式：121，驱动放在任意位置，代码中，引驱动，打开浏览器（webdriver.Chrome(executable_path=&quot;驱动路径&quot;）2，将驱动放到浏览器安装目录下，和浏览器启动程序同级，将浏览器安装路径加到环境变量Path中，重启pycharm 自动化测试示例： 12345678910111213141516171819202122232425262728#!/usr/bin/env python3# -*- coding: utf-8 -*-from selenium import webdriverimport time#加载驱动程序#firefox(驱动放到浏览器安装目录，目录加到Path)#driver = webdriver.Firefox()#chrome(驱动放到浏览器安装目录，目录加到Path)driver = webdriver.Chrome()#chrome默认安装路径，驱动指定路径#driver = webdriver.Chrome(executable_path=&quot;G:/Selenium/drivers/chromedriver.exe&quot;)#打开百度首页driver.get(&quot;https://www.baidu.com&quot;)#清空搜索输入框默认内容driver.find_element_by_id(&quot;kw&quot;).clear()#输入框中输入“自动化测试”driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;自动化测试&quot;)#单击搜索按钮driver.find_element_by_id(&quot;su&quot;).click()#等待3秒time.sleep(3)#退出浏览器driver.quit()]]></content>
      <categories>
        <category>自动化测试</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[world_map]]></title>
    <url>%2F2017%2F12%2F21%2Fworld-map%2F</url>
    <content type="text"><![CDATA[pygal-2.4pygal-maps-world-1.0.2 世界地图模块位置变更 pygal内置世界地图模块，包括国别码模块COUNTRIES以及世界地图模块World。 当前版本下，绘制世界地图，需要从pygal_maps_world.i18n中引国别码，需要从pygal_maps_world.maps中引世界地图。 参考代码如下： countries.py12345678910#!/usr/bin/env python3# -*- coding: utf-8 -*-from pygal_maps_world.i18n import COUNTRIESdef get_country_code(country_name): &quot;&quot;&quot;根据指定国家，返回国别码&quot;&quot;&quot; for code, name in COUNTRIES.items(): if name == country_name or name == country_name.title(): return code return None population_data.py123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/env python3# -*- coding: utf-8 -*-from settings import Settingsfrom countries import get_country_codefrom pygal.style import RotateStyle as RS,LightColorizedStyle as LCSimport pygal_maps_world.mapsimport jsondata_setting = Settings()filename = data_setting.json_populationwith open(filename) as f_obj: pop_data = json.load(f_obj)#打印每个国家2010年的人口cc_population = &#123;&#125;for pop_dict in pop_data: if pop_dict[&apos;Year&apos;] == &apos;2010&apos;: country_name = pop_dict[&apos;Country Name&apos;] population = int(float(pop_dict[&apos;Value&apos;])) code = get_country_code(country_name) if code: cc_population[code] = population#按人口给国家分组cc_pops_1, cc_pops_2, cc_pops_3 = &#123;&#125;, &#123;&#125;, &#123;&#125;for cc, pop in cc_population.items(): if pop &lt; 10000000: cc_pops_1[cc] = pop elif pop &lt; 1000000000: cc_pops_2[cc] = pop else: cc_pops_3[cc] = popwm_style = RS(&apos;#336699&apos;,base_style=LCS)wm = pygal_maps_world.maps.World(style=wm_style)wm.title = &quot;World Population in 2010.by Country&quot;wm.add(&apos;0-10m&apos;, cc_pops_1)wm.add(&apos;10m-1bn&apos;, cc_pops_2)wm.add(&apos;&gt;1bn&apos;, cc_pops_3)wm.render_to_file(&apos;world_population.svg&apos;)]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pygal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[绘制随机漫步图]]></title>
    <url>%2F2017%2F12%2F20%2F%E7%BB%98%E5%88%B6%E9%9A%8F%E6%9C%BA%E6%BC%AB%E6%AD%A5%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[matplotlib可绘制随机漫步图，取随机X个数，在画布上绘制，并加入渐变颜色，效果还是挺好看的 代码如下： random_walk.py1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env python3# -*- coding: utf-8 -*-from random import choiceclass RandomWalk(): &quot;&quot;&quot;一个生成随机漫步数据的类&quot;&quot;&quot; def __init__(self,num_point=5000): &quot;&quot;&quot;初始化随机漫步的属性&quot;&quot;&quot; self.num_point = num_point #所有随机漫步的点都始于（0,0） self.x_values = [0] self.y_values = [0] def get_step(self): &quot;&quot;&quot;设置前进方向及距离&quot;&quot;&quot; direction = choice([1, -1]) distance = choice([0, 1, 2, 3, 4]) step = distance * direction return step def fill_walk(self): &quot;&quot;&quot;计算随机漫步的所有点&quot;&quot;&quot; while len(self.x_values) &lt; self.num_point: x_step = self.get_step() y_step = self.get_step() #排除原地踏步情况 if x_step == 0 and y_step == 0: continue #计算下一个点的位置 next_x = self.x_values[-1] + x_step next_y = self.y_values[-1] + y_step self.x_values.append(next_x) self.y_values.append(next_y) rw_visual.py123456789101112131415161718192021222324252627#!/usr/bin/env python3# -*- coding: utf-8 -*-import matplotlib.pyplot as pltfrom random_walk import RandomWalkwhile True: #创建一个随机漫步实例，并将所有包含的点绘制出 rw = RandomWalk(30000) rw.fill_walk() point_num = list(range(rw.num_point)) plt.scatter(rw.x_values, rw.y_values, c=point_num, cmap=plt.cm.Blues, s=5) #突出起点和终点 plt.scatter(0, 0, c=&apos;green&apos;, s=100) plt.scatter(rw.x_values[-1], rw.y_values[-1], c=&apos;red&apos;, s=100) #隐藏坐标轴 plt.axes().get_xaxis().set_visible(False) plt.axes().get_yaxis().set_visible(False) #plt.subplot().set_xticks([]) #plt.subplot().set_yticks([]) plt.show() keep_drawing = input(&quot;Make another walk?y/n&quot;) if keep_drawing == &apos;n&apos;: break 可成功绘制随机漫步图，然而有个警告报错：1MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.warnings.warn(message, mplDeprecation, stacklevel=1) 原因是matplotlib版本问题，出在隐藏坐标轴plt.axes().get_yaxis()处，尝试修改为：12plt.subplot().set_xticks([])plt.subplot().set_yticks([]) 然而没啥用，还是在警告，暂时没解决。。好在不影响功能，不是强迫症也就无视这红字了。。]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[matplotlib绘制渐变图]]></title>
    <url>%2F2017%2F12%2F20%2Fmatplotlib%E7%BB%98%E5%88%B6%E6%B8%90%E5%8F%98%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[使用matplotlib绘制1-1000所有整数立方值图形报错 绘制1~1000所有整数的立方图，颜色采用渐变蓝色，点越接近坐标原点，颜色越浅。代码：123456789101112131415161718import matplotlib.pyplot as pltx_values = list(range(1,1001))y_values = [x**3 for x in x_values]plt.scatter(x_values, y_values, c=y_values,cmap=plt.cm.Blues,s=40)#设置图表坐标并设置坐标标签plt.title(&quot;Square Numbers&quot;,fontsize=24)plt.xlabel(&quot;Values&quot;,fontsize=14)plt.ylabel(&quot;Square of Value&quot;,fontsize=14)#设置坐标轴刻度plt.tick_params(axis=&apos;both&apos;, labelsize=14)#设置坐标轴取值plt.axes([0,1100,0,1100000])plt.show() 可以成功绘制图形，但是有警告报错：1UserWarning: Unable to find pixel distance along axis for interval padding of ticks; assuming no interval padding needed.warnings.warn(&quot;Unable to find pixel distance along axis &quot; 原因：设置坐标轴取值时，使用的是plt.axes，该函数创建的是一个轴对象，并将输入解释为指定位置的矩形，绘制的坐标轴中取值0在绘制的图形之外，超出了限制范围，所以警告报错。 解决方案：使用plt.axis()代替plt.axes()123#设置坐标轴取值plt.axis([0,1100,0,1100000])plt.show()]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django2.0更新内容记录]]></title>
    <url>%2F2017%2F12%2F19%2FDjango2-0%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[Django 2.0 变更内容(不按版本敲着实是有点坑o(╥﹏╥)o) 外键Django 1.9在创建models.ForeignKey外键时，可写成1topic = models.ForeignKey(Topic） Django 2.0需要多传一个字段on_delete，且可给定默认值models.CASCADE所以上述可写为：1topic = models.ForeignKey(Topic,on_delete=models.CASCADE) 指定app_nameDjango 1.9在映射URL时，工程的urls.py可写成：1234567from django.contrib import adminfrom django.urls import path,includeurlpatterns = [ path(&apos;admin/&apos;, admin.site.urls), path(&apos;&apos;,include(&apos;learning_logs.urls&apos;, namespace=&apos;learning_logs&apos;))] 应用的urls.py可写成：12345678&quot;&quot;&quot;定义learning_logs的URL模式&quot;&quot;&quot;from django.urls import pathfrom . import viewsurlpatterns = [ #主页 path(&apos;&apos;, views.index, name=&apos;index&apos;)] 该写法在Django 2.0中会出现报错：12&apos;Specifying a namespace in include() without providing an app_name &apos;django.core.exceptions.ImproperlyConfigured: Specifying a namespace in include() without providing an app_name is not supported. Set the app_name attribute in the included module, or pass a 2-tuple containing the list of patterns and app_name instead. 意思是缺少了app_name，所以需要指定app_name，我的做法是在应用的urls.py文件中指定app_name，也就是工程的urls.py保持不变，应用的urls.py增加app_name指定：123456789&quot;&quot;&quot;定义learning_logs的URL模式&quot;&quot;&quot;from django.urls import pathfrom . import viewsapp_name = &apos;learning_logs&apos;urlpatterns = [ #主页 path(&apos;&apos;, views.index, name=&apos;index&apos;)] 映射URL对于django.urls.path()函数，允许有简单的表示方法： 1url(r’^articles/(?P[0-9]&#123;4&#125;)/$’, views.year_archive), 可以写成： 1path(‘articles//‘, views.year_archive), 用法参见前博客记录]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[性能测试-理发师模型]]></title>
    <url>%2F2017%2F12%2F15%2F%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95-%E7%90%86%E5%8F%91%E5%B8%88%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[性能测试有个有名的模型，理发店模型，理发店标配：一间或大或小的店面，一个或几个理发师，几张理发的椅子和顾客休息的椅子。本文介绍一下理发店模型（相关资料网上一堆，只是为了自己记录） 场景假设 1234该理发店：1. 理发店共有3名理发师；2. 每位理发师剪一个发的时间都是1小时；3. 我们顾客们都是很有时间观念的人而且非常挑剔，他们对于每次光顾理发店时所能容忍的等待时间+剪发时间是3小时，而且等待时间越长，顾客的满意度越低。如果3个小时还不能剪完头发，我们的顾客会立马生气的走人。 场景模拟1231. 当理发店内只有1位顾客时，只需要有1名理发师为他提供服务，其他两名理发师可能继续等着，也可能会帮忙打打杂。1小时后，这位顾客剪完头发出门走了。那么在这1个小时里，整个理发店只服务了1位顾客，这位顾客花费在这次剪发的时间是1小时；2. 当理发店内同时有两位顾客时，就会同时有两名理发师在为顾客服务，另外1位发呆或者打杂帮忙。仍然是1小时后，两位顾客剪完头发出门。在这1小时里，理发店服务了两位顾客，这两位顾客花费在剪发的时间均为1小时；3. 很容易理解，当理发店内同时有三位顾客时，理发店可以在1小时内同时服务三位顾客，每位顾客花费在这次剪发的时间仍然是均为1小时； 从上面几个场景中我们可以发现，在理发店同时服务的顾客数量从1位增加到3位的过程中，随着顾客数量的增多，理发店的整体工作效率在提高，但是每位顾客在理发店内所呆的时间并未延长。 当然，我们可以假设当只有1位顾客和2位顾客时，空闲的理发师可以帮忙打杂，使得其他理发师的工作效率提高，并使每位顾客的剪发时间小于1小时。不过即使根据这个假设，虽然随着顾客数量的增多，每位顾客的服务时间有所延长，但是这个时间始终还被控制在顾客可接受的范围之内，并且顾客是不需要等待的。 不过随着理发店的生意越来越好，顾客也越来越多，新的场景出现了。假设有一次顾客A、B、C刚进理发店准备剪发，外面一推门又进来了顾客D、E、F。因为A、B、C三位顾客先到，所以D、E、F三位只好坐在长板凳上等着。1小时后，A、B、C三位剪完头发走了，他们每个人这次剪发所花费的时间均为1小时。可是D、E、F三位就没有这么好运，因为他们要先等A、B、C三位剪完才能剪，所以他们每个人这次剪发所花费的时间均为2小时——包括等待1小时和剪发1小时。 通过上面这个场景我们可以发现，对于理发店来说，都是每小时服务三位顾客——第1个小时是A、B、C，第二个小时是D、E、F；但是对于顾客D、E、F来说，“响应时间”延长了。如果你可以理解上面的这些场景，就可以继续往下看了。 在新的场景中，我们假设这次理发店里一次来了9位顾客，根据我们上面的场景，相信你不难推断，这9位顾客中有3位的“响应时间”为1小时，有3位的“响应时间”为2小时（等待1小时+剪发1小时），还有3位的“响应时间”为3小时（等待2小时+剪发1小时）——已经到达用户所能忍受的极限。假如在把这个场景中的顾客数量改为10，那么我们已经可以断定，一定会有1位顾客因为“响应时间”过长而无法忍受，最终离开理发店走了。 抽象 这张图中展示的是1个标准的软件性能模型。在图中有三条曲线，分别表示资源的利用情况（Utilization，包括硬件资源和软件资源）、吞吐量（Throughput，这里是指每秒事务数）以及响应时间（Response Time）。图中坐标轴的横轴从左到右表现了并发用户数（Number of Concurrent Users）的不断增长。 在这张图中我们可以看到，最开始，随着并发用户数的增长，资源占用率和吞吐量会相应的增长，但是响应时间的变化不大；不过当并发用户数增长到一定程度后，资源占用达到饱和，吞吐量增长明显放缓甚至停止增长，而响应时间却进一步延长。如果并发用户数继续增长，你会发现软硬件资源占用继续维持在饱和状态，但是吞吐量开始下降，响应时间明显的超出了用户可接受的范围，并且最终导致用户放弃了这次请求甚至离开。 根据这种性能表现，图中划分了三个区域，分别是Light Load（较轻的压力）、Heavy Load（较重的压力）和Buckle Zone（用户无法忍受并放弃请求）。在Light Load和Heavy Load 两个区域交界处的并发用户数，我们称为“最佳并发用户数（The Optimum Number of Concurrent Users）”，而Heavy Load和Buckle Zone两个区域交界处的并发用户数则称为“最大并发用户数（The Maximum Number of Concurrent Users）”。 当系统的负载等于最佳并发用户数时，系统的整体效率最高，没有资源被浪费，用户也不需要等待；当系统负载处于最佳并发用户数和最大并发用户数之间时，系统可以继续工作，但是用户的等待时间延长，满意度开始降低，并且如果负载一直持续，将最终会导致有些用户无法忍受而放弃；而当系统负载大于最大并发用户数时，将注定会导致某些用户无法忍受超长的响应时间而放弃。 对应到我们上面理发店的例子，每小时3个顾客就是这个理发店的最佳并发用户数，而每小时9个顾客则是它的最大并发用户数。当每小时都有3个顾客到来时，理发店的整体工作效率最高；而当每小时都有9个顾客到来时，前几个小时来的顾客还可以忍受，但是随着等待的顾客人数越来越多，等待时间越来越长，最终还是会有顾客无法忍受而离开。同时，随着理发店里顾客人数的增多和理发师工作时间的延长，理发师会逐渐产生疲劳，还要多花一些时间来清理环境和维持秩序，这些因素将最终导致理发师的工作效率随着顾客人数的增多和工作的延长而逐渐的下降，到最后可能要1.5小时甚至2个小时才能剪完1个发了。当然，如果一开始就有10个顾客到来，则注定有1位顾客剪不到头发了。 大神原网址]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jmeter系统监控配置]]></title>
    <url>%2F2017%2F12%2F15%2FJmeter%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Jmeter是测试人员经常会使用的一款压力测试工具，经常会使用来测试接口的性能；Jmeter同时具备监控服务器资源使用情况的功能。 主要介绍一下怎么使用Jmeter来监控服务器的CPU,内存,IO等信息。 下载使用Jmeter监控系统性能，实际上是插件的使用，可以认为是在Jmeter中装载了一个小型监控系统的客户端，同时在需要监控的系统内装载服务端，在允许Jmeter时，同时打开监控服务端，进行系统资源的监控。 12客户端：JMeterPlugins-Standard服务端：ServerAgent 下载地址： 官网下载 百度云链接： JMeterPlugins-Standard-1.4.0ServerAgent-2.2.1 配置说明将 JMeterPlugins-Standard-1.4.0.zip 中 lib\ext 目录下的 JmeterPlugins-Standard.jar 文件都放到apache-jmeter-2.13\lib\ext目录中。将 ServerAgent-2.2.1.zip 解压后放到要监控的服务器中待使用。 监控设置 启动Jmeter后，右击线程组，选择添加- 监听器- jp@gc-PerfMon Metrics Collector 打开jp@gc - PerfMon Metrics Collector，点击Add Row选择相应监控对象（服务器IP和监控内容），端口默认4444即可。 开启监控 设置永远循环，否则监控会运行一次就断开，设置方式：线程组-循环次数（选择永远） 服务端运行ServerAgent，Linux系统运行shell脚本，windows系统执行bat脚本（系统需事先完成jdk配置） 成功完成系统资源监控]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Jmeter</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客中加入图片]]></title>
    <url>%2F2017%2F12%2F14%2FHexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%8A%A0%E5%85%A5%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[好不容易搭好了hexo，插个图片各种错 本地引用绝对路径markdown语法实现 12source/images/image.jpg ![](/images/image.jpg) 这样，图片既可以在首页内容访问，也可以在文章正文中使用 相对路径首先在/blog/_config.yml 中设置 post_asset_folder: true ，这样在 hexo new “文章” 时会生成与文章标题一样的目录，将文章中需要使用的图片存在该目录下（source//_posts/文章） 12_posts/post_name/image.jpg ![](image.jpg) CDN引用现在大多数做法是使用图床，自己也看过七牛云之类的做为图床，但是，七牛云个流氓，还要手持身份证认证，所以暂时放弃。（该方法就是在图床中生成链接，直接引链接即可） Markdown 语法介绍]]></content>
      <categories>
        <category>skill</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python编码]]></title>
    <url>%2F2017%2F12%2F13%2Fpython%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[python日常踩坑系列（二） 日常编写python脚本，鉴于java各种坑编码经历，首先就会把pycharm编码设置成utf-8，但是不知道什么鬼，设置完成之后，编译还是会报编码gbk的错误 问题如下： “UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0x80 in position 34: illegal multibyte sequence” 解决方案： 1，设置所有文件编码默认为utf-8（文件最前面指定） 2，处理数据时进行转码： with open(“population.json”,encoding=’UTF-8’) as data: –完 (#^.^#)]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django获取不到特定链接]]></title>
    <url>%2F2017%2F12%2F13%2FDjango%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E7%89%B9%E5%AE%9A%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[python日常踩坑系列 按照教程方式打开本地特定链接报错源码如下： 12345678910111213from django.conf.urls import urlfrom . import viewsurlpatterns = [ # Home page. url(r'^$', views.index, name='index'), # Show all topics. url(r'^topics/$', views.topics, name='topics'), # Detail page for a single topic. url(r'^topics/(?P&lt;topic_id&gt;\d+)/$', views.topic, name='topic'),] 打开http://127.0.0.1:8000/topics/1/报错： 123456 Using the URLconf defined in learning_log.urls, Django tried these URL patterns, in this order: 1. admin/ 2. [name='index'] 3. topics [name='topics'] 4. topics/?P&lt;topic_id&gt;\d+/ [name='topic']The current path, topics/1/, didn't match any of these. 原因：Django2.0有更新对于django.urls.path()函数，允许有简单的表示方法： url(r’^articles/(?P[0-9]{4})/$’, views.year_archive), 可以写成： path(‘articles//‘, views.year_archive), 所以代码可更改为：12345678910111213from django.urls import pathfrom . import viewsapp_name = 'lerning_logs'urlpatterns = [ #主页 path('', views.index, name='index'), #显示所有主题 path('topics', views.topics, name='topics'), #特定主题的详细页面 #path('topics/?P&lt;topic_id&gt;\d+/', views.topic, name='topic'), path('topics/&lt;topic_id&gt;/', views.topic, name='topic'),]]]></content>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
</search>
